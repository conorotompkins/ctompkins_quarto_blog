{
  "hash": "0f5acad4e422de103c8fabb73e266c0d",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\ntitle: \"Graphing Allegheny County COVID-19 data\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R]\ncategories: [R, COVID-19]\ndate: 2020-07-07\nlastmod: 2020-08-07T13:27:14-04:00\nfeatured: false\ndraft: false\n# Focal points: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight.\nimage: featured.png\nprojects: []\neditor_options: \n  chunk_output_type: console\nexecute:\n  warning: false\n  message: false\n---\n\n\nIn this post, I review the process I use to make daily graphs from data published by the [Allegheny County Health Department](https://www.alleghenycounty.us/Health-Department/Resources/COVID-19/COVID-19.aspx). I use the [data posted by Franklin Chen](https://github.com/FranklinChen/covid-19-allegheny-county), who scrapes the data from the County's email updates.\n\nFirst, load the required packages and set up the environment.\n\n::: {.cell}\n\n```{.r .cell-code}\n#load libraries\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(tidyquant)\nlibrary(hrbrthemes)\n\n#settings\ntheme_set(theme_ipsum(base_size = 15, strip_text_size = 15, axis_title_size = 15))\n\noptions(scipen = 999, digits = 4)\n```\n:::\n\n\nThis reads in the raw data from the [GitHub repository](https://github.com/FranklinChen/covid-19-allegheny-county).\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in data\ndf <- read_csv(\"https://raw.githubusercontent.com/FranklinChen/covid-19-allegheny-county/master/covid-19-allegheny-county.csv\") %>% \n  mutate(state = \"Pennsylvania\",\n         county = \"Allegheny County\") %>% \n  filter(date < \"2020-07-08\")\n\nglimpse(df)\n```\n:::\n\n\n\n\nOn July 7th, the County added deaths that occurred between April and June, but marked them as reported on July 7th. For the purposes of visualization, I remove those deaths.\n\n::: {.cell}\n\n```{.r .cell-code}\n#remove deaths from July 7th\n#The deaths reported today are from the state’s use of the Electronic Data Reporting System (EDRS) and include #deaths from April 5 – June 13, all decedents were 65 or older.\n#https://twitter.com/HealthAllegheny/status/1280517051589722117?s=20\n\ndf <- df %>% \n  mutate(deaths = case_when(date == \"2020-07-07\" ~ NA_real_,\n                            date != \"2020-07-07\" ~ deaths))\n```\n:::\n\n\nThis calculates new cases, hospitalizations, and deaths.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  mutate(cases_new = cases - lag(cases),\n         hospitalizations_new = hospitalizations - lag(hospitalizations),\n         deaths_new = deaths - lag(deaths))\n```\n:::\n\n\nThere are instances where the number of cumulative hospitalizations or deaths *decreases*. \n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  mutate(hospitalizations_lag = lag(hospitalizations)) %>% \n  select(date, date, hospitalizations, hospitalizations_lag, hospitalizations_new) %>% \n  filter(hospitalizations_new < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  date       hospitalizations hospitalizations_lag hospitalizations_new\n  <date>                <dbl>                <dbl>                <dbl>\n1 2020-04-27              213                  214                   -1\n2 2020-05-01              235                  236                   -1\n3 2020-05-14              283                  285                   -2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  mutate(deaths_lag = lag(deaths)) %>% \n  select(date, date, deaths, deaths_lag, deaths_new) %>% \n  filter(deaths_new < 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  date       deaths deaths_lag deaths_new\n  <date>      <dbl>      <dbl>      <dbl>\n1 2020-04-23     69         74         -5\n2 2020-04-29     86         87         -1\n```\n:::\n:::\n\nIn these cases, I remove the values and do not replace them.\n\n::: {.cell}\n\n```{.r .cell-code}\n#when new cases/hospitalizations/deaths is negative, replace with NA\ndf <- df %>% \n  mutate(cases_new = case_when(cases_new < 0 ~ NA_real_,\n                               cases_new >= 0 ~ cases_new),\n         hospitalizations_new = case_when(hospitalizations_new < 0 ~ NA_real_,\n                                          hospitalizations_new >= 0 ~ hospitalizations_new),\n         deaths_new = case_when(deaths_new < 0 ~ NA_real_,\n                                deaths_new >= 0 ~ deaths_new))\n```\n:::\n\n\nThis calculates rolling 14-day averages for new cases/hospitalizations/deaths.\n\n::: {.cell}\n\n```{.r .cell-code}\n#calculate rolling 14 day averages for cases/hospitalizations/deaths\ndf <- df %>% \n  tq_mutate(\n    # tq_mutate args\n    select     = cases_new,\n    mutate_fun = rollapply, \n    # rollapply args\n    width      = 14,\n    align      = \"right\",\n    FUN        = mean,\n    # mean args\n    na.rm      = TRUE,\n    # tq_mutate args\n    col_rename = \"cases_new_rolling_14\"\n  ) %>% \n  tq_mutate(\n    # tq_mutate args\n    select     = hospitalizations_new,\n    mutate_fun = rollapply, \n    # rollapply args\n    width      = 14,\n    align      = \"right\",\n    FUN        = mean,\n    # mean args\n    na.rm      = TRUE,\n    # tq_mutate args\n    col_rename = \"hospitalizations_new_rolling_14\"\n  ) %>% \n  tq_mutate(\n    # tq_mutate args\n    select     = deaths_new,\n    mutate_fun = rollapply, \n    # rollapply args\n    width      = 14,\n    align      = \"right\",\n    FUN        = mean,\n    # mean args\n    na.rm      = TRUE,\n    # tq_mutate args\n    col_rename = \"deaths_new_rolling_14\"\n  ) %>% \n  select(state, county, date, contains(\"_new\"), contains(\"rolling\"))\n\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 126\nColumns: 9\n$ state                           <chr> \"Pennsylvania\", \"Pennsylvania\", \"Penns…\n$ county                          <chr> \"Allegheny County\", \"Allegheny County\"…\n$ date                            <date> 2020-03-04, 2020-03-05, 2020-03-06, 2…\n$ cases_new                       <dbl> NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2…\n$ hospitalizations_new            <dbl> NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ deaths_new                      <dbl> NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cases_new_rolling_14            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ hospitalizations_new_rolling_14 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ deaths_new_rolling_14           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n:::\n:::\n\nTo prepare the data for visualization in `ggplot2`, I pivot the rolling averages longer and move them into a separate table.\n\n::: {.cell}\n\n```{.r .cell-code}\n#pivot rolling average data longer\ndf_rolling <- df %>% \n  select(state, county, date, contains(\"rolling\")) %>% \n  pivot_longer(cols = contains(\"rolling\"), names_to = \"metric\") %>% \n  mutate(metric = case_when(str_detect(metric, \"cases\") ~ \"New cases\",\n                            str_detect(metric, \"deaths\") ~ \"New deaths\",\n                            str_detect(metric, \"hospitalizations\") ~ \"New hospitalizations\")) %>% \n  mutate(metric = factor(metric, levels = c(\"New cases\", \"New hospitalizations\", \"New deaths\")))\n\nglimpse(df_rolling)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 378\nColumns: 5\n$ state  <chr> \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\",…\n$ county <chr> \"Allegheny County\", \"Allegheny County\", \"Allegheny County\", \"Al…\n$ date   <date> 2020-03-04, 2020-03-04, 2020-03-04, 2020-03-05, 2020-03-05, 20…\n$ metric <fct> New cases, New hospitalizations, New deaths, New cases, New hos…\n$ value  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n```\n:::\n:::\n\nI do the same for the daily data.\n\n::: {.cell}\n\n```{.r .cell-code}\n#pivot daily data longer\ndf_new <- df %>% \n  select(state, county, date, !contains(\"rolling\")) %>% \n  pivot_longer(cols = contains(\"_new\"), names_to = \"metric\") %>% \n  mutate(metric = case_when(str_detect(metric, \"cases\") ~ \"New cases\",\n                            str_detect(metric, \"deaths\") ~ \"New deaths\",\n                            str_detect(metric, \"hospitalizations\") ~ \"New hospitalizations\")) %>% \n  mutate(metric = factor(metric, levels = c(\"New cases\", \"New hospitalizations\", \"New deaths\")))\n\nglimpse(df_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 378\nColumns: 5\n$ state  <chr> \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\", \"Pennsylvania\",…\n$ county <chr> \"Allegheny County\", \"Allegheny County\", \"Allegheny County\", \"Al…\n$ date   <date> 2020-03-04, 2020-03-04, 2020-03-04, 2020-03-05, 2020-03-05, 20…\n$ metric <fct> New cases, New hospitalizations, New deaths, New cases, New hos…\n$ value  <dbl> NA, NA, NA, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n```\n:::\n:::\n\nIn the daily data, I remove rows where the date is *before* the first non-zero value of that metric.\n\n::: {.cell}\n\n```{.r .cell-code}\n#identify first non-zero value in each metric.\n##filter out rows before first non-zero value\ndf_new <- df_new %>% \n  arrange(state, county, metric, date) %>% \n  group_by(state, county, metric) %>% \n  filter(row_number() != 1) %>% \n  mutate(first_non_zero_value = cumsum(coalesce(value, 0) > 0) >= 1) %>% \n  ungroup() %>% \n  filter(first_non_zero_value == TRUE)\n```\n:::\n\n\nThese graphs show the rolling and daily new data:\n\n::: {.cell}\n\n```{.r .cell-code}\n#preview rolling data\ndf_rolling %>% \n  ggplot(aes(date, value)) +\n  geom_line() +\n  facet_wrap(~metric, ncol = 1, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#preview daily data\ndf_new %>% \n  ggplot(aes(date, value)) +\n  geom_point() +\n  facet_wrap(~metric, ncol = 1, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\nThis finds the most recent date in the data, which I insert into the final graph.\n\n::: {.cell}\n\n```{.r .cell-code}\n#find most recent date\nlast_updated <- last(df_rolling$date)\n```\n:::\n\n\nThis creates the final graph. Since I pivoted the data longer, I can facet by `metric`, which lets me show cases/hospitalizations/deaths on separate y axes. I insert colored rectanges behind the data to show the stages of state intervention.\n\n::: {.cell}\n\n```{.r .cell-code}\n#make graph\nallegheny_county_timeline <- df_rolling %>% \n  filter(!is.na(value)) %>% \n  ggplot(aes(x = date, y = value)) +\n  #create colored rectangles showing various government intervention timelines\n  annotate(geom = \"rect\", xmin = ymd(\"2020-03-23\"), xmax = ymd(\"2020-05-15\"), ymin = as.Date(-Inf), ymax = as.Date(Inf), \n           fill = \"red\", alpha = .3) +\n  annotate(geom = \"rect\", xmin = ymd(\"2020-05-15\"), xmax = ymd(\"2020-06-05\"), ymin = as.Date(-Inf), ymax = as.Date(Inf), \n           fill = \"yellow\", alpha = .3) +\n  annotate(geom = \"rect\", xmin = ymd(\"2020-06-05\"), xmax = ymd(\"2020-06-28\"), ymin = as.Date(-Inf), ymax = as.Date(Inf), \n           fill = \"green\", alpha = .3) +\n  annotate(geom = \"rect\", xmin = ymd(\"2020-06-28\"), xmax = as.Date(Inf), ymin = as.Date(-Inf), ymax = as.Date(Inf),\n           fill = \"#aaff00\", alpha = .3) +\n  #plot daily data as points, rolling average as lines\n  geom_point(data = df_new, aes(y = value), alpha = .3)+\n  geom_line(size = 1.5) +\n  #facet by metric\n  facet_wrap(~metric, ncol = 1, scales = \"free_y\") +\n  labs(title = str_c(\"Allegheny County COVID-19 response timeline (last updated \", last_updated, \")\"),\n       x = NULL,\n       y = NULL,\n       subtitle = \"14-day rolling average\",\n       caption = \"@conor_tompkins, data from Allegheny County via Franklin Chen\")\n\nallegheny_county_timeline\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}