{
  "hash": "caf8114a274c4bac5503c9cb3f43fa54",
  "result": {
    "engine": "knitr",
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\n\ntitle: \"Graphing Seasonality in Ebird Bird Sightings\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, eBird]\ncategories: [R, eBird]\ndate: 2020-03-31\nlastmod: 2020-08-12T10:40:18-04:00\nfeatured: false\ndraft: false\nimage: featured.png\nexecute: \n  echo: true\n  warning: false\n  message: false\n---\n\n\n\nOver the winter I became interested in birding. Sitting in your back yard doing nothing but watching birds fly around is quite relaxing. Naturally I am looking for ways to optimize and quantify this relaxing activity. [eBird](https://ebird.org/home) lets you track your bird sightings and research which birds are common or more rare in your area. Luckily, the folks at [ROpenSci](https://ropensci.org/) have the `{rebird}` [package](https://cran.r-project.org/web/packages/rebird/index.html), which provides an easy interface to the eBird API.\n\nIn this post I will graph the seasonality of observation frequency of the top 10 birds in Pennsylvania. Frequency in this context is the % of eBird checklists that the bird appeared in during a given period.\n\nLoad up packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(vroom)\nlibrary(janitor)\nlibrary(rebird)\nlibrary(hrbrthemes)\nlibrary(ggrepel)\nlibrary(gganimate)\n\ntheme_set(theme_ipsum())\n\noptions(scipen = 99, digits = 2)\n```\n:::\n\n\n\nThe `ebirdfreq` takes a location and time period and returns the frequency and sample size for the birds returned in the query.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_freq_raw <- ebirdfreq(loctype = 'states', loc = 'US-PA', startyear = 2019,\n                         endyear = 2019, startmonth = 1, endmonth = 12)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_freq_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22,272 × 3\n   com_name                     month_qt   frequency\n   <chr>                        <chr>          <dbl>\n 1 Black-bellied Whistling-Duck January-1          0\n 2 Black-bellied Whistling-Duck January-2          0\n 3 Black-bellied Whistling-Duck January-3          0\n 4 Black-bellied Whistling-Duck January-4          0\n 5 Black-bellied Whistling-Duck February-1         0\n 6 Black-bellied Whistling-Duck February-2         0\n 7 Black-bellied Whistling-Duck February-3         0\n 8 Black-bellied Whistling-Duck February-4         0\n 9 Black-bellied Whistling-Duck March-1            0\n10 Black-bellied Whistling-Duck March-2            0\n# ℹ 22,262 more rows\n```\n\n\n:::\n:::\n\n\n\nThis does some light data munging to get the data in shape.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_freq_clean <- df_freq_raw %>% \n  separate(month_qt, into = c(\"month\", \"week\")) %>% \n  mutate(week = as.numeric(week),\n         month = ymd(str_c(\"2019\", month, \"01\", sep = \"-\")),\n         month = month(month, label = TRUE, abbr = TRUE),\n         state = \"PA\") %>% \n  rename(common_name = com_name) %>% \n  arrange(common_name, month, week)\n\ndf_freq_clean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22,272 × 5\n   common_name        month  week frequency state\n   <chr>              <ord> <dbl>     <dbl> <chr>\n 1 Acadian Flycatcher Jan       1         0 PA   \n 2 Acadian Flycatcher Jan       2         0 PA   \n 3 Acadian Flycatcher Jan       3         0 PA   \n 4 Acadian Flycatcher Jan       4         0 PA   \n 5 Acadian Flycatcher Feb       1         0 PA   \n 6 Acadian Flycatcher Feb       2         0 PA   \n 7 Acadian Flycatcher Feb       3         0 PA   \n 8 Acadian Flycatcher Feb       4         0 PA   \n 9 Acadian Flycatcher Mar       1         0 PA   \n10 Acadian Flycatcher Mar       2         0 PA   \n# ℹ 22,262 more rows\n```\n\n\n:::\n:::\n\n\n\nThis takes the month-week time series and summarizes to the month level:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_month <- df_freq_clean %>% \n  group_by(common_name, month) %>% \n  summarize(frequency_mean = mean(frequency) %>% round(2)) %>%\n  ungroup()\n\ndf_month\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,568 × 3\n   common_name        month frequency_mean\n   <chr>              <ord>          <dbl>\n 1 Acadian Flycatcher Jan             0   \n 2 Acadian Flycatcher Feb             0   \n 3 Acadian Flycatcher Mar             0   \n 4 Acadian Flycatcher Apr             0   \n 5 Acadian Flycatcher May             0.04\n 6 Acadian Flycatcher Jun             0.06\n 7 Acadian Flycatcher Jul             0.05\n 8 Acadian Flycatcher Aug             0.02\n 9 Acadian Flycatcher Sep             0   \n10 Acadian Flycatcher Oct             0   \n# ℹ 5,558 more rows\n```\n\n\n:::\n:::\n\n\n\nHere I find the top 10 birds in terms of average monthly observation frequency:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_top_birds <- df_freq_clean %>% \n  group_by(common_name) %>% \n  summarize(frequency_mean = mean(frequency) %>% round(2)) %>% \n  ungroup() %>% \n  arrange(desc(frequency_mean)) %>% \n  select(common_name) %>% \n  slice(1:10)\n\ndf_top_birds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 1\n   common_name           \n   <chr>                 \n 1 Northern Cardinal     \n 2 Blue Jay              \n 3 Mourning Dove         \n 4 American Robin        \n 5 Song Sparrow          \n 6 American Crow         \n 7 Red-bellied Woodpecker\n 8 American Goldfinch    \n 9 Carolina Wren         \n10 Downy Woodpecker      \n```\n\n\n:::\n:::\n\n\n\nThis basic line graph shows some of the pattern of seasonality, but fails to show the cyclical nature of the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_month %>% \n  semi_join(df_top_birds) %>% \n  ggplot(aes(month, frequency_mean, group = common_name)) +\n    geom_line() +\n    scale_y_percent() +\n    labs(title = \"Bird observation frequency\",\n         subtitle = \"Top 10 birds in PA, 2019\",\n         x = NULL,\n         y = \"Mean frequency\",\n         caption = \"Data from ebird.org. @conorotompkins\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nI use `coord_polar` to change the coordinate system to match the cyclical flow of the months:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_month %>% \n  semi_join(df_top_birds) %>% \n  ggplot(aes(month, frequency_mean, group = common_name)) +\n    geom_polygon(color = \"black\", fill = NA, size = .5) +\n    coord_polar() +\n    scale_y_percent() +\n    labs(title = \"Bird observation frequency\",\n         subtitle = \"Top 10 birds in PA, 2019\",\n         x = NULL,\n         y = \"Mean frequency\",\n         caption = \"Data from ebird.org. @conorotompkins\")\n```\n:::\n\n\n\n![](polar_graph_1.png)\n\n`gganimate` lets me focus on one species at a time while showing all the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_animated <- df_month %>% \n  semi_join(df_top_birds) %>% \n  mutate(common_name = fct_inorder(common_name)) %>% \n  ggplot(aes(month, frequency_mean)) +\n  geom_polygon(data = df_month %>% rename(name = common_name),\n               aes(group = name),\n               color = \"grey\", fill = NA, size = .5) +\n  geom_polygon(aes(group = common_name),\n               color = \"blue\", fill = NA, size = 1.2) +\n  coord_polar() +\n  #facet_wrap(~common_name) +\n  scale_y_percent() +\n   labs(subtitle = \"Most frequently observed birds in PA (2019)\",\n        x = NULL,\n        y = \"Frequency of observation\",\n        caption = \"Data from ebird.org. @conorotompkins\") +\n  theme(plot.margin = margin(2, 2, 2, 2),\n        plot.title = element_text(color = \"blue\"))\n\nplot_animated +\n  transition_manual(common_name) +\n  ggtitle(\"{current_frame}\")\n```\n:::\n\n\n\n![](polar_graph_2.gif)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}