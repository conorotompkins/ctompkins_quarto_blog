{
  "hash": "d0dc19934aa396cbcb1a2734a7652d03",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'C&S Presentation: Time Series Forecasting'\nauthor: Conor Tompkins\ndate: '2024-11-11'\nslug: c-s-presentation-time-series-forecasting\ncategories: []\ntags: []\nsubtitle: ''\nsummary: ''\nauthors: []\nlastmod: '2024-11-11T09:45:01-05:00'\nfeatured: no\nimage: featured.png\nexecute: \n  echo: true\n  warning: false\n  message: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n**This material was presented at [Code & Supply](https://www.codeandsupply.co/) on 2024-11-07**\n\n# Time Series Forecasting in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fpp3)\nlibrary(readr)\nlibrary(janitor)\nlibrary(future)\nlibrary(hrbrthemes)\nlibrary(forcats)\nlibrary(broom)\nlibrary(ggrepel)\n\ncustom_theme <- theme_bw() + \n  theme(axis.text = element_text(size = 14),\n        axis.title = element_text(size = 18))\n\ntheme_set(custom_theme)\n\nplan(multisession)\n\noptions(scipen = 999, digits = 4)\n\nset.seed(1234)\n```\n:::\n\n\n\n## What is time series forecasting?\n\nTime series forecasting is the practice of making predictions about the future value of some quantitative variable.\n\nPredictive accuracy is typically the focus, not inference for understanding underlying causes.\n\n## What is a time series?\n\nData collected about a quantitative variable sequentially over time.\n\n-   Customer demand for a company's product\n\n-   Electricity usage\n\n-   Stock price\n\n-   Network latency\n\n-   Pothole reports\n\n## What is a time series\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibbledata::vic_elec |> \n  as_tibble() |> \n  mutate(day = date(Time)) |> \n  group_by(day) |> \n  summarize(max_demand = max(Demand)) |> \n  as_tsibble(index = day) |> \n  autoplot() +\n  labs(title = \"Peak daily electricity demand in Victoria, Australia\",\n       y = \"Peak demand (MWh)\",\n       x = \"Date\") +\n  scale_y_continuous(labels = scales::comma_format())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## What can be forecasted?\n\nKey questions:\n\n1.  Do we understand the underlying process that creates the time series (data generating process)?\n\n2.  Is historical data is available?\n\n3.  Will the future be similar to the past?\n\n4.  Will the forecast affect the thing we are trying to forecast?\n\n    -   Feedback loop\n\n## What can be forecasted?\n\nFeedback loops AKA \"efficient market hypothesis\"\n\n> \"How much will it rain tomorrow\"\n\nvs.\n\n> \"How much rain will fall on you tomorrow\"\n\n## Why forecast?\n\n-   Knowing more about the future means we can make better decisions today.\n\n  -   Typically related to resource allocation.\n\n## Forecast horizons\n\n-   Short term\n\n    -   What will the peak demand for electricity be in the next hour?\n\n-   Medium term\n\n    -   What will customer demand for flowers be next Valentine's Day?\n\n-   Long term\n\n    -   What will future demand for a company's products be given changing population trends across geography?\n\n## How?\n\n#### Typical regression model\n\nPothole reports as a function of explanatory variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npothole_reports ~ year + month + weather + public_works_budget + error\n```\n:::\n\n\n\n#### Time series model\n\nFuture value of pothole complaints as a function of the previous values of pothole complaints (plus explanatory variables)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npothole_reports(t+1) ~ pothole_reports(t) + pothole_reports(t-1) + ... + error\n```\n:::\n\n\n\n## Why use time series models?\n\nTime series models can typically handle autocorrelation in the data.\n\n- `pothole_reports(t)` and `pothole_reports(t-1)` are correlated\n\n- This can cause correlated error in regression models\n\n## Forecasting Process\n\n1.  Exploratory data analysis\n\n2.  Model selection\n\n3.  Forecast\n\n4.  Evaluate forecast accuracy\n\n## Code walkthrough\n\n311 data from [Western Pennsylvania Regional Data Center](https://data.wprdc.org/dataset/311-data)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in pothole data\n#https://data.wprdc.org/datastore/dump/29462525-62a6-45bf-9b5e-ad2e1c06348d\nreport_data <- read_csv(\"post_data/wprdc_311_2024_10_20.csv\") |> \n  clean_names() |>\n  mutate(create_date = yearmonth(create_date_et)) |> \n  rename(request_type = request_type_name)\n```\n:::\n\n\n\n## Data structure\n\nTime series table data structure:\n\n-   Key: `request_type`\n\n-   Index: `create_date`\n\n-   Measured variable: `report_count`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create basic tsibble\npothole_df <- report_data |> \n  filter(request_type == \"Potholes\") |> \n  summarize(report_count = n(),\n            .by = c(create_date, request_type)) |> \n  ungroup() |>\n  filter(year(create_date) >= 2016) |> \n  as_tsibble(key = request_type, index = create_date)\n\npothole_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 106 x 3 [1M]\n# Key:       request_type [1]\n   create_date request_type report_count\n         <mth> <chr>               <int>\n 1    2016 Jan Potholes              208\n 2    2016 Feb Potholes              574\n 3    2016 Mar Potholes              936\n 4    2016 Apr Potholes              732\n 5    2016 May Potholes              789\n 6    2016 Jun Potholes              723\n 7    2016 Jul Potholes              554\n 8    2016 Aug Potholes              516\n 9    2016 Sep Potholes              357\n10    2016 Oct Potholes              313\n# â„¹ 96 more rows\n```\n\n\n:::\n:::\n\n\n\n## Exploratory data analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(pothole_df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Exploratory data analysis\n\nSeasonal plot shows each year across months\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_season(pothole_df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Exploratory data analysis\n\nSeasonal subseries plot shows each month across years\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_subseries(pothole_df) +\n  facet_wrap(vars(month(create_date, label = TRUE)), ncol = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Exploratory data analysis \n\nTime series decomposition\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndcmp <- pothole_df |>\n  model(stl = STL(report_count, robust = TRUE))\n\ndcmp_components <- components(dcmp)\n\nautoplot(dcmp_components)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Exploratory data analysis\n\nOutliers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutliers <- dcmp_components |>\n  filter(remainder < quantile(remainder, 0.25) - 3*IQR(remainder) |\n           remainder > quantile(remainder, 0.75) + 3*IQR(remainder))\n\npothole_df |>\n  ggplot(aes(create_date, report_count)) +\n  geom_line() +\n  geom_point(data = outliers, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Train/test split\n\nYou always want to validate a model's performance with data it hasn't seen already. This analysis uses the last 20% of observations as test data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_test <- pothole_df |> \n  slice_tail(prop = .2)\n\ndata_train <- pothole_df |> \n  anti_join(data_test, by = \"create_date\")\n```\n:::\n\n\n\n## Model types\n\n-   NAIVE: play the last value forward over the forecast horizon\n\n-   SNAIVE: play the last seasonal value forward\n\n-   MEAN: take the average of the entire series and play it forward\n\n    -   Use `window()` to apply a window for rolling averages\n\n## Model types \n\n-   TSLM\\*: fit a linear model along the `trend()`\n\n    -   Use `seasonal()` to add dummy variables for seasonal effects\n\n-   ETS: **e**xponen**t**ial **s**moothing\n\n    -   Use a weighted average based on the recency of the observations\n\n-   ARIMA\\*: **A**uto**r**egressive **I**ntegrated **M**oving **A**verage\n\n    -   `fable::ARIMA` automatically determines optimal model parameters (PDQ, seasonal PDQ)\n\n        -   AKA \"autoarima\"\n\n        -   You can also manually set these\n        \n- More available in `{fable}`\n\n\\* These models can use exogenous variables to capture additional information\n\n#### Notes\n\nARIMA:\n\n- P: number of autoregressive terms\n\n- D: number of differences required to make it stationary\n\n- Q: number of lagged forecast errors\n\n## Fit models\n\nFit models on training data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_df <- data_train |> \n  model(naive = NAIVE(log(report_count + 1)),\n        naive_seasonal = SNAIVE(log(report_count + 1)),\n        mean = MEAN(log(report_count + 1)),\n        mean_moving_6 = MEAN(log(report_count + 1), window = 6),\n        lm = TSLM(log(report_count + 1) ~ trend()),\n        lm_seasonal = TSLM(log(report_count + 1) ~ trend() + season()),\n        arima = ARIMA(log(report_count + 1)),\n        ets = ETS(log(report_count + 1)))\n```\n:::\n\n\n\nTransformations of target variable are automatically reversed in `fable::forecast`\n\n## Fit models\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(model_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 9\nKey: request_type [1]\n$ request_type   <chr> \"Potholes\"\n$ naive          <model> [NAIVE]\n$ naive_seasonal <model> [SNAIVE]\n$ mean           <model> [MEAN]\n$ mean_moving_6  <model> [MEAN]\n$ lm             <model> [TSLM]\n$ lm_seasonal    <model> [TSLM]\n$ arima          <model> [ARIMA(1,0,2)(2,1,0)[12]]\n$ ets            <model> [ETS(M,N,A)]\n```\n\n\n:::\n:::\n\n\n## Model summary\n\nInspect model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_df |> \n  select(arima) |> \n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: report_count \nModel: ARIMA(1,0,2)(2,1,0)[12] \nTransformation: log(report_count + 1) \n\nCoefficients:\n         ar1      ma1      ma2     sar1     sar2\n      0.9608  -0.3667  -0.2622  -0.6048  -0.7281\ns.e.  0.0360   0.1566   0.1544   0.0931   0.0953\n\nsigma^2 estimated as 0.1867:  log likelihood=-49.7\nAIC=111.4   AICc=112.7   BIC=125.1\n```\n\n\n:::\n:::\n\n\n\n## Evaluate fit on training data\n\nPlot forecast vs. training data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_df |> \n  select(ets) |> \n  augment() |> \n  ggplot(aes(x = create_date)) +\n  geom_line(aes(y = report_count, color = \"observed\"), lwd = 1) +\n  geom_line(aes(y = .fitted, color = \"prediction\"), lwd = 1) +\n  scale_color_manual(values = c(\"observed\" = \"black\", \"prediction\" = \"orange\")) +\n  labs(title = \"ETS model\",\n       color = NULL) +\n  theme(legend.text = element_text(size = 16))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## Forecast on test data\n\nMake forecast from fit models onto test data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npothole_fc <- forecast(model_df, data_test)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npothole_fc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A fable: 168 x 5 [1M]\n# Key:     request_type, .model [8]\n   request_type .model create_date    report_count .mean\n   <chr>        <chr>        <mth>          <dist> <dbl>\n 1 Potholes     naive     2023 Feb t(N(6.1, 0.39))  521.\n 2 Potholes     naive     2023 Mar t(N(6.1, 0.77))  606.\n 3 Potholes     naive     2023 Apr  t(N(6.1, 1.2))  690.\n 4 Potholes     naive     2023 May  t(N(6.1, 1.5))  774.\n 5 Potholes     naive     2023 Jun  t(N(6.1, 1.9))  859.\n 6 Potholes     naive     2023 Jul  t(N(6.1, 2.3))  943.\n 7 Potholes     naive     2023 Aug  t(N(6.1, 2.7)) 1027.\n 8 Potholes     naive     2023 Sep  t(N(6.1, 3.1)) 1112.\n 9 Potholes     naive     2023 Oct  t(N(6.1, 3.5)) 1196.\n10 Potholes     naive     2023 Nov  t(N(6.1, 3.9)) 1280.\n# â„¹ 158 more rows\n```\n\n\n:::\n:::\n\n\n\n## Accuracy \n\nAccuracy metrics\n\n-   Root Mean Squared Error (RMSE)\n\n    -   On average, how far off the forecast is from the actual observed value\n\n-   Continuous Ranked Probability Score (CRPS)\n\n    -   Measures how well the forecast distribution fits the test data\n\n    -   \"skill\" measures CRPS compared to a naive benchmark model\n\n-   Others available in `{fabletools}`\n\n## Forecast accuracy\n\nEvaluate forecast accuracy based on full time series\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_acc <- pothole_fc |> \n  accuracy(pothole_df,\n           measures = list(point_accuracy_measures, \n                           distribution_accuracy_measures, \n                           skill_crps = skill_score(CRPS))) |> \n  rename(rmse = RMSE) |> \n  select(request_type, .model, .type, skill_crps, rmse) |> \n  arrange(desc(skill_crps))\n```\n:::\n\n\n\n## Forecast accuracy\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_acc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 5\n  request_type .model         .type skill_crps  rmse\n  <chr>        <chr>          <chr>      <dbl> <dbl>\n1 Potholes     lm_seasonal    Test       0.689  162.\n2 Potholes     arima          Test       0.635  206.\n3 Potholes     lm             Test       0.596  175.\n4 Potholes     ets            Test       0.305  377.\n5 Potholes     mean           Test       0.253  384.\n6 Potholes     mean_moving_6  Test       0.253  384.\n7 Potholes     naive_seasonal Test       0.129  595.\n8 Potholes     naive          Test      -1.01  1231.\n```\n\n\n:::\n:::\n\n\n\n## Plot forecast\n\nPlot forecast vs. test data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_acc <- fc_acc |> \n  pull(.model)\n\npothole_fc <- pothole_fc |> \n  mutate(.model = factor(.model, levels = model_acc))\n\npothole_fc |> \n  mutate(.model = factor(.model, levels = model_acc)) |> \n  filter(.model %in% model_acc[1:3]) |> \n  autoplot(data = pothole_df |> filter(year(create_date) >= 2021)) +\n  facet_wrap(vars(.model), ncol = 1) +\n  guides(fill_ramp = \"none\",\n         fill = \"none\",\n         color = \"none\") +\n  labs(title = \"Forecasts of top 3 models\",\n       subtitle = \"Sorted descending by accuracy\") +\n  theme(strip.text = element_text(size = 14))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n## Refit and forecast\n\nRefit top model on entire time series and make a true 12 month forecast\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nfinal_model <- pothole_df |> \n  model(lm_seasonal = TSLM(log(report_count + 1) ~ trend() + season()))\n\nfinal_model |> \n  forecast(h = 12) |> \n  autoplot(pothole_df |> filter(year(create_date) >= 2021)) +\n  labs(title = \"Final 12 month forecast of pothole reports\",\n       x = \"Report create date\",\n       y = \"Report count\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n`fable::forecast` automatically builds out a new dataframe of the specified horizon with the `trend()` and `season()` variables\n\n## References\n\nMaterial adapted from [Forecasting: Principles and Practice (3rd ed)](https://otexts.com/fpp3/) by Rob J Hyndman and George Athanasopoulos\n\n## Questions?\n\n## Appendix\n\n## Autocorrelation\n\nValues of `report_count` are correlated across time\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nACF(pothole_df) |> \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n## Autocorrelation\n\nPartial autocorrelation measures correlation between gapped lags of `report_count`, accounting for the relationship between the intermediate lags\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPACF(pothole_df) |> \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n## Cross-validation\n\nCreate multiple train/test sets with rolling origins\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npothole_cv <- stretch_tsibble(pothole_df, .step = 6, .init = 24)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npothole_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 882 x 4 [1M]\n# Key:       .id, request_type [14]\n   create_date request_type report_count   .id\n         <mth> <chr>               <int> <int>\n 1    2016 Jan Potholes              208     1\n 2    2016 Feb Potholes              574     1\n 3    2016 Mar Potholes              936     1\n 4    2016 Apr Potholes              732     1\n 5    2016 May Potholes              789     1\n 6    2016 Jun Potholes              723     1\n 7    2016 Jul Potholes              554     1\n 8    2016 Aug Potholes              516     1\n 9    2016 Sep Potholes              357     1\n10    2016 Oct Potholes              313     1\n# â„¹ 872 more rows\n```\n\n\n:::\n:::\n\n\n\n## Cross-validation\n\n[![Forecasting: Principles and Practice](https://otexts.com/fpp3/fpp_files/figure-html/cv1-1.png)](https://otexts.com/fpp3/tscv.html)\n\n## Time series features\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport_df <- report_data |> \n  summarize(report_count = n(),\n            .by = c(create_date, request_type)) |> \n  ungroup() |>\n  filter(year(create_date) >= 2016) |> \n  as_tsibble(key = request_type, index = create_date)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_request_type <- report_df |> \n  as_tibble() |> \n  summarize(report_count = sum(report_count),\n            .by = c(request_type)) |> \n  slice_max(n = 12, order_by = report_count)\n\nreport_df_top12 <- report_df |> \n  semi_join(top_request_type, by = \"request_type\")\n\nreport_df_top12 |> \n  mutate(request_type = fct_reorder(request_type, report_count, sum, .desc = TRUE)) |> \n  autoplot() +\n  facet_wrap(vars(request_type), scales = \"free_y\") +\n  guides(color = \"none\") +\n  theme(axis.text.x = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n## Time series features\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport_features <- report_df_top12 |> \n  features(report_count, feature_set(pkgs = \"feasts\"))\n\nreport_features |> \n  slice_head(n = 1) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 49\n$ request_type           <chr> \"Abandoned Vehicle (parked on street)\"\n$ trend_strength         <dbl> 0.3949\n$ seasonal_strength_year <dbl> 0.3865\n$ seasonal_peak_year     <dbl> 8\n$ seasonal_trough_year   <dbl> 0\n$ spikiness              <dbl> 2158\n$ linearity              <dbl> 160.7\n$ curvature              <dbl> -42.04\n$ stl_e_acf1             <dbl> 0.1834\n$ stl_e_acf10            <dbl> 0.1054\n$ acf1                   <dbl> 0.5248\n$ acf10                  <dbl> 0.4291\n$ diff1_acf1             <dbl> -0.2125\n$ diff1_acf10            <dbl> 0.07291\n$ diff2_acf1             <dbl> -0.5601\n$ diff2_acf10            <dbl> 0.3479\n$ season_acf1            <dbl> 0.0387\n$ pacf5                  <dbl> 0.2901\n$ diff1_pacf5            <dbl> 0.1979\n$ diff2_pacf5            <dbl> 0.6507\n$ season_pacf            <dbl> -0.1747\n$ zero_run_mean          <dbl> 0\n$ nonzero_squared_cv     <dbl> 0.06562\n$ zero_start_prop        <dbl> 0\n$ zero_end_prop          <dbl> 0\n$ lambda_guerrero        <dbl> -0.8999\n$ kpss_stat              <dbl> 0.4661\n$ kpss_pvalue            <dbl> 0.04931\n$ pp_stat                <dbl> -5.633\n$ pp_pvalue              <dbl> 0.01\n$ ndiffs                 <int> 1\n$ nsdiffs                <int> 0\n$ bp_stat                <dbl> 29.19\n$ bp_pvalue              <dbl> 0.00000006553\n$ lb_stat                <dbl> 30.03\n$ lb_pvalue              <dbl> 0.00000004261\n$ var_tiled_var          <dbl> 1.133\n$ var_tiled_mean         <dbl> 0.2935\n$ shift_level_max        <dbl> 109.2\n$ shift_level_index      <dbl> 63\n$ shift_var_max          <dbl> 11807\n$ shift_var_index        <dbl> 70\n$ shift_kl_max           <dbl> 6.258\n$ shift_kl_index         <dbl> 69\n$ spectral_entropy       <dbl> 0.927\n$ n_crossing_points      <int> 40\n$ longest_flat_spot      <int> 5\n$ coef_hurst             <dbl> 0.9206\n$ stat_arch_lm           <dbl> 0.1287\n```\n\n\n:::\n:::\n\n\n\n## Time series features\n\nPrincipal Component Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcs <- report_features |>\n  select(-request_type, -contains(\"zero\")) |>\n  prcomp(scale = TRUE) |>\n  augment(report_features)\n\npcs |>\n  ggplot(aes(x = .fittedPC1, y = .fittedPC2, col = request_type)) +\n  geom_point() +\n  geom_label_repel(aes(label = request_type)) +\n  scale_x_continuous(expand = expansion(mult = c(.2, .2))) +\n  scale_y_continuous(expand = expansion(mult = c(.2, .2))) +\n  theme(aspect.ratio = 1) +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}