{
  "hash": "3a76d807325cfff217b687cd008eabeb",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\ntitle: \"Map Census Data With R\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, Potholes, Census]\ncategories: [R, Potholes, Census]\ndate: 2019-05-28\nlastmod: 2020-08-28T17:22:20-04:00\nfeatured: false\ndraft: false\nimage: featured.png\nprojects: []\nexecute:\n  warning: false\n  message: false\neditor_options: \n  chunk_output_type: console\n---\n\n\nThis talk was presented on May 30th, 2019 at [Code For Pittsburgh](https://www.meetup.com/codeforpgh/).\n\nBefore we dive in, this presentation assumes that the user has basic familiarity with `tidyverse`, mainly `dplyr`. Knowing how to use `%>%` will be very helpful.\n\nHow to install packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"package_name\")\n```\n:::\n\n\nGet your census API key: https://api.census.gov/data/key_signup.html\n\nConfigure environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidycensus)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tigris)\nlibrary(ggmap)\nlibrary(janitor)\n\ntheme_set(theme_bw())\n\noptions(tigris_use_cache = TRUE,\n        scipen = 4,\n        digits = 3)\n```\n:::\n\n\n\n\n## Packages\n\n### {tidycensus}\n\n[`tidycensus`](https://walkerke.github.io/tidycensus/) gives access to the Census API and makes it easy to plot data on a map.\n\nData\n\n-   Demographics\n    -   Decennial Census\n    -   American Community Survey (ACS)\n    -   error estimates\n-   Geometries\n    -   country\n    -   county\n    -   zip code\n    -   blocks\n    -   tracts\n    -   and more\n\n### {sf}\n\n[simple features](https://r-spatial.github.io/sf/articles/sf1.html) makes it easy to work with polygon data in R. It uses the familiar `tidyverse` framework: everything is a tibble, and it uses `%>%`.\n\n`ggplot2::geom_sf()` makes it easy to plot `sf` polygons.\n\n`sf` can also do spatial calculations such as `st_contains`, `st_intersects`, and `st_boundary`.\n\n### {ggmap}\n\nUses [Google Maps API](https://cloud.google.com/maps-platform/) to get basemaps. The API now requires a credit card, but it has a fairly generous \"free\" tier.\n\n## Using {tidycensus}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus_api_key(\"your_key_here\")\n```\n:::\n\n\nThis loads the variables from the Decennial Census in 2010:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables_dec <- load_variables(year = 2010, dataset = \"sf1\", cache = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,959 × 3\n   name    label                                concept         \n   <chr>   <chr>                                <chr>           \n 1 H001001 Total                                HOUSING UNITS   \n 2 H002001 Total                                URBAN AND RURAL \n 3 H002002 Total!!Urban                         URBAN AND RURAL \n 4 H002003 Total!!Urban!!Inside urbanized areas URBAN AND RURAL \n 5 H002004 Total!!Urban!!Inside urban clusters  URBAN AND RURAL \n 6 H002005 Total!!Rural                         URBAN AND RURAL \n 7 H002006 Total!!Not defined for this file     URBAN AND RURAL \n 8 H003001 Total                                OCCUPANCY STATUS\n 9 H003002 Total!!Occupied                      OCCUPANCY STATUS\n10 H003003 Total!!Vacant                        OCCUPANCY STATUS\n# ℹ 8,949 more rows\n```\n:::\n:::\n\n\nThis loads the ACS variables for 2017:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables_acs <- load_variables(year = 2017, dataset = \"acs5\", cache = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25,071 × 4\n   name        label                                  concept          geography\n   <chr>       <chr>                                  <chr>            <chr>    \n 1 B00001_001  Estimate!!Total                        UNWEIGHTED SAMP… block gr…\n 2 B00002_001  Estimate!!Total                        UNWEIGHTED SAMP… block gr…\n 3 B01001A_001 Estimate!!Total                        SEX BY AGE (WHI… tract    \n 4 B01001A_002 Estimate!!Total!!Male                  SEX BY AGE (WHI… tract    \n 5 B01001A_003 Estimate!!Total!!Male!!Under 5 years   SEX BY AGE (WHI… tract    \n 6 B01001A_004 Estimate!!Total!!Male!!5 to 9 years    SEX BY AGE (WHI… tract    \n 7 B01001A_005 Estimate!!Total!!Male!!10 to 14 years  SEX BY AGE (WHI… tract    \n 8 B01001A_006 Estimate!!Total!!Male!!15 to 17 years  SEX BY AGE (WHI… tract    \n 9 B01001A_007 Estimate!!Total!!Male!!18 and 19 years SEX BY AGE (WHI… tract    \n10 B01001A_008 Estimate!!Total!!Male!!20 to 24 years  SEX BY AGE (WHI… tract    \n# ℹ 25,061 more rows\n```\n:::\n:::\n\n\n### Map total population in the U.S.\n\nUse `View()` to browse the variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables_dec %>% \n  filter(str_detect(concept, \"POPULATION\")) %>% \n  View()\n```\n:::\n\n\n`P001001` has the data we are looking for.\n\nQuery the total population of the continental U.S. states:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates <- get_decennial(geography = \"state\",\n                        variables = c(total_pop = \"P001001\"),\n                        geometry = TRUE,\n                        output = \"wide\",\n                        year = 2010)\n```\n:::\n\n\nThe `states` tibble contains the census data and the polygons for the geometries.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 52 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179 ymin: 17.9 xmax: 180 ymax: 71.4\nGeodetic CRS:  NAD83\n# A tibble: 52 × 4\n   GEOID NAME           total_pop                                       geometry\n   <chr> <chr>              <dbl>                             <MULTIPOLYGON [°]>\n 1 23    Maine            1328361 (((-67.6 44.5, -67.6 44.5, -67.6 44.5, -67.6 …\n 2 25    Massachusetts    6547629 (((-70.8 41.6, -70.8 41.6, -70.8 41.6, -70.8 …\n 3 26    Michigan         9883640 (((-88.7 48.1, -88.7 48.1, -88.7 48.1, -88.7 …\n 4 30    Montana           989415 (((-104 45, -104 45, -104 45, -104 45, -105 4…\n 5 32    Nevada           2700551 (((-114 37, -114 37, -114 36.8, -114 36.7, -1…\n 6 34    New Jersey       8791894 (((-75.5 39.7, -75.5 39.7, -75.5 39.7, -75.5 …\n 7 36    New York        19378102 (((-71.9 41.3, -71.9 41.3, -71.9 41.3, -71.9 …\n 8 37    North Carolina   9535483 (((-82.6 36, -82.6 36, -82.6 36, -82.6 36, -8…\n 9 39    Ohio            11536504 (((-82.8 41.7, -82.8 41.7, -82.8 41.7, -82.8 …\n10 42    Pennsylvania    12702379 (((-75.4 39.8, -75.4 39.8, -75.5 39.8, -75.5 …\n# ℹ 42 more rows\n```\n:::\n:::\n\n\nMake a bar graph with the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates %>% \n  mutate(NAME = fct_reorder(NAME, total_pop)) %>% \n  ggplot(aes(NAME, total_pop)) +\n    geom_col() +\n    coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nPlot the same data on a map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstates %>% \n  filter(NAME != \"Alaska\",\n         NAME != \"Hawaii\",\n         !str_detect(NAME, \"Puerto\")) %>% \n  ggplot(aes(fill = total_pop)) +\n    geom_sf() +\n    scale_fill_viridis_c(\"Total Population\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nPull the total population of each county in PA and plot it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npennsylvania <- get_decennial(geography = \"county\",\n                              variables = c(total_pop = \"P001001\"),\n                              state = \"PA\",\n                              geometry = TRUE,\n                              output = \"wide\",\n                              year = 2010)\npennsylvania %>% \n  ggplot(aes(fill = total_pop)) +\n    geom_sf() +\n    scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n`ggplot2` intelligently handles cases when we don't have data for a certain polygon:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npennsylvania %>% \n  mutate(total_pop = case_when(NAME == \"Allegheny County, Pennsylvania\" ~ NA_real_,\n                               NAME != \"Allegheny County, Pennsylvania\" ~ total_pop)) %>% \n  ggplot(aes(fill = total_pop)) +\n    geom_sf() +\n    scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nWe can stack multiple polygons in the same graph to highlight Allegheny County:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny <- pennsylvania %>% \n  filter(str_detect(NAME, \"Allegheny\"))\n\npennsylvania %>% \n  ggplot() +\n    geom_sf(aes(fill = total_pop)) +\n    geom_sf(data = allegheny, color = \"white\", linetype = 2, size = 1, alpha = 0) +\n    scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nWe can also use `tidycensus` to download demographic data for census tracts.\n\nSet the variables we want to use first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nracevars <- c(White = \"P005003\", \n              Black = \"P005004\", \n              Asian = \"P005006\", \n              Hispanic = \"P004003\")\n#note that this data is long, not wide\nallegheny_tracts <- get_decennial(geography = \"tract\", \n                                  variables = racevars, \n                                  state = \"PA\", \n                                  county = \"Allegheny County\", \n                                  geometry = TRUE,\n                                  summary_var = \"P001001\",\n                                  year = 2010) \n```\n:::\n\n\nCalculate as a percentage of tract population:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny_tracts <- allegheny_tracts %>% \n  mutate(pct = 100 * value / summary_value)\n```\n:::\n\n\nFacet by `variable` and map the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny_tracts %>% \n  ggplot(aes(fill = pct)) +\n    geom_sf(color = NA) +\n    facet_wrap(~variable) +\n    scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nWe can overlay the boundaries of Pittsburgh over the same graph.\n\nDownload the [boundary shapefile](https://catalog.data.gov/dataset/pittsburgh-city-boundary-cbe8f) and use `sf::st_read` to read it into R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_pgh <- st_read(\"post_data/Pittsburgh_City_Boundary-shp/City_Boundary.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `City_Boundary' from data source \n  `/Users/conorotompkins/Documents/github_repos/ctompkins_quarto_blog/posts/map-census-data-with-r/post_data/Pittsburgh_City_Boundary-shp/City_Boundary.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 8 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 1320000 ymin: 382000 xmax: 1380000 ymax: 433000\nProjected CRS: NAD83 / Pennsylvania South (ftUS)\n```\n:::\n\n```{.r .cell-code}\nallegheny_tracts %>% \n  ggplot() +\n    geom_sf(aes(fill = pct), color = NA) +\n    geom_sf(data = city_pgh, color = \"white\", linetype = 2, size = 1, alpha = 0) +\n    facet_wrap(~variable) + \n    scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### Working with other data\n\n#### WPRDC 311 data and city wards\n\nWe can also download the shapefile for the [City of Pittsburgh wards](https://catalog.data.gov/dataset/pittsburgh-wards). The [311 dataset](https://data.wprdc.org/dataset/311-data/resource/76fda9d0-69be-4dd5-8108-0de7907fc5a4) is tagged with the ward the request originated from, so we can use that to aggregate and map the total number of 311 requests per ward.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_311 <- read_csv(\"https://data.wprdc.org/datastore/dump/76fda9d0-69be-4dd5-8108-0de7907fc5a4\") %>% \n  clean_names()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> request_id </th>\n   <th style=\"text-align:left;\"> created_on </th>\n   <th style=\"text-align:left;\"> request_type </th>\n   <th style=\"text-align:left;\"> request_origin </th>\n   <th style=\"text-align:right;\"> status </th>\n   <th style=\"text-align:left;\"> department </th>\n   <th style=\"text-align:left;\"> neighborhood </th>\n   <th style=\"text-align:right;\"> council_district </th>\n   <th style=\"text-align:right;\"> ward </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 203364 </td>\n   <td style=\"text-align:left;\"> 2017-12-15 14:53:00 </td>\n   <td style=\"text-align:left;\"> Street Obstruction/Closure </td>\n   <td style=\"text-align:left;\"> Call Center </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> DOMI - Permits </td>\n   <td style=\"text-align:left;\"> Central Northside </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 200800 </td>\n   <td style=\"text-align:left;\"> 2017-11-29 09:54:00 </td>\n   <td style=\"text-align:left;\"> Graffiti </td>\n   <td style=\"text-align:left;\"> Control Panel </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> Police - Zones 1-6 </td>\n   <td style=\"text-align:left;\"> South Side Flats </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 201310 </td>\n   <td style=\"text-align:left;\"> 2017-12-01 13:23:00 </td>\n   <td style=\"text-align:left;\"> Litter </td>\n   <td style=\"text-align:left;\"> Call Center </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> DPW - Street Maintenance </td>\n   <td style=\"text-align:left;\"> Troy Hill </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 24 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 200171 </td>\n   <td style=\"text-align:left;\"> 2017-11-22 14:54:00 </td>\n   <td style=\"text-align:left;\"> Water Main Break </td>\n   <td style=\"text-align:left;\"> Call Center </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> Pittsburgh Water and Sewer Authority </td>\n   <td style=\"text-align:left;\"> Banksville </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 193043 </td>\n   <td style=\"text-align:left;\"> 2017-10-12 12:46:00 </td>\n   <td style=\"text-align:left;\"> Guide Rail </td>\n   <td style=\"text-align:left;\"> Call Center </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> DPW - Construction Division </td>\n   <td style=\"text-align:left;\"> East Hills </td>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 196521 </td>\n   <td style=\"text-align:left;\"> 2017-10-31 15:17:00 </td>\n   <td style=\"text-align:left;\"> Guide Rail </td>\n   <td style=\"text-align:left;\"> Call Center </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> DPW - Construction Division </td>\n   <td style=\"text-align:left;\"> East Hills </td>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 193206 </td>\n   <td style=\"text-align:left;\"> 2017-10-13 09:18:00 </td>\n   <td style=\"text-align:left;\"> Sidewalk/Curb/HC Ramp Maintenance </td>\n   <td style=\"text-align:left;\"> Call Center </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> DOMI - Permits </td>\n   <td style=\"text-align:left;\"> Mount Washington </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 19 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 195917 </td>\n   <td style=\"text-align:left;\"> 2017-10-27 10:23:00 </td>\n   <td style=\"text-align:left;\"> Manhole Cover </td>\n   <td style=\"text-align:left;\"> Call Center </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> DOMI - Permits </td>\n   <td style=\"text-align:left;\"> Bluff </td>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 179176 </td>\n   <td style=\"text-align:left;\"> 2017-08-14 14:00:00 </td>\n   <td style=\"text-align:left;\"> Neighborhood Issues </td>\n   <td style=\"text-align:left;\"> Control Panel </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> NA </td>\n   <td style=\"text-align:left;\"> Middle Hill </td>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 190422 </td>\n   <td style=\"text-align:left;\"> 2017-09-29 11:46:00 </td>\n   <td style=\"text-align:left;\"> Mayor's Office </td>\n   <td style=\"text-align:left;\"> Website </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> 311 </td>\n   <td style=\"text-align:left;\"> North Oakland </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 32 features and 1 field\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 1320000 ymin: 382000 xmax: 1380000 ymax: 433000\nProjected CRS: NAD83 / Pennsylvania South (ftUS)\n# A tibble: 32 × 2\n    ward                                                                geometry\n   <int>                                              <POLYGON [US_survey_foot]>\n 1     1 ((1344377 410658, 1344401 410655, 1344473 410650, 1344497 410648, 1344…\n 2     2 ((1349657 415566, 1349615 415539, 1349572 415508, 1349487 415433, 1349…\n 3     3 ((1348490 410322, 1348432 410326, 1348333 410334, 1348260 410339, 1348…\n 4     4 ((1357003 413341, 1357009 413322, 1357024 413281, 1357058 413173, 1357…\n 5     5 ((1354794 418150, 1354861 418062, 1354918 417978, 1354931 417956, 1355…\n 6     6 ((1354713 418633, 1354629 418544, 1354609 418522, 1354575 418487, 1354…\n 7     7 ((1364905 417408, 1364974 417343, 1365180 417147, 1365249 417082, 1365…\n 8     8 ((1357423 420022, 1357491 420008, 1357693 419965, 1357760 419952, 1357…\n 9     9 ((1357423 420022, 1357369 420033, 1357314 420045, 1357208 420069, 1357…\n10    10 ((1365337 428177, 1365357 428160, 1365370 428141, 1365383 428126, 1365…\n# ℹ 22 more rows\n```\n:::\n:::\n\n\nPlot the ward polygons:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwards %>% \n  ggplot() +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nCalculate the center of each ward. We will use this to label the wards on the map:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nward_labels <- wards %>% \n  st_centroid() %>% \n  st_coordinates() %>%\n  as_tibble() %>%\n  clean_names() %>%\n  mutate(ward = wards$ward)\n\nward_labels_transformed <- wards %>% \n  st_transform(4326) |> \n  st_centroid() %>% \n  st_coordinates() %>%\n  as_tibble() %>%\n  clean_names() %>%\n  mutate(ward = wards$ward)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> x </th>\n   <th style=\"text-align:right;\"> y </th>\n   <th style=\"text-align:right;\"> ward </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1343990 </td>\n   <td style=\"text-align:right;\"> 410154 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1345190 </td>\n   <td style=\"text-align:right;\"> 413807 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1346380 </td>\n   <td style=\"text-align:right;\"> 411764 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1353781 </td>\n   <td style=\"text-align:right;\"> 410344 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1351582 </td>\n   <td style=\"text-align:right;\"> 414257 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nCount the number of requests per ward:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_311_count <- df_311 %>% \n  count(ward, sort = TRUE)\n```\n:::\n\n\nUse `left_join` to join the count data with the coordinates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nward_311 <- wards %>% \n  left_join(df_311_count) %>%\n  mutate(ward_label = ward_labels$ward)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 32 features and 3 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 1320000 ymin: 382000 xmax: 1380000 ymax: 433000\nProjected CRS: NAD83 / Pennsylvania South (ftUS)\n# A tibble: 32 × 4\n    ward                                               geometry     n ward_label\n * <dbl>                             <POLYGON [US_survey_foot]> <int>      <int>\n 1     1 ((1344377 410658, 1344401 410655, 1344473 410650, 134…  3821          1\n 2     2 ((1349657 415566, 1349615 415539, 1349572 415508, 134…  7188          2\n 3     3 ((1348490 410322, 1348432 410326, 1348333 410334, 134…  2327          3\n 4     4 ((1357003 413341, 1357009 413322, 1357024 413281, 135… 12187          4\n 5     5 ((1354794 418150, 1354861 418062, 1354918 417978, 135…  8514          5\n 6     6 ((1354713 418633, 1354629 418544, 1354609 418522, 135…  6672          6\n 7     7 ((1364905 417408, 1364974 417343, 1365180 417147, 136…  6896          7\n 8     8 ((1357423 420022, 1357491 420008, 1357693 419965, 135…  9128          8\n 9     9 ((1357423 420022, 1357369 420033, 1357314 420045, 135…  8321          9\n10    10 ((1365337 428177, 1365357 428160, 1365370 428141, 136… 14032         10\n# ℹ 22 more rows\n```\n:::\n:::\n\n\nPlot the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nward_311 %>% \n  ggplot() +\n    geom_sf(aes(fill = n), color = NA) +\n    geom_label(data = ward_labels, aes(x, y, label = ward), size = 3, inherit.aes = FALSE) +\n    scale_fill_viridis_c(\"Number of 311 requests\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n#### WPRDC overdose data\n\nWe can use the census data to adjust other data for per capita rates. For example, the WPRDC's [overdose data](https://data.wprdc.org/dataset/allegheny-county-fatal-accidental-overdoses) has the zip code that the overdose occurred in.\n\nFirst, download the overdose dataset and pull the population data for each zip code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_overdose <- read_csv(\"https://data.wprdc.org/datastore/dump/1c59b26a-1684-4bfb-92f7-205b947530cf\") %>% \n  clean_names() %>% \n  mutate(incident_zip = str_sub(incident_zip, 1, 5))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall_zips <- get_acs(geography = \"zip code tabulation area\",\n                    variables = c(total_pop = \"B01003_001\"),\n                    geometry = TRUE,\n                    output = \"wide\",\n                    year = 2018)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_overdose <- read_csv(\"post_data/1c59b26a-1684-4bfb-92f7-205b947530cf.csv\") %>% \n  clean_names() %>% \n  mutate(incident_zip = str_sub(incident_zip, 1, 5)) |> \n  filter(death_date_and_time <= \"2019-06-01\")\n```\n:::\n\n\n\nThen, aggregate the overdose data to the zip code and join the datasets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_overdose <- df_overdose %>% \n  count(incident_zip, sort = TRUE)\n\nattempt1 <- all_zips %>%\n  semi_join(df_overdose, by = c(\"GEOID\" = \"incident_zip\")) %>% \n  left_join(df_overdose, by = c(\"GEOID\" = \"incident_zip\"))\n\nattempt1 %>% \n  ggplot() +\n    geom_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nUnfortunately the data is kind of messy and includes zip codes that aren't in Allegheny County.\n\nWe can use `st_intersection` to exclude all of the zip code polygons that do not fall within the `allegheny` county tibble we made earlier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny %>% \n  ggplot() +\n    geom_sf()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nThen, join the aggregated overdose data with `left_join`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_allegheny_overdose <- st_intersection(allegheny, all_zips) %>% \n  left_join(df_overdose, by = c(\"GEOID.1\" = \"incident_zip\"))\n```\n:::\n\n\nNow we can calculate the per 1,000 overdose rate and plot the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_allegheny_overdose %>% \n  filter(total_popE >= 400) %>% \n  mutate(overdoses_per_capita = n / total_popE * 1000) %>% \n  ggplot(aes(fill = overdoses_per_capita)) +\n    geom_sf(color = NA) +\n    scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n### {ggmap} basemaps\n\nWe can use `ggmap` to request a basemap from the Google Maps API. Get your API key [here](https://cloud.google.com/maps-platform/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_google(key = \"Your key here\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npgh_map <- get_map(location = c(lat = 40.445315, lon = -79.977104), zoom = 12)\n\nggmap(pgh_map)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nThere are multiple basemap styles available:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_map(location = c(lat = 40.445315, lon = -79.977104), zoom = 12, maptype = \"satellite\", source = \"google\") %>% \n  ggmap()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_map(location = c(lat = 40.445315, lon = -79.977104), zoom = 12, maptype = \"roadmap\", source = \"google\") %>% \n  ggmap()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\nCombining maps from different systems requires us to use the same map projection. Google uses `4326`. Use `coord_sf` to set the projection:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nward_labels_sf <- ward_labels\n\nggmap(pgh_map) +\n  geom_sf(data = ward_311, aes(fill = n), inherit.aes = FALSE, color = NA, alpha = .7) +\n  geom_label(data = ward_labels_transformed, aes(x, y, label = ward), size = 3) +\n  coord_sf(crs = st_crs(4326)) +\n  scale_fill_viridis_c(\"Number of 311 requests\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n## Links\n\n-   https://walkerke.github.io/tidycensus/articles/basic-usage.html\n-   https://walkerke.github.io/tidycensus/reference/get_acs.html\n-   https://walkerke.github.io/tidycensus/articles/spatial-data.html\n-   https://walkerke.github.io/tidycensus/articles/other-datasets.html\n-   https://cengel.github.io/R-spatial/mapping.html\n-   https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html\n-   https://www.r-spatial.org/r/2018/10/25/ggplot2-sf-2.html\n-   https://www.r-spatial.org/r/2018/10/25/ggplot2-sf-3.html\n-   google maps API key: https://cloud.google.com/maps-platform/\n-   https://lucidmanager.org/geocoding-with-ggmap/\n-   https://github.com/rstudio/cheatsheets/blob/master/sf.pdf\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}