{
  "hash": "b31e8784b3f53094d8eaa6f773d8cf35",
  "result": {
    "engine": "knitr",
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\n\ntitle: \"Clustering Allegheny County Census Tracts With PCA and k-means\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, Census, Allegheny County]\ncategories: [R, Census, Allegheny County]\ndate: 2018-09-08\nlastmod: 2020-09-26\nfeatured: false\ndraft: false\nexecute:\n  echo: true\n  warning: false\n  message: false\n---\n\n\nIn this post I will use the census API discussed in [the last post](https://ctompkins.netlify.com/2018/08/06/exploring-allegheny-county-with-census-data/) to cluster the Allegheny County census tracts using PCA and k-means.\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(tigris)\nlibrary(sf)\nlibrary(broom)\nlibrary(ggfortify)\nlibrary(viridis)\nlibrary(janitor)\nlibrary(scales)\nlibrary(ggthemes)\n\noptions(tigris_use_cache = TRUE)\n\ntheme_set(theme_minimal())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus_vars <- load_variables(2010, \"sf1\", cache = TRUE)\n```\n:::\n\n\n\nCensus tracts are small geographic areas analogous to local neighborhoods. This is a map of all the tracts in Allegheny County, for reference:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## Download data\nThis code downloads data about the ethnicities resident in the tracts and calculates them as a % of the tract population.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvars_demo <- c(white = \"P005003\", \n          black = \"P005004\", \n          asian = \"P005006\", \n          hispanic = \"P004003\")\n#age vars men and women\n#P0120003:P0120049\n\nget_decennial(geography = \"tract\", \n              variables = vars_demo,\n              state = \"PA\", \n              county = \"Allegheny\", \n              year = 2010,\n              geometry = FALSE,\n              summary_var = \"P001001\") %>% \n  arrange(GEOID) %>% \n  mutate(value = value / summary_value) %>% \n  select(-summary_value) %>% \n  spread(variable, value) %>% \n  rename_at(vars(\"white\", \"black\", \"asian\", \"hispanic\"), funs(str_c(\"pct_\", .))) -> allegheny_demographics\n\nallegheny_demographics <- replace(allegheny_demographics, is.na(allegheny_demographics), 0)\n```\n:::\n\n\n\nThis code downloads information about the housing stock in each tract, specifically what %  of housing units are owned outright, owned with a loan, or rented.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvars_housing <- c(units_owned_loan = \"H011002\",\n          units_owned_entire = \"H011003\",\n          units_rented = \"H011004\")\n\nget_decennial(geography = \"tract\", \n              variables = vars_housing,\n              state = \"PA\", \n              county = \"Allegheny\", \n              year = 2010,\n              geometry = FALSE,\n              summary_var = \"H011001\") %>% \n  arrange(GEOID) %>% \n  mutate(value = value / summary_value) %>% \n  select(-summary_value) %>% \n  spread(variable, value) %>% \n  rename_at(vars(\"units_owned_entire\", \"units_owned_loan\", \"units_rented\"), funs(str_c(\"pct_\", .))) -> allegheny_housing\n\nallegheny_housing <- replace(allegheny_housing, is.na(allegheny_housing), 0)\n```\n:::\n\n\n\nThis code requests the total population of each tract.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#originally I used age-sex variables, but they were not useful\nvars_age_total <- census_vars %>% \n  filter(name == \"P012001\")\n\nget_decennial(geography = \"tract\", \n              variables = vars_age_total$name,\n              state = \"PA\", \n              county = \"Allegheny\", \n              year = 2010,\n              geometry = FALSE,\n              summary_var = \"P012001\") %>% \n  rename(var_id = variable) %>% \n  mutate(value = value / summary_value) %>% \n  spread(var_id, value) -> allegheny_age_sex\n\ncolnames(allegheny_age_sex) <- c(\"GEOID\", \"NAME\", \"summary_value\", vars_age_total$label)\n\nallegheny_age_sex %>% \n  clean_names() %>% \n  rename(GEOID = geoid,\n         NAME = name,\n         total_population = summary_value) -> allegheny_age_sex\n\nallegheny_age_sex <- replace(allegheny_age_sex, is.na(allegheny_age_sex), 0)\n\nallegheny_age_sex %>% \n  select(GEOID, NAME, total_population) -> allegheny_age_sex\n```\n:::\n\n\n\nThis code requests the geometry of each tract that I will use to map them later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_decennial(geography = \"tract\", \n              variables = vars_housing,\n              state = \"PA\", \n              county = \"Allegheny\",\n              year = 2010,\n              geometry = TRUE) %>% \n  select(-c(variable, value)) %>% \n  distinct(GEOID) -> allegheny_geo\n```\n:::\n\n\n\nThis joins the 4 dataframes together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny_geo %>% \n  left_join(allegheny_housing) %>% \n  left_join(allegheny_demographics) %>% \n  left_join(allegheny_age_sex) %>% \n  mutate(id = str_c(GEOID, NAME, sep = \" | \")) -> allegheny \n```\n:::\n\n\n## Exploratory graph\nThis graph compares the percent of white residents to the remaining variables in the data. pct_white is on the x axis of each of the smaller charts. Note that each chart's Y axis has its own scale. It is already obvious that pct_white and pct_black are negatively correlated with each other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny %>%\n  #st_set_geometry(NULL) %>% \n  st_drop_geometry() %>%\n  select(contains(\"pct\")) %>% \n  gather(variable, value, -pct_white) %>% \n  ggplot(aes(pct_white, value)) +\n  geom_point(alpha = .5) +\n  geom_smooth() +\n  facet_wrap(~variable, scales = \"free\", nrow = 3, strip.position=\"left\") +\n  scale_x_continuous(label = percent) +\n  scale_y_continuous(label = percent) +\n  labs(x = NULL) +\n  theme_bw() +\n  theme(strip.placement = \"outside\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThis code plots the total population against the other variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny %>%\n  st_drop_geometry() %>%\n  select(contains(\"pct\"), total_population) %>% \n  gather(variable, value, -total_population) %>% \n  ggplot(aes(total_population, value)) +\n  geom_point(alpha = .5) +\n  geom_smooth() +\n  facet_wrap(~variable, scales = \"free\", nrow = 3, strip.position=\"left\") +\n  scale_x_continuous(label = comma) +\n  scale_y_continuous(label = percent) +\n  theme_bw() +\n  theme(strip.placement = \"outside\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Prepare for PCA\nThis code prepares the data for PCA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny %>%\n  select(-c(id, GEOID, NAME)) %>% \n  st_drop_geometry() %>% \n  remove_rownames() -> allegheny_pca\n\nallegheny_pca %>% \n  prcomp(scale = TRUE) -> pc\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npc %>% \n  tidy(\"pcs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n     PC std.dev percent cumulative\n  <dbl>   <dbl>   <dbl>      <dbl>\n1     1  1.94   0.471        0.471\n2     2  1.28   0.205        0.676\n3     3  0.913  0.104        0.780\n4     4  0.789  0.0778       0.858\n5     5  0.769  0.0739       0.932\n6     6  0.658  0.0540       0.986\n7     7  0.323  0.0130       0.999\n8     8  0.0961 0.00115      1    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npc %>% \n  augment(data = allegheny_pca) %>% \n  as_tibble() %>% \n  mutate(GEOID = allegheny %>% pull(GEOID)) %>% \n  select(.rownames, GEOID, everything()) -> df_au\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_au %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 18\n  .rownames GEOID   pct_units_owned_entire pct_units_owned_loan pct_units_rented\n  <chr>     <chr>                    <dbl>                <dbl>            <dbl>\n1 1         420034…                  0.213                0.750           0.0366\n2 2         420034…                  0.181                0.629           0.190 \n3 3         420034…                  0.245                0.685           0.0692\n4 4         420034…                  0.336                0.501           0.164 \n5 5         420034…                  0.147                0.418           0.435 \n6 6         420034…                  0.168                0.432           0.400 \n# ℹ 13 more variables: pct_asian <dbl>, pct_black <dbl>, pct_hispanic <dbl>,\n#   pct_white <dbl>, total_population <dbl>, .fittedPC1 <dbl>,\n#   .fittedPC2 <dbl>, .fittedPC3 <dbl>, .fittedPC4 <dbl>, .fittedPC5 <dbl>,\n#   .fittedPC6 <dbl>, .fittedPC7 <dbl>, .fittedPC8 <dbl>\n```\n\n\n:::\n:::\n\n\n\nThis shows how the PCs explain the variance in the data. As explained earlier, the first few PCs explain most of the variance in the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npc %>% \n  tidy(\"pcs\") %>%\n  select(-std.dev) %>% \n  gather(measure, value, -PC) %>% \n  mutate(measure = case_when(measure == \"percent\" ~ \"Percent\",\n                             measure == \"cumulative\" ~ \"Cumulative\")) %>% \n    ggplot(aes(PC, value)) +\n    geom_line() +\n    geom_point() +\n    facet_wrap(~measure) +\n    labs(title = \"Variance explained by each principal component\",\n         x = \"Principal Component\",\n         y = NULL) +\n    scale_x_continuous(breaks = 1:8) +\n    scale_y_continuous(label = percent) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nThis shows how the PCA function rearranged the data to maximize the variance in the first few PCs. PC1 is largely defined by the percent of a tract that is white or black, the percent of housing units that are owned, and the total population of the tract. The \"pct_white\" and \"pct_black\" arrows point in opposite directions, which reflects Pittsburgh's [status](http://suds-cmu.org/2017/02/21/the-legacies-of-redlining-in-pittsburgh/) as a [segregated](http://www.duqsm.com/segregation-still-a-problem-in-pittsburgh/) [city](https://triblive.com/news/allegheny/9807345-74/schools-students-pittsburgh).\n\nPC2 explains less of the variance, and is influenced by the percent of a tract that is hispanic, asian, or black.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny %>% \n  select(-c(id, GEOID)) %>% \n  st_drop_geometry() %>%\n  nest() %>% \n  mutate(pca = map(data, ~ prcomp(.x %>% select(-NAME), \n                                  center = TRUE, scale = TRUE)),\n         pca_aug = map2(pca, data, ~augment(.x, data = .y))) -> allegheny_pca2\n\nallegheny_pca2 %>% \nmutate(\n    pca_graph = map2(\n      .x = pca,\n      .y = data,\n      ~ autoplot(.x, loadings = TRUE, loadings.label = TRUE,\n                 loadings.label.repel = TRUE,\n                 data = .y) +\n        theme_bw() +\n        labs(x = \"Principal Component 1\",\n             y = \"Principal Component 2\",\n             title = \"First two principal components of PCA on Allegheny County Census data\")\n    )\n  ) %>%\n  pull(pca_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nThis code maps the first two PCs to the tracts. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_au %>% \n  select(-.rownames) %>% \n  gather(variable, value, -c(GEOID)) -> df_au_long\n\nallegheny_geo %>% \n  left_join(df_au) %>% \n  gather(pc, pc_value, contains(\".fitted\")) %>% \n  mutate(pc = str_replace(pc, \".fitted\", \"\")) -> allegheny_pca_map\n\nleft_join(allegheny_map, allegheny_pca_map) %>% \n  filter(pc %in% c(\"PC1\", \"PC2\")) %>% \n  ggplot(aes(fill = pc_value, color = pc_value)) + \n  geom_sf() + \n  facet_wrap(~pc) +\n  coord_sf(crs = 26911) + \n  scale_fill_viridis(\"Principal component value\", option = \"magma\") + \n  scale_color_viridis(\"Principal component value\", option = \"magma\") +\n  labs(title = \"Allegheny County\",\n       subtitle = \"American Community Survey\") +\n  theme(axis.text = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Clustering with k-means\nNext I will use k-means to cluster the PC data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_au_long %>% \n  filter(str_detect(variable, \"PC\")) %>% \n  spread(variable, value) -> allegheny_kmeans\n```\n:::\n\n\n\nThis code clusters the data using 1 to 9 clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkclusts <- tibble(k = 1:9) %>%\n  mutate(\n    kclust = map(k, ~kmeans(allegheny_kmeans, .x)),\n    tidied = map(kclust, tidy),\n    glanced = map(kclust, glance),\n    augmented = map(kclust, augment, allegheny_kmeans)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclusters <- kclusts %>%\n  unnest(tidied)\n\nassignments <- kclusts %>% \n  unnest(augmented)\n\nclusterings <- kclusts %>%\n  unnest(glanced, .drop = TRUE)\n```\n:::\n\n\n\nBased on this \"elbow chart\", the optimum number of clusters is most likely 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(clusterings, aes(k, tot.withinss)) +\n  geom_line() +\n  geom_point() +\n  geom_vline(xintercept = 2, linetype = 2) +\n  scale_x_continuous(breaks = 1:9) +\n  labs(x = \"Number of clusters\",\n       y = \"Between-cluster sum of squares\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\nWe can visualize how the data would look if it were assigned to a different number of clusters. Clearly the clustering algorithm experiences diminishing returns after 2 or 3 clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(assignments, aes(.fittedPC1, .fittedPC2)) +\n  geom_point(aes(color = .cluster), alpha = .7) + \n  facet_wrap(~ str_c(k, \" cluster(s)\")) +\n  scale_color_discrete(\"Cluster\") +\n  labs(x = \"PC1\",\n       y = \"PC2\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\nThis code divides the data into 2 clusters and maps the clusters onto the tract map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_au_long %>% \n  filter(str_detect(variable, \"PC\")) %>% \n  spread(variable, value) -> allegheny_kmeans\n\nkclust <- kmeans(allegheny_kmeans, centers = 2)\n\nkclust %>% \n  augment(df_au_long %>% \n            filter(str_detect(variable, \".fitted\")) %>% \n            spread(variable, value)) -> allegheny_kmeans\n\nget_decennial(geography = \"tract\", \n              variables = vars_housing,\n              state = \"PA\", \n              county = \"Allegheny\", \n              year = 2010,                           geometry = TRUE) %>% \n  select(-c(variable, value)) %>% \n  distinct(GEOID) -> allegheny_geo\n\nallegheny_geo %>% \n  left_join(allegheny_kmeans) -> allegheny\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(allegheny_map, allegheny) %>% \n  ggplot(aes(fill = .cluster, color = .cluster)) +\n  geom_sf(color = \"grey\", size = .1) +\n  scale_fill_viridis(\"Cluster\", discrete = TRUE, direction = -1) + \n  scale_color_viridis(\"Cluster\", discrete = TRUE, direction = -1) +\n  theme(axis.text = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\nThe second cluster largely follows the city limits, but excludes areas such as Mount Washington, Squirrel Hill, and Shadyside. It also includes a few areas outside of the city like Duquesne and McKeesport.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}