{
  "hash": "1cc116c94434036fe67b713222bece9b",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\ntitle: \"Residential Zoning in Pittsburgh\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, Pittsburgh]\ncategories: [R, Pittsburgh]\ndate: 2019-06-22\nlastmod: 2020-08-28T09:36:42-04:00\nfeatured: false\ndraft: false\nimage: featured.png\nprojects: []\nexecute:\n  warning: false\n  message: false\neditor_options: \n  chunk_output_type: console\n---\n\n\nThe [New York Times recently published an article](https://www.nytimes.com/interactive/2019/06/18/upshot/cities-across-america-question-single-family-zoning.html) about zoning in U.S. cities, particularly single-unit detached residential housing. The article did not include Pittsburgh, so I downloaded the [zone shapefile from the WPRDC](https://data.wprdc.org/dataset/zoning1) and made my own map.\n\nThis blog quickly goes through the steps to make the map and other graphs about the data.\n\nFirst, load the required libraries and set up the environment:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggmap)\nlibrary(janitor)\nlibrary(hrbrthemes)\n\noptions(scipen = 999)\n```\n:::\n\n\nRead in the shapefile with `st_read` and inspect the data with `glimpse`:\n\n::: {.cell}\n\n```{.r .cell-code}\nshapefile <- st_read(\"post_data/Zoning-shp/Zoning.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Zoning' from data source \n  `/Users/conorotompkins/Documents/github_repos/ctompkins_quarto_blog/posts/residential-zoning-in-pittsburgh/post_data/Zoning-shp/Zoning.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1061 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 1315934 ymin: 381925.6 xmax: 1379759 ymax: 433399.4\nProjected CRS: NAD83 / Pennsylvania South (ftUS)\n```\n:::\n\n```{.r .cell-code}\nglimpse(shapefile)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,061\nColumns: 20\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ perimeter  <dbl> 4020.2318, 3522.5948, 2748.8339, 715.3339, 4499.1899, 2498.…\n$ zoning_    <int> 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19,…\n$ zoning_id  <int> 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19,…\n$ zon_new    <chr> \"P\", \"P\", \"LNC\", \"LNC\", \"P\", \"HC\", \"LNC\", \"R1D-M\", \"R1D-M\",…\n$ shape_leng <dbl> 4020.2318, 3522.5948, 2748.8339, 715.3339, 4499.1899, 2498.…\n$ correction <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ full_zonin <chr> \"PARKS AND OPEN SPACE\", \"PARKS AND OPEN SPACE\", \"LOCAL NEIG…\n$ legendtype <chr> \"Parks\", \"Parks\", \"Local Neighborhood Commercial\", \"Local N…\n$ municode   <chr> \"http://library.municode.com/HTML/13525/level4/PIZOCO_TITNI…\n$ status     <chr> \"Approved\", \"Approved\", \"Approved\", \"Approved\", \"Approved\",…\n$ created_us <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ created_da <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ last_edite <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ last_edi_1 <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ pghdb_sde_ <dbl> 404170.093, 332097.787, 192093.378, 22816.707, 962349.849, …\n$ GlobalID   <chr> \"b54df7d1-57d2-4175-8a34-5334046e889b\", \"1ea53324-e92d-4394…\n$ Shape__Are <dbl> 404170.093, 332097.787, 192093.378, 22816.707, 962349.849, …\n$ Shape__Len <dbl> 4020.2318, 3522.5948, 2748.8339, 715.3339, 4499.1899, 2498.…\n$ geometry   <MULTIPOLYGON [US_survey_foot]> MULTIPOLYGON (((1367528 381..., M…\n```\n:::\n:::\n\n\nWe need to munge the data to get it in shape for analysis. This makes some simple TRUE|FALSE flags for basic zone information and uses `case_when` to create `type`, which represents aggregated zone types.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- shapefile %>% \n  mutate(residential = str_detect(full_zonin, \"RESIDENT\"),\n         single_unit = str_detect(full_zonin, \"SINGLE-UNIT\"),\n         attached = str_detect(full_zonin, \"ATTACHED\"),\n         type = case_when(residential == TRUE & single_unit == TRUE & attached == FALSE ~ \"Single-unit detached residential\",\n                          residential == TRUE & single_unit == FALSE | attached == TRUE ~ \"Other residential\",\n                          full_zonin == \"EDUCATIONAL/MEDICAL INSTITUTION\" ~ \"Educational/Medical\",\n                          residential == FALSE ~ \"Other non-residential\"),\n         type = factor(type, levels = c(\"Single-unit detached residential\", \n                                        \"Other residential\",\n                                        \"Educational/Medical\",\n                                        \"Other non-residential\")),\n         alpha_flag = type == \"Single-unit detached residential\") |> \n  rename(area = Shape__Are)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,061\nColumns: 24\n$ OBJECTID    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ perimeter   <dbl> 4020.2318, 3522.5948, 2748.8339, 715.3339, 4499.1899, 2498…\n$ zoning_     <int> 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19…\n$ zoning_id   <int> 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19…\n$ zon_new     <chr> \"P\", \"P\", \"LNC\", \"LNC\", \"P\", \"HC\", \"LNC\", \"R1D-M\", \"R1D-M\"…\n$ shape_leng  <dbl> 4020.2318, 3522.5948, 2748.8339, 715.3339, 4499.1899, 2498…\n$ correction  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ full_zonin  <chr> \"PARKS AND OPEN SPACE\", \"PARKS AND OPEN SPACE\", \"LOCAL NEI…\n$ legendtype  <chr> \"Parks\", \"Parks\", \"Local Neighborhood Commercial\", \"Local …\n$ municode    <chr> \"http://library.municode.com/HTML/13525/level4/PIZOCO_TITN…\n$ status      <chr> \"Approved\", \"Approved\", \"Approved\", \"Approved\", \"Approved\"…\n$ created_us  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ created_da  <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ last_edite  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ last_edi_1  <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ pghdb_sde_  <dbl> 404170.093, 332097.787, 192093.378, 22816.707, 962349.849,…\n$ GlobalID    <chr> \"b54df7d1-57d2-4175-8a34-5334046e889b\", \"1ea53324-e92d-439…\n$ area        <dbl> 404170.093, 332097.787, 192093.378, 22816.707, 962349.849,…\n$ Shape__Len  <dbl> 4020.2318, 3522.5948, 2748.8339, 715.3339, 4499.1899, 2498…\n$ residential <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRU…\n$ single_unit <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRU…\n$ attached    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA…\n$ type        <fct> Other non-residential, Other non-residential, Other non-re…\n$ alpha_flag  <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRU…\n```\n:::\n:::\n\n\nThis counts the number of rows per full zone description (`full_zonin`) and `type`:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_zones <- df %>% \n  count(full_zonin, type, sort = TRUE) %>% \n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 59\nColumns: 3\n$ full_zonin <chr> \"PARKS AND OPEN SPACE\", \"LOCAL NEIGHBORHOOD COMMERCIAL\", \"S…\n$ type       <fct> Other non-residential, Other non-residential, Single-unit d…\n$ n          <int> 153, 125, 75, 70, 65, 54, 52, 44, 42, 42, 41, 38, 36, 19, 1…\n```\n:::\n:::\n\n\nCreate a basic bar chart to show the distribution of `type`:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  st_drop_geometry() %>% \n  group_by(type, residential) %>% \n  summarize(area = sum(area)) %>% \n  ungroup() %>% \n  mutate(type = fct_reorder(type, area)) %>% \n  ggplot(aes(type, area / 1000000, fill = residential)) +\n    geom_col() +\n    scale_y_comma() +\n    scale_fill_discrete(\"Is the zone residential?\") +\n    labs(x = \"Zone type\",\n         y = \"Land area in millions of feet\") +\n    coord_flip() +\n    theme_ipsum()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=864}\n:::\n:::\n\n\nUse a bar chart to show the distribution of `full_zonin`:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  st_drop_geometry() %>% \n  group_by(full_zonin, residential) %>% \n  summarize(area = sum(area)) %>% \n  ungroup() %>% \n  mutate(full_zonin = fct_reorder(full_zonin, area)) %>% \n  ggplot(aes(full_zonin, area / 1000000, fill = residential)) +\n    geom_col() +\n    scale_y_comma() +\n    scale_fill_discrete(\"Is the zone residential?\") +\n    labs(x = \"Full zone description\",\n         y = \"Land area in millions of feet\") +\n    coord_flip() +\n    theme_ipsum()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=1152}\n:::\n:::\n\n\nThis calculates the total land area zoned for any type of residential housing:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  st_drop_geometry() %>% \n  mutate(single_unit_flag = type == \"Single-unit detached residential\") %>% \n  filter(residential == TRUE) %>% \n  summarize(total_area = sum(area))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  total_area\n1  751652465\n```\n:::\n:::\n\n\nThis calculates the % of residential zoning that is zoned for single-unit detached residential housing units:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  st_drop_geometry() %>% \n  filter(residential == TRUE) %>% \n  mutate(single_unit_flag = (type == \"Single-unit detached residential\")) %>% \n  group_by(single_unit_flag) %>% \n  summarize(zone_area = sum(area)) %>% \n  mutate(pct_area = zone_area / sum(zone_area))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  single_unit_flag  zone_area pct_area\n  <lgl>                 <dbl>    <dbl>\n1 FALSE            332150155.    0.442\n2 TRUE             419502310.    0.558\n```\n:::\n:::\n\n\nThis creates a map of the zones, fills them by `type`, and overlays it on a GoogleMaps basemap. I also insert the boundaries of the City of Pittsburgh.\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_boundary <- st_read(\"post_data/Pittsburgh_City_Boundary-shp/City_Boundary.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `City_Boundary' from data source \n  `/Users/conorotompkins/Documents/github_repos/ctompkins_quarto_blog/posts/residential-zoning-in-pittsburgh/post_data/Pittsburgh_City_Boundary-shp/City_Boundary.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 8 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 1315934 ymin: 381925.6 xmax: 1379780 ymax: 433399.4\nProjected CRS: NAD83 / Pennsylvania South (ftUS)\n```\n:::\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = df %>% filter(type != \"Other non-residential\"), aes(fill = type), inherit.aes = FALSE, size = .5, alpha = 1, color = NA) +\n  geom_sf(data = city_boundary, inherit.aes = FALSE, alpha = 0, size = 2) +\n  coord_sf(crs = st_crs(4326)) +\n  scale_fill_manual(\"Zone type\",\n                      values = c(\"#ea60b9\", \"#4cafc5\", \"yellow\", \"light grey\")) +\n  labs(title = \"56% of residential zoned land area is single-family detached residential\",\n         subtitle = \"City of Pittsburgh zoning\",\n         caption = \"@conor_tompkins, data from WPRDC\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=1152}\n:::\n:::\n\n\nI used `scale_fill_manual` to manually set the color palette to match the NYTimes article.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}