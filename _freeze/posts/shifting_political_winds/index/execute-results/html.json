{
  "hash": "e569032e6bfaedea462761fc2a48341c",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\n\ntitle: \"Shifting political winds\"\nsubtitle: \"Or, drawing arrows on maps\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, Politics]\ncategories: [R, Politics]\ndate: 2020-11-13T15:18:35-05:00\nlastmod: 2020-11-13T15:18:35-05:00\nfeatured: false\ndraft: false\nimage: featured.png\n---\n\nThe purpose of this post is to recreate the \"Shift from 2016\" arrow map that the New York Times used to show which counties became more Democratic or Republican-leaning from 2016 to 2020. This is a screenshot of the [NYTimes figure](https://www.nytimes.com/interactive/2020/11/03/us/elections/results-president.html?name=styln-transition&region=TOP_BANNER&block=storyline_menu_recirc&action=click&pgtype=LegacyCollection&impression_id=fe1cabd0-2862-11eb-a601-c3124439c207&variant=show):\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](nytimes_figure.png){width=894}\n:::\n:::\n\n\nI will use county-level Presidential election data from the [MIT Election Data + Science Lab](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/VOQCHQ) to recreate the chart. Since 2020 results are not final yet, I will focus on data from 2000-2016. I ran into multiple issues with the dataset, which I explain in the Code section below. The most signifcant issue was with the data from Alaska, which I excluded from the charts below because of problems with the data.\n\n## Recreating the NYTimes Figure\n\nMy approach is to use `{ggplot2}` and `{sf}` to map the data and draw arrows at angles to display shifts in the Democratic margin.\n\n\n\n\n\nThis is the dataframe I use to make the final map. It contains the year, state, county, FIPS code, county and state geometries, and election results per county.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(shift_map)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 12,610\nColumns: 22\n$ year                          <dbl> 2004, 2008, 2012, 2016, 2004, 2008, 2012…\n$ state                         <chr> \"ALABAMA\", \"ALABAMA\", \"ALABAMA\", \"ALABAM…\n$ county_name                   <chr> \"AUTAUGA\", \"AUTAUGA\", \"AUTAUGA\", \"AUTAUG…\n$ county_fips                   <chr> \"01001\", \"01001\", \"01001\", \"01001\", \"010…\n$ candidatevotes_sum_democrat   <dbl> 4758, 6093, 6363, 5936, 15599, 19386, 18…\n$ candidatevotes_sum_republican <dbl> 15196, 17403, 17379, 18172, 52971, 61271…\n$ pct_vote_democrat             <dbl> 0.23845, 0.25932, 0.26801, 0.24623, 0.22…\n$ pct_vote_republican           <dbl> 0.7616, 0.7407, 0.7320, 0.7538, 0.7725, …\n$ dem_margin_pct                <dbl> -0.52310, -0.48136, -0.46399, -0.50755, …\n$ dem_margin_votes              <dbl> -10438, -11310, -11016, -12236, -37372, …\n$ shift_pct                     <dbl> -0.106746, 0.041745, 0.017371, -0.043561…\n$ shift_votes                   <dbl> -3387, -872, 294, -1220, -10497, -4513, …\n$ shift_pct_scaled              <dbl> 71.83, 91.08, 87.92, 80.02, 78.51, 89.01…\n$ shift_votes_scaled            <dbl> 16602, 11700, 10573, 12378, 30460, 18796…\n$ shift_pct_binary              <chr> \"Republican\", \"Democratic\", \"Democratic\"…\n$ shift_votes_binned            <lgl> FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, F…\n$ geometry                      <POLYGON [m]> POLYGON ((1269841 -1303980,..., …\n$ center                        <list> <POINT (1253837 -1285138)>, <POINT (125…\n$ lng0                          <dbl> 1253837, 1253837, 1253837, 1253837, 1177…\n$ lat0                          <dbl> -1285138, -1285138, -1285138, -1285138, …\n$ lng1                          <dbl> 1259015, 1253616, 1254221, 1255982, 1183…\n$ lat1                          <dbl> -1269365, -1273441, -1274572, -1272948, …\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshift_map_filtered <- shift_map %>% \n  filter(state != \"ALASKA\") %>%\n  filter(year == 2016) %>% \n  mutate(shift_pct_binary = case_when(sign(shift_pct) == 1 ~ \"Democratic\",\n                                      sign(shift_pct) == -1 ~ \"Republican\"),\n         shift_pct_binary = as.factor(shift_pct_binary)) %>% \n  mutate(shift_votes_binned = abs(shift_votes) <= 3000)\n\nggplot() +\n  geom_sf(data = filter(state_geo, !str_detect(NAME, \"ALASKA\")),\n          linewidth = .2,\n          fill = NA) +\n  geom_point(data = filter(shift_map_filtered, abs(shift_votes) <= 1500),\n             aes(x = lng0, y = lat0,\n                 color = shift_pct_binary),\n             size = .75,\n             alpha = .3) +\n  geom_segment(data = filter(shift_map_filtered, abs(shift_votes) > 1500),\n               aes(x = lng0, xend = lng1,\n                   y = lat0, yend = lat1,\n                   color = shift_pct_binary,\n                   linewidth = shift_votes,\n                   alpha = shift_votes_binned),\n               linejoin = \"mitre\",\n               arrow = arrow(length = unit(0.08, \"inches\"))) +\n  scale_color_manual(values = c(\"#1375B7\", \"#C93135\"), guide = guide_legend(title.position = \"top\")) +\n  scale_linewidth_continuous(range = c(.001, 2), guide = \"none\") +\n  scale_alpha_manual(values = c(1, .3), guide = \"none\") +\n  labs(color = \"Shift in election margin\") +\n  facet_wrap(~year) +\n  theme_void(base_size = 25) +\n  theme(legend.direction = \"horizontal\",\n        legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=1440}\n:::\n:::\n\n\nThe starting point of the line is the centroid of the county. The length and width of the lines are scaled to the shift in terms of number of votes. The NYTimes figure treats the shift as a binary variable when it rescales to degrees of the angle. In their graph, a Democratic shift is about 45 degrees (diagonal left) and a Republican shift is about 135 degrees (diagonal right). My figure maintains the continuous nature of the shift in %. I use the range 0-180 in degrees to indicate the shift. 0 degrees (all the way left) indicates a 100% shift towards Democrats, 90 degrees (pointing upwards) indicates no change, and 180 degrees (all the way to the right) indicates a 100% shift towards Republicans.\n\nThe end point of the line is calculated using the sine and cosine of the margin shift in % (re-scaled to be interpreted as degrees of an angle) multiplied by the margin shift in votes (re-scaled to be interpreted as meters), which is added to the origin point. \n\nI lower the opacity of the lines in counties where the vote totals did not shift much. I use points instead of lines for counties where there was a very small shift in votes. This prevents overplotting in geographically dense areas with small populations.\n\nThis animation shows the shift in Presidential election margin from 2004-2016.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolitical_winds_anim <- shift_map %>% \n  filter(state != \"ALASKA\") %>% \n  mutate(id = str_c(state, county_name, county_fips)) %>% \n  mutate(year = as.integer(year)) %>% \n  mutate(shift_pct_binary = case_when(sign(shift_pct) == 1 ~ \"Democratic\",\n                                      sign(shift_pct) == -1 ~ \"Republican\"),\n         shift_pct_binary = as.factor(shift_pct_binary)) %>% \n  mutate(shift_votes_binned = abs(shift_votes) <= 3000) %>% \n  ggplot() +\n  geom_sf(data = filter(state_geo, NAME != \"ALASKA\"),\n          linewidth = .2,\n          fill = NA) +\n  geom_segment(aes(x = lng0, xend = lng1,\n                   y = lat0, yend = lat1,\n                   color = shift_pct_binary,\n                   linewidth = shift_votes,\n                   alpha = shift_votes_binned,\n                   group = id),\n               linejoin = \"mitre\",\n               arrow = arrow(length = unit(0.09, \"inches\"))) +\n  scale_color_manual(values = c(\"#1375B7\", \"#C93135\"), guide = guide_legend(title.position = \"top\")) +\n  scale_linewidth_continuous(range = c(.001, 1.3), guide = \"none\") +\n  scale_alpha_manual(values = c(1, .3), guide = \"none\") +\n  theme_void(base_size = 25) +\n  theme(legend.direction = \"horizontal\",\n        legend.position = \"bottom\") +\n  transition_states(year) +\n  labs(title = \"Shift in Presidential election Democratic margin\",\n       subtitle = \"Year: {closest_state}\",\n       color = \"Shift in Democratic margin\")\n\npolitical_winds_anim\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.gif)\n:::\n:::\n\n\nIn the animation there is less overplotting, so I do not replace lines with dots for counties where there was a very small shift in votes.\n\n## Code\n\n### Ingest\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#election shift\n#script to clean data\n\n#data from https://electionlab.mit.edu/data\n\n#fips info\n#https://en.wikipedia.org/wiki/Federal_Information_Processing_Standard_state_code#FIPS_state_codes\n#https://en.wikipedia.org/wiki/List_of_United_States_FIPS_codes_by_county\n#changes https://www.census.gov/programs-surveys/geography/technical-documentation/county-changes.2010.html\n\n#read in data\ndata <- read_csv(\"post_data/countypres_2000-2020.csv\",\n                 col_types = cols(\n                   year = col_double(),\n                   state = col_character(),\n                   state_po = col_character(),\n                   county_name = col_character(),\n                   county_fips = col_character(),\n                   office = col_character(),\n                   candidate = col_character(),\n                   party = col_character(),\n                   candidatevotes = col_double(),\n                   totalvotes = col_double(),\n                   version = col_double()\n                 )) %>% \n  clean_names() |>\n  filter(year <= 2016,\n         mode == \"TOTAL\") |> \n  select(-mode)\n\nglimpse(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 50,524\nColumns: 11\n$ year           <dbl> 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2…\n$ state          <chr> \"ALABAMA\", \"ALABAMA\", \"ALABAMA\", \"ALABAMA\", \"ALABAMA\", …\n$ state_po       <chr> \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"…\n$ county_name    <chr> \"AUTAUGA\", \"AUTAUGA\", \"AUTAUGA\", \"AUTAUGA\", \"BALDWIN\", …\n$ county_fips    <chr> \"01001\", \"01001\", \"01001\", \"01001\", \"01003\", \"01003\", \"…\n$ office         <chr> \"US PRESIDENT\", \"US PRESIDENT\", \"US PRESIDENT\", \"US PRE…\n$ candidate      <chr> \"AL GORE\", \"GEORGE W. BUSH\", \"RALPH NADER\", \"OTHER\", \"A…\n$ party          <chr> \"DEMOCRAT\", \"REPUBLICAN\", \"GREEN\", \"OTHER\", \"DEMOCRAT\",…\n$ candidatevotes <dbl> 4942, 11993, 160, 113, 13997, 40872, 1033, 578, 5188, 5…\n$ totalvotes     <dbl> 17208, 17208, 17208, 17208, 56480, 56480, 56480, 56480,…\n$ version        <dbl> 20220315, 20220315, 20220315, 20220315, 20220315, 20220…\n```\n:::\n:::\n\n\n### Clean\n\nThis code filters out state-wide vote tabulations and then filters only on the two-party Presidential vote.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% \n  rename(fips_raw = county_fips) %>% \n  #filter out state-wide ballot collection\n  filter(!(state == \"CONNECTICUT\" & county_name == \"STATEWIDE WRITEIN\")) %>% \n  filter(!(state == \"MAINE\" & county_name == \"MAINE UOCAVA\")) %>% \n  filter(!(state == \"RHODE ISLAND\" & county_name == \"FEDERAL PRECINCT\"))\n\n#filter for only 2-party vote in presidential elections\ndata <- data %>% \n  filter(office == \"US PRESIDENT\",\n         party == \"DEMOCRAT\" | party == \"REPUBLICAN\") %>% \n  arrange(state, county_name, fips_raw, year) %>% \n  replace_na(list(candidatevotes = 0))\n```\n:::\n\n\nMany of the FIPS codes from the source data dropped leading zeroes, which makes them unuseable for joining with Census data. This code adds the leading zeroes back.\n\n**These problems were fixed in a later update by MIT, so this code is not strictly necessary anymore**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#clean fips data\nstates_with_bad_fips <- str_to_title(c(\"ALABAMA\", \"ALASKA\", \"ARIZONA\", \n                                      \"ARKANSAS\", \"CALIFORNIA\",\n                                      \"COLORADO\", \"CONNECTICUT\"))\ndata %>% \n  filter(state %in% states_with_bad_fips) %>% \n  mutate(county_fips = paste0(\"0\", fips_raw)) %>% \n  distinct(fips_raw, county_fips)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 2\n# ℹ 2 variables: fips_raw <chr>, county_fips <chr>\n```\n:::\n\n```{.r .cell-code}\ndata <- data %>% \n  #add \"0\" to front of states where leading \"0\" was dropped\n  mutate(county_fips = case_when(state %in% states_with_bad_fips ~ paste0(\"0\", fips_raw),\n                          !(state %in% states_with_bad_fips) ~ fips_raw))\n```\n:::\n\n\nI had to make a variety of decisions about how to clean up the data with regards to county geometries. The MIT data does not reflect cases where counties changed names or FIPS codes, or where counties merged. This code manually makes the changes necessary to join the data with Census geometry data. Note that I do not attempt to fix the data for Alaska, which was extremely different than the Census data. I was not confident that I could make accurate adjustments in this case, so I excluded Alaska entirely. These changes are not optimal, but I think it is close enough.\n\n**These problems were fixed in a later update by MIT, so this code is not strictly necessary anymore**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#decisions to make with wonky geometry\n#merge records for Shannnon and Oglala Lakota counties in SD\n#merge Kansas City Missouri and Jackson County Missouri\n#merge Bedford (city) fips 51515 with Bedford county 51019\n\ndata <- data %>% \n  #update Oglala Lakota SD fips\n  #changed in 2015 https://www.census.gov/programs-surveys/geography/technical-documentation/county-changes.2010.html\n  mutate(county_fips = case_when(state == \"SOUTH DAKOTA\" & county_name == \"OGLALA LAKOTA\" ~ \"46102\",\n                          TRUE ~ county_fips)) %>% \n  #merge Kansas City Missouri with Jackson County Missouri\n  mutate(county_name = case_when(state == \"MISSOURI\" & county_name == \"KANSAS CITY\" ~ \"JACKSON\",\n                            TRUE ~ county_name),\n         county_fips = case_when(state == \"MISSOURI\" & county_name == \"JACKSON\" ~ \"29095\",\n                          TRUE ~ county_fips)) %>% \n  #merge Bedford (city) fips 51515 with Bedford county 51019\n  mutate(county_fips = case_when(state == \"VIRGINIA\" & county_name == \"BEDFORD\" & county_fips == \"51515\" ~ \"51019\",\n                          TRUE ~ county_fips))\n```\n:::\n\n\nThis compares the counties in the MIT data vs. what is in the Census API. Besides Alaska, this shows that my manual changes accounted for the issues I identified.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounties <- get_acs(variables = \"B19013_001\",\n                      geography = \"county\",\n                      geometry = FALSE) %>% \n  #mutate(census_geo_year = 2010) %>% \n  select(NAME, GEOID)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#alaska falls out: this is expected\n#Broomfield County CO falls out for year 2000: was part of Boulder County in 2000\n#Oglala Lakota County SD falls out for year 2000: was Shannon County in 2000\n#\ndata %>% \n  select(year, state, county_name, county_fips) %>% \n  filter(state != \"ALASKA\") %>% \n  anti_join(counties, by = c(\"county_fips\" = \"GEOID\")) %>% \n  count(state, county_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  state        county_name     n\n  <chr>        <chr>       <int>\n1 SOUTH DAKOTA SHANNON         8\n```\n:::\n:::\n\n\nThe process of merging some counties meant that I had to summarize the election results to the level of my new \"adjusted\" counties. This code performs that process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#some counties have 4 records because of merging process\ndata %>%\n  select(state, county_name, county_fips, year) %>% \n  add_count(state, county_name, county_fips, year) %>% \n  distinct(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n      n\n  <int>\n1     2\n2     4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#summarize candidatevotes to account for merged counties\ndata %>% \n  select(state, county_name, county_fips, year, office, party, candidate, candidatevotes) %>% \n  group_by(state, county_name, county_fips, year, office, party, candidate) %>% \n  summarize(candidatevotes_sum = sum(candidatevotes)) %>% \n  ungroup() %>% \n  add_count(state, county_name, county_fips, year) %>% \n  #confirm that each county only has 2 records\n  distinct(n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'state', 'county_name', 'county_fips',\n'year', 'office', 'party'. You can override using the `.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1     2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data %>% \n  select(state, county_name, county_fips, year, office, party, candidate, candidatevotes) %>% \n  group_by(state, county_name, county_fips, year, office, party, candidate) %>% \n  summarize(candidatevotes_sum = sum(candidatevotes)) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'state', 'county_name', 'county_fips',\n'year', 'office', 'party'. You can override using the `.groups` argument.\n```\n:::\n:::\n\n\n### Munge\n\nThis part performs the more straightfoward tasks of calculating a candidate's % of the vote and the election-to-election shift in %.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential_votes <- data %>% \n  group_by(year, state, county_name, county_fips) %>% \n  mutate(pct_vote = candidatevotes_sum / sum(candidatevotes_sum)) %>% \n  ungroup() %>% \n  select(year, state, county_name, county_fips, party, candidatevotes_sum, pct_vote)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential_votes_shift <- presidential_votes %>% \n  mutate(party = str_to_lower(party)) %>%\n  pivot_wider(names_from = party, values_from = c(candidatevotes_sum, pct_vote)) %>%\n  mutate(dem_margin_pct = pct_vote_democrat - pct_vote_republican,\n         dem_margin_votes = candidatevotes_sum_democrat - candidatevotes_sum_republican) %>% \n  arrange(state, county_name, county_fips, year) %>% \n  group_by(state, county_name, county_fips) %>% \n  mutate(shift_pct = dem_margin_pct - lag(dem_margin_pct),\n         shift_votes = dem_margin_votes - lag(dem_margin_votes)) %>% \n  filter(row_number() > 1) %>% \n  ungroup()\n```\n:::\n\n\nFinally, this creates new variables that rescale the shift in % and votes to degrees and meters, respectively. I also create variations of `shift_pct` and `shift_votes` to use in the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npresidential_votes_shift <- presidential_votes_shift %>% \n  mutate(shift_pct_scaled = rescale(shift_pct, to = c(0, 180)), #republican 0, democrat 180\n         shift_votes_scaled = rescale(abs(shift_votes), to = c(10^4, 10^6))) %>% \n  mutate(shift_pct_binary = case_when(sign(shift_pct) == 1 ~ \"Democratic\",\n                                      sign(shift_pct) == -1 ~ \"Republican\"),\n         shift_pct_binary = as.factor(shift_pct_binary)) %>% \n  mutate(shift_votes_binned = abs(shift_votes) <= 3000)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#create shift map object\nshift_map <- presidential_votes_shift %>% \n  left_join(county_geo, by = c(\"county_fips\" = \"GEOID\")) %>% \n  st_sf() %>% \n  rename(lng0 = center_lon_x,\n         lat0 = center_lat_y) %>% \n  mutate(lng1 = lng0 + (shift_votes_scaled * cos(NISTdegTOradian(shift_pct_scaled))),\n         lat1 = lat0 + (shift_votes_scaled * sin(NISTdegTOradian(shift_pct_scaled))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshift_map_filtered <- shift_map %>% \n  filter(state != \"ALASKA\") %>%\n  filter(year == 2016) %>% \n  mutate(shift_pct_binary = case_when(sign(shift_pct) == 1 ~ \"Democratic\",\n                                      sign(shift_pct) == -1 ~ \"Republican\"),\n         shift_pct_binary = as.factor(shift_pct_binary))\n\nggplot() +\n  geom_sf(data = filter(state_geo, !str_detect(NAME, \"ALASKA\")),\n          linewidth = .2,\n          fill = NA) +\n  geom_point(data = filter(shift_map_filtered, abs(shift_votes) <= 1500),\n             aes(x = lng0, y = lat0,\n                 color = shift_pct_binary),\n             size = .75,\n             alpha = .3) +\n  geom_segment(data = filter(shift_map_filtered, abs(shift_votes) > 1500),\n               aes(x = lng0, xend = lng1,\n                   y = lat0, yend = lat1,\n                   color = shift_pct_binary,\n                   linewidth = shift_votes,\n                   alpha = shift_votes_binned),\n               linejoin = \"mitre\",\n               arrow = arrow(length = unit(0.08, \"inches\"))) +\n  scale_color_manual(values = c(\"#1375B7\", \"#C93135\"), guide = guide_legend(title.position = \"top\")) +\n  scale_linewidth_continuous(range = c(.001, 2), guide = \"none\") +\n  scale_alpha_manual(values = c(1, .3), guide = \"none\") +\n  labs(color = \"Shift in election margin\") +\n  facet_wrap(~year) +\n  theme_void(base_size = 25) +\n  theme(legend.direction = \"horizontal\",\n        legend.position = \"bottom\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npolitical_winds_anim <- shift_map %>% \n  filter(state != \"Alaska\") %>% \n  mutate(id = str_c(state, county_name, county_fips)) %>% \n  mutate(year = as.integer(year)) %>% \n  mutate(shift_votes_binned = abs(shift_votes) <= 3000) %>% \n  ggplot() +\n  geom_sf(data = filter(state_geo, NAME != \"Alaska\"),\n          linewidth = .2,\n          fill = NA) +\n  geom_segment(aes(x = lng0, xend = lng1,\n                   y = lat0, yend = lat1,\n                   color = shift_pct_binary,\n                   linewidth = shift_votes,\n                   alpha = shift_votes_binned,\n                   group = id),\n               linejoin = \"mitre\",\n               arrow = arrow(length = unit(0.09, \"inches\"))) +\n  scale_color_manual(values = c(\"#1375B7\", \"#C93135\"), guide = guide_legend(title.position = \"top\")) +\n  scale_size_continuous(range = c(.001, 1.3), guide = \"none\") +\n  scale_alpha_manual(values = c(1, .3), guide = \"none\") +\n  theme_void(base_size = 25) +\n  theme(legend.direction = \"horizontal\",\n        legend.position = \"bottom\") +\n  transition_states(year) +\n  labs(title = \"Shift in Presidential election Democratic margin\",\n       subtitle = \"Year: {closest_state}\",\n       color = \"Shift in Democratic margin\")\n\npolitical_winds_anim\n```\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}