{
  "hash": "5baaaa7d04a18bde59d9167718d8e6c0",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\ntitle: \"(re)Modeling the Office\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R]\ncategories: [R]\ndate: 2020-06-21\nlastmod: 2020-08-07T13:47:31-04:00\nfeatured: false\ndraft: false\n# Focal points: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight.\nimage: featured.png\nprojects: []\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\nThe goal for this analysis is to determine which characters, directors, and writers from The Office most influence an episode's IMDB rating. My hypothesis is that IMDB rating is largely driven by a few show personnel. I also briefly walk through the data cleaning and modeling processes. This analysis is based on code from Julia Silge's [Tidy Tuesdays](https://juliasilge.com/blog/lasso-the-office/) writeup She does a very good job of explaining the modeling aspects of this. She uses LASSO regression, which is very similar to the ridge regression I use.\n\nThe steps in the analysis are:\n\n* organize the data\n  + split by role (director, writer, and character)\n* clean up the data\n* model the data\n* review model output and performance\n\nI use these variables in the model:\n\n* season\n* was the episode a season premier\n* was the episode a season finale\n* was a given director involved in the episode\n* was a given writer involved in the episode\n* how many lines did each character have in the episode\n\n### Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(tidytext)\nlibrary(janitor)\nlibrary(schrute)\nlibrary(tidyr)\nlibrary(glmnet)\nlibrary(tidymodels)\nlibrary(vip)\n\noptions(scipen = 999, digits = 2)\n\ntheme_set(theme_bw())\n\nset.seed(1234)\n```\n:::\n\n\nThe first step is to download the data from the ```{schrute}``` package. The data is organized by season/episode/line, which is useful for analyzing characters, but not writers or directors.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- schrute::theoffice %>% \n  as_tibble() %>% \n  mutate(air_date = ymd(air_date))\n\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 55,130\nColumns: 12\n$ index            <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ season           <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ episode          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ episode_name     <chr> \"Pilot\", \"Pilot\", \"Pilot\", \"Pilot\", \"Pilot\", \"Pilot\",…\n$ director         <chr> \"Ken Kwapis\", \"Ken Kwapis\", \"Ken Kwapis\", \"Ken Kwapis…\n$ writer           <chr> \"Ricky Gervais;Stephen Merchant;Greg Daniels\", \"Ricky…\n$ character        <chr> \"Michael\", \"Jim\", \"Michael\", \"Jim\", \"Michael\", \"Micha…\n$ text             <chr> \"All right Jim. Your quarterlies look very good. How …\n$ text_w_direction <chr> \"All right Jim. Your quarterlies look very good. How …\n$ imdb_rating      <dbl> 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6…\n$ total_votes      <int> 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,…\n$ air_date         <date> 2005-03-24, 2005-03-24, 2005-03-24, 2005-03-24, 2005…\n```\n:::\n:::\n\n\n## Basic EDA\n\nThe boxplot shows that ```season``` may have an impact on the rating, so I will include that in the model.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  distinct(air_date, season, imdb_rating) %>% \n  ggplot(aes(air_date, imdb_rating, fill = as.factor(season))) +\n    geom_boxplot() +\n    labs(x = \"Air date\",\n         y = \"IMDB rating\",\n         fill = \"Season\") +\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis creates a table with IMDB ratings and season premier/finale flags. This will be the table I join the personnel data to.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_imdb <- df %>% \n  distinct(season, episode, imdb_rating) %>% \n  group_by(season) %>% \n  mutate(flag_premier = episode == first(episode),\n         flag_finale = episode == last(episode)) %>% \n  ungroup() %>% \n  mutate(across(contains(\"flag\"), as.numeric))\n\nglimpse(df_imdb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 186\nColumns: 5\n$ season       <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ episode      <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, …\n$ imdb_rating  <dbl> 7.6, 8.3, 7.9, 8.1, 8.4, 7.8, 8.7, 8.2, 8.4, 8.4, 8.2, 8.…\n$ flag_premier <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ flag_finale  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n```\n:::\n:::\n\n\n### Directors\n\nSome episodes have more than one director, so I move them into separate rows.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_directors <- df %>% \n  distinct(season, episode, director) %>% \n  separate_rows(director, sep = \";\")\n```\n:::\n\n\nThe original data contains misspellings of director names, which will cause issues when I filter out less common directors. This code fixes those misspellings.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_director_fix <- tibble(director_good = c(\"Charles McDougall\",\n                                            \"Claire Scanlon\",\n                                            \"Greg Daniels\",\n                                            \"Ken Whittingham\",\n                                            \"Paul Lieberstein\"),\n                          director_bad = c(\"Charles McDougal\",\n                                           \"Claire Scanlong\",\n                                           \"Greg Daneils\",\n                                           \"Ken Wittingham\",\n                                           \"Paul Lieerstein\"))\n\ndf_directors <- df_directors %>% \n  left_join(df_director_fix, by = c(\"director\" = \"director_bad\")) %>% \n  mutate(director = case_when(!is.na(director_good) ~ director_good,\n                              is.na(director_good) ~ director)) %>% \n  mutate(director = str_c(\"director\", director, sep = \"_\")) %>% \n  select(-director_good)\n```\n:::\n\n\nThis cleans up the director names and selects only directors that were involved in more than 2 episodes.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_directors <- df_directors %>%  \n  mutate(director = str_remove_all(director, \"\\\\.\"),\n         director = str_replace_all(director, \"\\\\-\", \"_\"),\n         director = str_replace_all(director, \" \", \"_\")) %>% \n  add_count(director) %>% \n  filter(n > 2) %>% \n  select(-n)\n```\n:::\n\n\nThis pivots the data wide so it can be used with the regression model.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_directors <- df_directors %>% \n  mutate(flag = 1) %>% \n  pivot_wider(id_cols = c(season, episode), names_from = director, values_from = flag, values_fill = list(flag = 0))\n\ndf_directors %>% \n  select(1:20) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 139\nColumns: 20\n$ season                     <int> 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ episode                    <int> 1, 2, 3, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, …\n$ director_Ken_Kwapis        <dbl> 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1…\n$ director_Ken_Whittingham   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Greg_Daniels      <dbl> 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0…\n$ director_Paul_Feig         <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0…\n$ director_Charles_McDougall <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n$ director_Randall_Einhorn   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Tucker_Gates      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Jeffrey_Blitz     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Harold_Ramis      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Paul_Lieberstein  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Jennifer_Celotta  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_David_Rogers      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Steve_Carell      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Brent_Forrester   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_BJ_Novak          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_John_Krasinski    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Matt_Sohn         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Rainn_Wilson      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n\n### Writers\n\nThis separates out where more than one writer was involved in an episode, filters on writers that were involved in more than 2 episodes, and pivots the data wide.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_writers <- df %>% \n  distinct(season, episode, writer) %>% \n  separate_rows(writer, sep = \";\") %>% \n  add_count(writer) %>% \n  filter(n > 2)\n\ndf_writers <- df_writers %>% \n  mutate(writer = str_remove_all(writer, \"\\\\.\"),\n         writer = str_replace_all(writer, \"\\\\-\", \"_\"),\n         writer = str_replace_all(writer, \" \", \"_\")) %>% \n  mutate(writer = str_c(\"writer\", writer, sep = \"_\"))\n\ndf_writers <- df_writers %>% \n  mutate(flag = 1) %>% \n  pivot_wider(id_cols = c(season, episode), names_from = writer, values_from = flag, values_fill = list(flag = 0))\n\ndf_writers %>% \n  select(1:20) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 157\nColumns: 20\n$ season                    <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ episode                   <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 9, 10…\n$ writer_Greg_Daniels       <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,…\n$ writer_BJ_Novak           <dbl> 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,…\n$ writer_Paul_Lieberstein   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,…\n$ writer_Michael_Schur      <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,…\n$ writer_Mindy_Kaling       <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Gene_Stupnitsky    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,…\n$ writer_Lee_Eisenberg      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,…\n$ writer_Jennifer_Celotta   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,…\n$ writer_Brent_Forrester    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Justin_Spitzer     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Aaron_Shure        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Charlie_Grandy     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Warren_Lieberstein <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Halsted_Sullivan   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Daniel_Chun        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Carrie_Kemper      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Steve_Hely         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ writer_Robert_Padnick     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n```\n:::\n:::\n\n\n### Characters\n\nSome of the characters are named inconsistently, so this fixes the cases I identified.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_characters <- df %>% \n  select(season, episode, character) %>% \n  mutate(character = case_when(season == 7 & episode == 18 & character == \"Todd\" ~ \"Todd Packer\",\n                               TRUE ~ character)) %>% \n  mutate(character = case_when(season == 7 & episode == 14 & character == \"David\" ~ character,\n                               character == \"David\" ~ \"David Wallace\",\n                               TRUE ~ character)) %>% \n  mutate(character = case_when(character == \"DeAngelo\" ~ \"Deangelo\",\n                               TRUE ~ character))\n```\n:::\n\n\nSome of the values contain odd characters that need to be removed. This also counts how many lines a character had in an episode.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_characters <- df_characters %>%\n  mutate(character = str_replace_all(character, \" & \", \" and \"),\n         character = str_replace_all(character, \"/\", \" and \"),\n         character = str_replace_all(character, \",\", \" and \"),\n         character = str_trim(character),\n         character = str_remove_all(character, \"#\"),\n         character = str_remove_all(character, \"-\"),\n         character = str_remove_all(character, \"'\"),\n         character = str_remove_all(character, '\"'),\n         character = str_remove_all(character, \"\\\\[\"),\n         character = str_remove_all(character, \"\\\\]\"),\n         character = str_remove_all(character, \"\\\\(\"),\n         character = str_remove_all(character, \"\\\\)\"),\n         character = str_replace_all(character, \" \", \"_\")) %>%\n  count(season, episode, character, name = \"line_count\")\n```\n:::\n\n\nThis selects only the characters that were involved in more than 20 episodes and pivots the data wide. The value in each character column shows how many lines they had in the episode.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_top_characters <- df_characters %>% \n  count(character, sort = TRUE) %>% \n  filter(n >= 20) %>% \n  select(character)\n\ndf_characters_main <- df_characters %>% \n  semi_join(df_top_characters) %>% \n  pivot_wider(id_cols = c(season, episode), \n              names_from = character, \n              names_prefix = \"cast_\", \n              values_from = line_count, \n              values_fill = list(line_count = 0))\n\ndf_characters_main %>% \n  select(1:20) %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 186\nColumns: 20\n$ season        <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ episode       <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,…\n$ cast_Angela   <int> 1, 4, 5, 7, 3, 3, 1, 2, 6, 17, 13, 3, 0, 5, 13, 9, 1, 5,…\n$ cast_Dwight   <int> 29, 17, 62, 47, 25, 28, 32, 11, 55, 65, 33, 64, 22, 42, …\n$ cast_Jan      <int> 12, 0, 18, 0, 0, 8, 9, 11, 0, 0, 0, 0, 46, 52, 0, 0, 0, …\n$ cast_Jim      <int> 36, 25, 42, 49, 21, 55, 32, 16, 55, 51, 30, 49, 40, 26, …\n$ cast_Kevin    <int> 1, 8, 6, 3, 1, 5, 1, 6, 9, 5, 2, 3, 1, 4, 8, 11, 0, 2, 8…\n$ cast_Michael  <int> 81, 75, 56, 68, 104, 106, 96, 100, 83, 69, 108, 85, 73, …\n$ cast_Oscar    <int> 3, 13, 9, 14, 2, 1, 2, 0, 10, 4, 7, 0, 4, 1, 6, 8, 1, 3,…\n$ cast_Pam      <int> 41, 12, 32, 22, 14, 45, 41, 27, 33, 22, 27, 25, 32, 30, …\n$ cast_Phyllis  <int> 2, 0, 0, 5, 4, 0, 10, 6, 2, 6, 3, 0, 4, 1, 4, 5, 4, 3, 0…\n$ cast_Roy      <int> 5, 0, 0, 3, 12, 14, 6, 14, 0, 6, 0, 0, 1, 0, 0, 8, 11, 0…\n$ cast_Ryan     <int> 8, 4, 1, 4, 8, 12, 2, 1, 5, 40, 1, 18, 6, 1, 2, 15, 2, 1…\n$ cast_Stanley  <int> 5, 5, 6, 2, 3, 3, 8, 1, 3, 5, 3, 3, 0, 4, 2, 5, 8, 4, 3,…\n$ cast_Kelly    <int> 0, 2, 0, 0, 0, 0, 7, 0, 0, 4, 3, 3, 1, 2, 1, 8, 4, 1, 5,…\n$ cast_Toby     <int> 0, 2, 0, 4, 0, 7, 0, 26, 0, 0, 0, 5, 1, 1, 0, 3, 0, 7, 3…\n$ cast_Meredith <int> 0, 0, 3, 10, 0, 0, 0, 1, 1, 4, 0, 0, 0, 0, 0, 10, 3, 1, …\n$ cast_Darryl   <int> 0, 0, 0, 0, 15, 0, 1, 9, 0, 0, 0, 0, 0, 0, 0, 11, 3, 0, …\n$ cast_Everyone <int> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,…\n$ cast_Creed    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 1, 0, 4, 0, 1, 3…\n```\n:::\n:::\n\n\n## Prepare data for modeling\n\nThis combines all the personnel tables and creates an ```episode_id``` variable. I also replace missing values with 0.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_office <- df_imdb %>% \n  left_join(df_directors) %>% \n  left_join(df_writers) %>% \n  left_join(df_characters_main) %>% \n  mutate(episode_id = str_c(season, episode, sep = \"_\")) %>% \n  mutate(across(contains(\"director\"), coalesce, 0),\n         across(contains(\"writer\"), coalesce, 0)) %>% \n  select(-episode)\n\ndf_office %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 186\nColumns: 72\n$ season                     <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2…\n$ imdb_rating                <dbl> 7.6, 8.3, 7.9, 8.1, 8.4, 7.8, 8.7, 8.2, 8.4…\n$ flag_premier               <dbl> 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ flag_finale                <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Ken_Kwapis        <dbl> 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0…\n$ director_Ken_Whittingham   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Greg_Daniels      <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0…\n$ director_Paul_Feig         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1…\n$ director_Charles_McDougall <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Randall_Einhorn   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Tucker_Gates      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Jeffrey_Blitz     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Harold_Ramis      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Paul_Lieberstein  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Jennifer_Celotta  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_David_Rogers      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Steve_Carell      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Brent_Forrester   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_BJ_Novak          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_John_Krasinski    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Matt_Sohn         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Rainn_Wilson      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ director_Troy_Miller       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Greg_Daniels        <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0…\n$ writer_BJ_Novak            <dbl> 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0…\n$ writer_Paul_Lieberstein    <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ writer_Michael_Schur       <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0…\n$ writer_Mindy_Kaling        <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Gene_Stupnitsky     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0…\n$ writer_Lee_Eisenberg       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0…\n$ writer_Jennifer_Celotta    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1…\n$ writer_Brent_Forrester     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Justin_Spitzer      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Aaron_Shure         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Charlie_Grandy      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Warren_Lieberstein  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Halsted_Sullivan    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Daniel_Chun         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Carrie_Kemper       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Steve_Hely          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Robert_Padnick      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Allison_Silverman   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ writer_Owen_Ellickson      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Angela                <int> 1, 4, 5, 7, 3, 3, 1, 2, 6, 17, 13, 3, 0, 5,…\n$ cast_Dwight                <int> 29, 17, 62, 47, 25, 28, 32, 11, 55, 65, 33,…\n$ cast_Jan                   <int> 12, 0, 18, 0, 0, 8, 9, 11, 0, 0, 0, 0, 46, …\n$ cast_Jim                   <int> 36, 25, 42, 49, 21, 55, 32, 16, 55, 51, 30,…\n$ cast_Kevin                 <int> 1, 8, 6, 3, 1, 5, 1, 6, 9, 5, 2, 3, 1, 4, 8…\n$ cast_Michael               <int> 81, 75, 56, 68, 104, 106, 96, 100, 83, 69, …\n$ cast_Oscar                 <int> 3, 13, 9, 14, 2, 1, 2, 0, 10, 4, 7, 0, 4, 1…\n$ cast_Pam                   <int> 41, 12, 32, 22, 14, 45, 41, 27, 33, 22, 27,…\n$ cast_Phyllis               <int> 2, 0, 0, 5, 4, 0, 10, 6, 2, 6, 3, 0, 4, 1, …\n$ cast_Roy                   <int> 5, 0, 0, 3, 12, 14, 6, 14, 0, 6, 0, 0, 1, 0…\n$ cast_Ryan                  <int> 8, 4, 1, 4, 8, 12, 2, 1, 5, 40, 1, 18, 6, 1…\n$ cast_Stanley               <int> 5, 5, 6, 2, 3, 3, 8, 1, 3, 5, 3, 3, 0, 4, 2…\n$ cast_Kelly                 <int> 0, 2, 0, 0, 0, 0, 7, 0, 0, 4, 3, 3, 1, 2, 1…\n$ cast_Toby                  <int> 0, 2, 0, 4, 0, 7, 0, 26, 0, 0, 0, 5, 1, 1, …\n$ cast_Meredith              <int> 0, 0, 3, 10, 0, 0, 0, 1, 1, 4, 0, 0, 0, 0, …\n$ cast_Darryl                <int> 0, 0, 0, 0, 15, 0, 1, 9, 0, 0, 0, 0, 0, 0, …\n$ cast_Everyone              <int> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0…\n$ cast_Creed                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 1, …\n$ cast_All                   <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_David_Wallace         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Andy                  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Karen                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Pete                  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Erin                  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Gabe                  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Clark                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Robert                <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ cast_Nellie                <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ episode_id                 <chr> \"1_1\", \"1_2\", \"1_3\", \"1_4\", \"1_5\", \"1_6\", \"…\n```\n:::\n:::\n\n\nThis splits the data into the training and testing sets that will be used to model the data. I stratify by ```season``` because it may have an effect on ```imdb_rating``` that I want to capture.\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_split <- initial_split(df_office, strata = season)\noffice_train <- training(office_split)\noffice_test <- testing(office_split)\n```\n:::\n\n\nThis creates a ```tidymodels``` recipe that removes zero-variance variables and normalizes the predictor variables.\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_rec <- recipe(imdb_rating ~ ., data = office_train) %>%\n  update_role(episode_id, new_role = \"ID\") %>%\n  step_zv(all_numeric(), -all_outcomes()) %>%\n  step_normalize(all_numeric(), -all_outcomes())\n\noffice_prep <- office_rec %>%\n  prep(strings_as_factors = FALSE)\n```\n:::\n\n\n## Modeling\n\nI will use a linear model with ridge regression to penalize extreme coefficients. I bootstrap the training data and use ```tune()``` to find the optimal value for ```penalty```.\n\n::: {.cell}\n\n```{.r .cell-code}\nwf <- workflow() %>%\n  add_recipe(office_rec)\n\noffice_boot <- bootstraps(office_train, strata = season)\n\ntune_spec <- linear_reg(penalty = tune(), mixture = 0) %>%\n  set_engine(\"glmnet\")\n\nlambda_grid <- grid_regular(penalty(), levels = 50)\n\nridge_grid <- tune_grid(\n  wf %>% add_model(tune_spec),\n  resamples = office_boot,\n  grid = lambda_grid)\n```\n:::\n\n\n`lowest_rmse` searches through the bootstrapped models to find the `penalty` that gives the lowest RMSE (root mean squared error). This graph shows that increasing the penalty increases performance, but has diminishing returns.\n\n::: {.cell}\n\n```{.r .cell-code}\nlowest_rmse <- ridge_grid %>%\n  select_best(\"rmse\")\n\n#graph metrics\nridge_grid %>%\n  collect_metrics() %>%\n  ggplot(aes(penalty, mean, color = .metric, fill = .metric)) +\n  geom_ribbon(aes(ymin = mean - std_err,\n                  ymax = mean + std_err),\n              alpha = 0.5) +\n  geom_line(size = 1.5) +\n  geom_vline(xintercept = lowest_rmse$penalty, linetype = 2) +\n  facet_wrap(~.metric, scales = \"free\", nrow = 2) +\n  scale_x_log10() +\n  labs(title = \"Ridge regression lambda values\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nThis fits the model with the best value for ```penalty```.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_ridge <- finalize_workflow(wf %>% add_model(tune_spec), lowest_rmse)\n```\n:::\n\n\n### Assess model\n\nThe model generally overrates episodes with low ratings and underrates episodes with high ratings.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_ridge %>% \n  fit(office_train) %>% \n  predict(office_train) %>% \n  bind_cols(office_train) %>% \n  ggplot(aes(imdb_rating, .pred)) +\n    geom_abline(linetype = 2) +\n    geom_point(alpha = .2) +\n    geom_smooth() +\n    coord_equal() +\n    labs(x = \"IMDB rating\",\n         y = \"Predicted rating\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nExamining the data by season shows that the model predicted ```imdb_rating``` reasonably well for most seasons. It overestimated season 1 and underestimated season 3.\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_ridge %>% \n  fit(office_train) %>% \n  predict(office_train) %>% \n  bind_cols(office_train) %>% \n  separate(episode_id, into = c(\"season\", \"episode\"), sep = \"_\") %>% \n  mutate(.resid = imdb_rating - .pred) %>% \n  select(season, episode, .resid) %>% \n  ggplot(aes(season, .resid)) +\n    geom_boxplot() +\n    geom_hline(yintercept = 0, linetype = 2, color = \"red\") +\n    labs(y = \"Residual\",\n         title = \"Actual minus predicted rating\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nThis graph shows the variable importance, split by role:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_vi <- final_ridge %>%\n  fit(office_train) %>%\n  pull_workflow_fit() %>%\n  vi(lambda = lowest_rmse$penalty) %>%\n  mutate(Importance = case_when(Sign == \"NEG\" ~ Importance * -1,\n                                TRUE ~ Importance)) %>%\n  mutate(Variable = case_when(str_detect(Variable, \"writer|director|cast\") ~ Variable,\n                              TRUE ~ str_c(\"other_\", Variable))) %>% \n  mutate(Variable = fct_reorder(Variable, Importance)) %>%\n  separate(Variable, sep = \"_\", into = c(\"role\", \"person\"), extra = \"merge\") %>% \n  mutate(person = str_replace_all(person, \"_\", \" \"))\n\ndf_vi %>% \n  mutate(person = tidytext::reorder_within(x = person, by = Importance, within = role)) %>% \n  ggplot(aes(x = Importance, y = person, fill = Importance)) +\n  geom_col(color = \"black\") +\n  facet_wrap(~role, scales = \"free_y\") +\n  scale_fill_viridis_c() +\n  scale_y_reordered() +\n  labs(y = NULL)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\nThe importance of characters is much more evenly distributed than I thought it would be. Stanley is the cast MVP (non-Michael division) based on this model. The character isn't usually the focus of an episode, but when he has a lot of lines, the episode gets better ratings.\n\n![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMDd6MHY5NmlxaTUzaDNudHE5cGN3Nmt3bm5yMmVvdzFkNzY0Y2FlMiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/XjEvy8X8XB6Yo/giphy.gif){fig-align=\"center\"}\n\nThe high values for \"All\" show that scenes where the entire office is involved are highly associated with increased ratings.\n\n![](https://media.giphy.com/media/UAHZijO91QCl2/giphy.gif){fig-align=\"center\"}\n\nI'm impressed by the high ratings for Michael and Jim, who carried a lot of the workload in terms of lines delivered. Despite this, the model still considers the number of lines they deliver to be important.\n\nCarell's directorship is significantly more important than the other directors. I was definitely surprised by this, since Carell only directed a few episodes, and I expected the ridge regression to penalize his director coefficient heavily.\n\nThe model has a dim view of Nellie and Robert, who were brought in fill the gap left by Carell's departure from the show.\n\n![](https://media.giphy.com/media/d10dMmzqCYqQ0/giphy.gif){fig-align=\"center\"}\n\nIn the \"other\" variables, the model thinks the show gets lower ratings as the seasons go on. Finales and season premiers are positive influences.\n\nSplitting the model inputs by role means I can compare how impactful a person was across roles. For example, the showrunner Greg Daniels was relatively more important as as writer than a director.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_vi %>%  \n  filter(person == \"Greg Daniels\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  role     person       Importance Sign \n  <chr>    <chr>             <dbl> <chr>\n1 writer   Greg Daniels     0.0328 POS  \n2 director Greg Daniels     0.0123 POS  \n```\n:::\n:::\n\n\nRainn Wilson was much more important as a cast member than as a director.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_vi %>% \n  filter(person == \"Dwight\" | person == \"Rainn Wilson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  role     person       Importance Sign \n  <chr>    <chr>             <dbl> <chr>\n1 cast     Dwight           0.0197 POS  \n2 director Rainn Wilson    -0.0189 NEG  \n```\n:::\n:::\n\n\n![](https://media.giphy.com/media/s3d5ugcxFDApG/giphy.gif){fig-align=\"center\"}\n\nFinally, this tests how the model performs on test data that it has not seen. I think this is reasonably good, considering that TV show quality is driven by chemistry between the cast, which is hard to quantify.\n\n::: {.cell}\n\n```{.r .cell-code}\nlast_fit(final_ridge, office_split) %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       0.430 Preprocessor1_Model1\n2 rsq     standard       0.324 Preprocessor1_Model1\n```\n:::\n:::\n\n\n![](https://media.giphy.com/media/8VrtCswiLDNnO/giphy.gif){fig-align=\"center\"}",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}