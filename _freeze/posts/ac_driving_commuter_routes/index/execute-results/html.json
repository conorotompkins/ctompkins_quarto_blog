{
  "hash": "d9fc096ddbf1b783a071874803b4391b",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\ntitle: \"Analyzing major commuter routes in Allegheny County\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, Allegheny County, Commuters, Census, Mapbox]\ncategories: [R, Allegheny County, Commuters, Census, Mapbox]\ndate: 2020-10-25\nlastmod: 2020-10-25\nfeatured: false\ndraft: FALSE\n# Focal points: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight.\nimage: featured.png\nprojects: []\nexecute:\n  warning: false\n  message: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Intro\n\nIn this post I will use the Mapbox API to calculate metrics for major commuter routes in Allegheny County. The API will provide the distance and duration of the trip, as well as turn-by-turn directions. The route duration should be considered a \"minimum duration\" because it does not consider traffic. Then I will estimate the duration of the trips with a linear model and compare that to the actual duration from the Mapbox API. I will use the difference between the actual and estimated duration to identify neighborhoods that experience longer or shorter commutes than expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(mapboxapi)\nlibrary(tidycensus)\nlibrary(janitor)\nlibrary(lehdr)\nlibrary(tigris)\nlibrary(sf)\nlibrary(hrbrthemes)\n\noptions(tigris_use_cache = TRUE,\n        scipen = 999,\n        digits = 4)\n\ntheme_set(theme_ipsum())\n\nsf_use_s2(FALSE)\n```\n:::\n\n\n## Gather data\n\nThe first step is to download the census tract shapefiles for the county:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_20da5a081e49010e6fc6578fbffb3b83'}\n\n```{.r .cell-code}\n#get tracts\nallegheny_county_tracts <- tracts(state = \"PA\", county = \"Allegheny\", cb = TRUE) %>% \n  select(GEOID)\n\nst_erase <- function(x, y) {\n  st_difference(x, st_union(y))\n}\n\nac_water <- area_water(\"PA\", \"Allegheny\", class = \"sf\")\n\nallegheny_county_tracts <- st_erase(allegheny_county_tracts, ac_water)\n```\n:::\n\n\nThen I download the [\"Origin-Destination\" LODES](https://lehd.ces.census.gov/data/) file from the Census for Pennsylvania in 2017 and subset it to commuters within Allegheny County.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_a47b024db6727ab01f1cb8220ad2d07d'}\n\n```{.r .cell-code}\n#load od tract-level data\nlodes_od_ac_main <- grab_lodes(state = \"pa\", year = 2017, \n                               lodes_type = \"od\", job_type = \"JT00\", \n                               segment = \"S000\", state_part = \"main\", \n                               agg_geo = \"tract\", use_cache = TRUE) %>%\n  select(state, w_tract, h_tract, S000, year) %>% \n  rename(commuters = S000) %>% \n  mutate(intra_tract_commute = h_tract == w_tract) %>% \n  semi_join(allegheny_county_tracts, by = c(\"w_tract\" = \"GEOID\")) %>% \n  semi_join(allegheny_county_tracts, by = c(\"h_tract\" = \"GEOID\"))\n```\n:::\n\n\nThis analysis only considers routes where the commuter changed census tracts. 96% of commuters in Allegheny County change census tracts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlodes_od_ac_main %>% \n  group_by(intra_tract_commute) %>% \n  summarize(commuters = sum(commuters)) %>% \n  ungroup() %>% \n  mutate(pct = commuters / sum(commuters))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 Ã— 3\n  intra_tract_commute commuters    pct\n  <lgl>                   <dbl>  <dbl>\n1 FALSE                  465637 0.963 \n2 TRUE                    18127 0.0375\n```\n:::\n:::\n\n\n## Get directions\n\nThis is the code that identifies the center of each tract, geocodes those centroids to get an address, and gets the turn-by-turn directions and route data for each pair of home and work addresses. I will focus on the top 20% of these routes (in terms of cumulative percent of commuters) because the Mapbox API is not designed for the size of query I would need to get directions for all combinations of census tracts.\n\nNote that I manually replaced the geocoded address for the Wexford and Swissvale areas because the geocoder returned results outside of the county, probably because the center of those tracts intersect with highways.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#filter out rows where commuter doesn't change tracts\ncombined_tract_sf <- lodes_od_ac_main %>%\n  arrange(desc(commuters)) %>% \n  filter(w_tract != h_tract)\n\n#calculate cumulative pct of commuters, keep only top 20%\ncombined_tract_sf_small <- combined_tract_sf %>% \n  select(h_tract, w_tract, commuters) %>% \n  arrange(desc(commuters)) %>% \n  mutate(id = row_number(),\n         pct_commuters = commuters / sum(commuters),\n         cumulative_pct_commuters = cumsum(pct_commuters)) %>%\n  filter(cumulative_pct_commuters < .2) %>%\n  select(h_tract, w_tract, commuters)\n\n#add census centroid geometry\ncombined_tract_sf_small <- combined_tract_sf_small %>% \n  left_join(st_centroid(allegheny_county_tracts), by = c(\"h_tract\" = \"GEOID\")) %>% \n  rename(h_tract_geo = geometry) %>% \n  left_join(st_centroid(allegheny_county_tracts), by = c(\"w_tract\" = \"GEOID\")) %>% \n  rename(w_tract_geo = geometry) %>% \n  select(h_tract, h_tract_geo, w_tract, w_tract_geo, commuters)\n\ncombined_tract_sf_small |> \n  st_sf() |> \n  ggplot() +\n  geom_sf(data = allegheny_county_tracts) +\n  geom_sf()\n\n#get addresses for tract centroids\ntract_od_directions <- combined_tract_sf_small %>%\n  mutate(home_address = map_chr(h_tract_geo, mb_reverse_geocode),\n         work_address = map_chr(w_tract_geo, mb_reverse_geocode))\n\n#replace bad address with good address\nwexford_good_address <- \"3321 Wexford Rd, Gibsonia, PA 15044\"\nswissvale_good_address <- \"1118 S Braddock Ave, Swissvale, PA 15218\"\n\ntract_od_directions <- tract_od_directions %>% \n  #fix wexford address\n  mutate(home_address = case_when(h_tract == \"42003409000\" ~ wexford_good_address,\n                                  h_tract != \"42003409000\" ~ home_address),\n         work_address = case_when(w_tract == \"42003409000\" ~ wexford_good_address,\n                                  w_tract != \"42003409000\" ~ work_address)) |> \n  #fix swissvale address\n  mutate(home_address = case_when(h_tract == \"42003515401\" ~ swissvale_good_address,\n                                  TRUE ~ home_address))\n\n#define error-safe mb_directions function\nmb_directions_possibly <- possibly(mb_directions, otherwise = NA)\n\n#geocode addresses, get directions\ntract_od_directions <- tract_od_directions %>% \n  mutate(home_address_location_geocoded = map(home_address, mb_geocode),\n         work_address_location_geocoded = map(work_address, mb_geocode)) %>% \n  mutate(directions = map2(home_address, work_address, ~ mb_directions_possibly(origin = .x,\n                                                                       destination = .y,\n                                                                       steps = TRUE,\n                                                                       profile = \"driving\"))) %>% \n  select(h_tract, h_tract_geo, home_address, home_address_location_geocoded,\n         w_tract, w_tract_geo, work_address, work_address_location_geocoded,\n         directions, commuters)\n```\n:::\n\n\n\n\nThe core of the above code is combining `map2` and `mb_directions_possibly`. This maps the `mb_directions_possibly` function against two inputs (the home address and work address).\n\nThe result is a dataframe with a row per turn-by-turn direction for each commuter route.\n\n\n\n\n\nThis summarizes the data so there is one row per commuter route and creates summarized route data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#summarize direction data\ntract_od_stats <- tract_od_directions %>% \n  group_by(h_tract, home_address, w_tract, work_address) %>%\n  summarize(duration = sum(duration),\n            distance = sum(distance),\n            steps = n(),\n            commuters = unique(commuters)) %>% \n  ungroup()\n```\n:::\n\n\nAs expected, route duration and distance are highly correlated. The median duration of a trip is 16.7 minutes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#graph od stats\ntract_od_stats %>% \n  ggplot(aes(distance, duration, size = commuters)) +\n  geom_point(alpha = .3) +\n  geom_abline(linetype = 2, color = \"red\") +\n  coord_equal() +\n  theme_ipsum() +\n  labs(title = \"Commutes between census tracts\",\n       subtitle = \"Allegheny County, PA\",\n       x = \"Distance in KM\",\n       y = \"Duration in minutes\",\n       size = \"Commuters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian_duration <- tract_od_stats %>% \n  uncount(weights = commuters) %>% \n  summarize(median_duration = median(duration)) %>% \n  pull(median_duration)\n\ntract_od_stats %>% \n  uncount(weights = commuters) %>% \n  ggplot(aes(duration)) +\n  geom_density(fill = \"grey\") +\n  geom_vline(xintercept = median_duration, lty = 2, color = \"red\") +\n  annotate(\"text\", x = 21, y = .05, label = \"median\", color = \"red\") +\n  theme_ipsum() +\n  labs(title = \"Trip duration\",\n       x = \"Duration in minutes\",\n       y = \"Density of observations\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThis map shows the main roads that commuter routes use I-376, I-279, and Route 28 are major arteries, as expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#map routes\ntract_od_stats %>% \n  ggplot() +\n  geom_sf(data = allegheny_county_tracts, linewidth = .1, fill = \"black\") +\n  geom_sf(aes(alpha = commuters, linewidth = commuters), color = \"#ffcc01\", alpha = .1) +\n  guides(linewidth = guide_legend(override.aes= list(alpha = 1))) +\n  scale_linewidth_continuous(range = c(.1, 5)) +\n  theme_void() +\n  labs(title = \"Commuter routes between Allegheny County census tracts\",\n       subtitle = \"Driving routes\",\n       linewidth = \"Commuters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nA high-resolution image of this map is available [here](https://raw.githubusercontent.com/conorotompkins/lodes/master/output/commute_path_road_map.png). An animation of the routes is [here](https://raw.githubusercontent.com/conorotompkins/lodes/master/output/animated_route_steps.gif).\n\nPeople that live closer to downtown Pittsburgh have shorter commutes, on average.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny_county_tracts %>% \n  st_drop_geometry() %>% \n  left_join(tract_od_stats %>% \n              st_drop_geometry() |> \n              select(h_tract, w_tract, duration) %>% \n              pivot_longer(contains(\"tract\")) %>% \n              group_by(name, value) %>% \n              summarize(avg_duration = mean(duration)) %>% \n              ungroup(),\n            by = c(\"GEOID\" = \"value\")) %>% \n  complete(GEOID, name) %>% \n  filter(!is.na(name)) %>% \n  left_join(allegheny_county_tracts, by = \"GEOID\") %>%\n  mutate(name = case_when(name == \"h_tract\" ~ \"Origin tract\",\n                          name == \"w_tract\" ~ \"Destination tract\"),\n         name = as.factor(name) %>% fct_rev()) %>% \n  st_sf() %>% \n  ggplot() +\n  geom_sf(aes(fill = avg_duration), size = .1) +\n  facet_wrap(~name, ncol = 1) +\n  scale_fill_viridis_c(na.value = \"grey90\") +\n  labs(title = \"Average commute duration\",\n       fill = \"Minutes\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Model\n\nThe next step is to create a model that estimates the duration of a given commute. I will use the number of steps in the turn-by-turn directions and the distance as predictors. Additionally, I will calculate which rivers a commute route crosses and use those as logical variables in the model.\n\nThis collects the geometry for the main rivers in the county.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_rivers <- ac_water %>% \n  group_by(FULLNAME) %>% \n  summarize(AWATER = sum(AWATER)) %>% \n  arrange(desc(AWATER)) %>% \n  slice(1:4)\n```\n:::\n\n\nThis code calculates whether a given commuter route crosses a river.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntract_od_stats_rivers <- tract_od_stats %>% \n  mutate(intersects_ohio = st_intersects(., main_rivers %>% \n                                           filter(FULLNAME == \"Ohio Riv\")) %>% as.logical(),\n         intersects_allegheny = st_intersects(., main_rivers %>% \n                                                filter(FULLNAME == \"Allegheny Riv\")) %>% as.logical(),\n         intersects_monongahela = st_intersects(., main_rivers %>% \n                                                  filter(FULLNAME == \"Monongahela Riv\")) %>% as.logical(),\n         intersects_youghiogheny = st_intersects(., main_rivers %>% \n                                                   filter(FULLNAME == \"Youghiogheny Riv\")) %>% as.logical()) %>% \n  replace_na(list(intersects_ohio = FALSE,\n                  intersects_allegheny = FALSE,\n                  intersects_monongahela = FALSE,\n                  intersects_youghiogheny = FALSE)) %>% \n  st_drop_geometry()\n\nglimpse(tract_od_stats_rivers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 780\nColumns: 12\n$ h_tract                 <chr> \"42003020100\", \"42003020300\", \"42003030500\", \"â€¦\n$ home_address            <chr> \"445 Wood Street, Pittsburgh, Pennsylvania 152â€¦\n$ w_tract                 <chr> \"42003982200\", \"42003020100\", \"42003020100\", \"â€¦\n$ work_address            <chr> \"4215 Fifth Avenue, Pittsburgh, Pennsylvania 1â€¦\n$ duration                <dbl> 14.087, 9.225, 7.460, 10.951, 2.510, 10.517, 1â€¦\n$ distance                <dbl> 5.6640, 2.6518, 1.5922, 3.4968, 0.7169, 4.2762â€¦\n$ steps                   <int> 8, 7, 7, 5, 6, 6, 9, 7, 10, 11, 14, 10, 10, 8,â€¦\n$ commuters               <dbl> 58, 106, 287, 68, 81, 129, 87, 121, 116, 59, 1â€¦\n$ intersects_ohio         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSâ€¦\n$ intersects_allegheny    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSâ€¦\n$ intersects_monongahela  <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSâ€¦\n$ intersects_youghiogheny <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSâ€¦\n```\n:::\n\n```{.r .cell-code}\ntract_od_stats_rivers <- tract_od_stats_rivers %>% \n  mutate(od_id = str_c(\"h_tract: \", h_tract, \", \", \"w_tract: \", w_tract, sep = \"\"))\n```\n:::\n\n\nFirst I set the seed and split the data into training and testing sets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\n#split data\nsplits <- initial_split(tract_od_stats_rivers, prop = .75)\n\ntraining_data <- training(splits)\ntesting_data <- testing(splits)\n```\n:::\n\n\nThen I use `{tidymodels}` to define a linear model, cross-validate it, and extract the coefficients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#recipe\nmodel_recipe <- recipe(duration ~ ., \n                       data = training_data) %>% \n  update_role(od_id, new_role = \"id\") %>%\n  step_rm(h_tract, home_address, w_tract, work_address, commuters) %>% \n  step_normalize(distance, steps) %>% \n  step_zv(all_predictors())\n\nmodel_recipe %>% \n  prep() %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 Ã— 4\n  variable                type      role      source  \n  <chr>                   <list>    <chr>     <chr>   \n1 distance                <chr [2]> predictor original\n2 steps                   <chr [2]> predictor original\n3 intersects_ohio         <chr [1]> predictor original\n4 intersects_allegheny    <chr [1]> predictor original\n5 intersects_monongahela  <chr [1]> predictor original\n6 intersects_youghiogheny <chr [1]> predictor original\n7 od_id                   <chr [3]> id        original\n8 duration                <chr [2]> outcome   original\n```\n:::\n\n```{.r .cell-code}\nmodel_recipe_prep <- model_recipe %>% \n  prep()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#apply cv to training data\ntraining_vfold <- vfold_cv(training_data, v = 10, repeats = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#model specification\nlm_model <- linear_reg(mode = \"regression\") %>% \n  set_engine(\"lm\")\n\n#linear regression workflow\nlm_workflow <- workflow() %>% \n  add_recipe(model_recipe) %>% \n  add_model(lm_model)\n\n#fit against training resamples\nkeep_pred <- control_resamples(save_pred = TRUE)\n\nlm_training_fit <- lm_workflow %>% \n  fit_resamples(training_vfold, control = keep_pred) %>% \n  mutate(model = \"lm\")\n\n#get results from training cv\nlm_training_fit %>% \n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 Ã— 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   2.88     20 0.0590  Preprocessor1_Model1\n2 rsq     standard   0.870    20 0.00571 Preprocessor1_Model1\n```\n:::\n:::\n\n\nThe model averaged an R-squared of .82 on the training data, which is pretty good.\n\nThe predictions from the training set fit the actual duration pretty well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#graph predictions from assessment sets\nlm_training_fit %>% \n  collect_predictions() %>% \n  ggplot(aes(duration, .pred)) +\n  geom_point(alpha = .3) +\n  geom_abline(linetype = 2, color = \"red\") +\n  coord_equal() +\n  labs(x = \"Actual duration\",\n       y = \"Predicted duration\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nNext I fit the model against the test data to extract the coefficients. Holding the other variables constant, distance is by far the most influential variable in the model. For every kilometer increase in distance, the duration of the commute can be expected to increase by around 5 minutes. Crossing the Monongahela will add around 2 minutes to a commute, while crossing the Allegheny and Ohio actually decrease commute times. This is probably related to the bridge that the commuter uses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#variable importance\nlm_workflow %>% \n  fit(testing_data) %>% \n  pull_workflow_fit() %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% \n  mutate(term = fct_reorder(term, estimate)) %>% \n  ggplot(aes(estimate, term)) +\n  geom_col(fill = \"grey\", color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nThis fits the model to the full dataset and plots the predicted duration against the actual duration. The fit is tighter than just plotting distance vs. duration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#final model\ntract_od_pred <- lm_workflow %>% \n  fit(testing_data) %>% \n  predict(tract_od_stats_rivers) %>% \n  bind_cols(tract_od_stats_rivers) %>% \n  select(h_tract, w_tract, distance, steps, duration, .pred, commuters)\n\ntract_od_pred %>% \n  ggplot(aes(duration, .pred, size = commuters)) +\n  geom_point(alpha = .3) +\n  geom_abline(lty = 2, color = \"red\") +\n  coord_equal() +\n  labs(x = \"Duration in minutes\",\n       y = \"Predicted duration\",\n       size = \"Number of commuters\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nThis calculates how far off the model's estimation of duration was for each census tract in the dataset (origin and destination). Commuters originating from neighborhoods between State Route 51 and the Monongahela River experience longer than expected commutes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nallegheny_county_tracts %>% \n  st_drop_geometry() %>% \n  left_join(tract_od_pred %>% \n              mutate(.resid = duration - .pred) %>% \n              select(h_tract, w_tract, .resid) %>% \n              pivot_longer(contains(\"tract\")) %>% \n              group_by(name, value) %>% \n              summarize(avg_resid = mean(.resid)) %>% \n              ungroup(),\n            by = c(\"GEOID\" = \"value\")) %>% \n  complete(GEOID, name) %>% \n  filter(!is.na(name)) %>% \n  left_join(allegheny_county_tracts) %>%\n  mutate(name = case_when(name == \"h_tract\" ~ \"Origin tract\",\n                          name == \"w_tract\" ~ \"Destination tract\"),\n         name = as.factor(name) %>% fct_rev()) %>% \n  st_sf() %>% \n  ggplot() +\n  geom_sf(aes(fill = avg_resid), size = .1) +\n  facet_wrap(~name, ncol = 1) +\n  scale_fill_viridis_c(na.value = \"grey90\") +\n  labs(title = \"Commute duration above/below expected\",\n       fill = \"Minutes\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}