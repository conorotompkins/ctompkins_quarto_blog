{
  "hash": "ba00c9826f413f91422c291dd2230ff0",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\ntitle: \"Roughly Calculating Allegheny County Transit Efficiency\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, WPRDC, Allegheny County, Transit]\ncategories: [R, WPRDC, Allegheny County, Transit]\ndate: 2020-04-04\nlastmod: 2020-08-12T09:43:40-04:00\nfeatured: false\ndraft: false\n# Focal points: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight.\nimage: featured.png\nprojects: []\nexecute:\n  echo: true\n  warning: false\n  message: false\neditor_options: \n  chunk_output_type: console\n---\n\n\nAs part my work on transit lines in Allegheny County, I am interested in which transit lines are most efficient, in terms of residents and jobs served. This is possible with the Port Authority transit line datasets [hosted on the WPRDC](https://data.wprdc.org/dataset/port-authority-current-transit-routes) and data from the Census.\n\nLoad libraries and set up the environment:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(janitor)\nlibrary(ggrepel)\nlibrary(hrbrthemes)\n\noptions(scipen = 999, digits = 2,\n        fig.width = 9,\n        fig.height = 9)\n\ntheme_set(theme_bw())\n```\n:::\n\n\nThis loads the summarized LODES census tract data ([munging script here](https://github.com/conorotompkins/commuter_route_transit_availability/blob/master/scripts/munge_data.R))\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tract_centroid_summary <- st_read(\"post_data/shapefiles/tract_centroid_summary/tract_centroid_summary.shp\")\n```\n:::\n\n\nTo recap, the distribution of jobs and residents across census tracts is vaguely normal. The main outlier in the \"jobs\" measure is the census tract for the Golden Triangle (Downtown).\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tract_centroid_summary %>% \n  select(GEOID, residents, jobs) %>% \n  st_drop_geometry() %>% \n  pivot_longer(cols = c(residents, jobs), names_to = \"measure\", values_to = \"value\") %>% \n  ggplot(aes(value, fill = measure)) +\n    geom_density() +\n    facet_wrap(~str_to_title(measure), ncol = 1, scales = \"free\") +\n    scale_x_log10() +\n    guides(fill = \"none\") +\n    labs(x = \"Log 10 scale\",\n         y = \"Density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tract_centroid_summary %>% \n  ggplot(aes(residents, jobs)) +\n    geom_point() +\n    geom_label_repel(data = df_tract_centroid_summary %>% filter(jobs == max(jobs)),\n                     label = \"Downtown\") +\n    scale_y_comma() +\n    scale_x_comma() +\n    labs(x = \"Residents\",\n         y = \"Jobs\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis code grabs the shapefile with the transit route stats and stop geometry. This [code](https://github.com/conorotompkins/commuter_route_transit_availability/blob/master/scripts/munge_data.R):\n\n* calculates how many residents and jobs are in each census tract\n* calculates which transit lines stops serve which census tracts\n* summarizes how many residents and jobs a transit line servers\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_route_stats <- st_read(\"post_data/shapefiles/route_stats/route_stats.shp\") %>% \n  rename(route_id = route_d,\n         service_type = srvc_ty,\n         residents = resdnts,\n         stop_count = stp_cnt,\n         route_name = rout_nm,\n         route_length_miles = rt_lng_,\n         stops_per_mile = stps_p_)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_route_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 102 features and 8 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -80 ymin: 40 xmax: -80 ymax: 41\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   route_id service_type   jobs residents stop_count       route_name\n1         1        Local  21282     10119        224    Freeport Road\n2        11        Local    998      4102         62         Fineview\n3        12        Local   4640      2406        112         McKnight\n4        13        Local  26667     15659        140         Bellevue\n5        14        Local  31869     10017        140      Ohio Valley\n6        15        Local  21376      3934         98          Charles\n7        16 Key Corridor  22588      7712        124         Brighton\n8        17        Local  30226     10285        108        Shadeland\n9        18        Local   8380      4746         47       Manchester\n10      19L      Express 294211     18845         94 Emsworth Limited\n   route_length_miles stops_per_mile                       geometry\n1                44.4            5.0 MULTIPOINT ((-80 40), (-80 ...\n2                 5.6           11.1 MULTIPOINT ((-80 40), (-80 ...\n3                30.6            3.7 MULTIPOINT ((-80 41), (-80 ...\n4                15.5            9.0 MULTIPOINT ((-80 40), (-80 ...\n5                33.4            4.2 MULTIPOINT ((-80 41), (-80 ...\n6                 8.9           11.0 MULTIPOINT ((-80 40), (-80 ...\n7                 8.3           15.0 MULTIPOINT ((-80 41), (-80 ...\n8                13.0            8.3 MULTIPOINT ((-80 40), (-80 ...\n9                 5.0            9.5 MULTIPOINT ((-80 40), (-80 ...\n10               15.6            6.0 MULTIPOINT ((-80 41), (-80 ...\n```\n:::\n:::\n\n\nThis is a basic plot of all the transit stops in the county:\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_route_stats %>% \n  ggplot() +\n    geom_sf(size = .1, alpha = .5) +\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThe immediate question that comes to mind is \"how many residents and jobs does a transit line serve?\". Keep in mind that more than one transit line can serve a given resident or job. This shows that the \"Key Corridor\" lines serve the most jobs.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_route_stats %>% \n  ggplot(aes(jobs, residents, fill = service_type)) +\n    geom_label(aes(label = route_id), alpha = .5) +\n    scale_x_comma() +\n    scale_y_comma() +\n    scale_fill_discrete(\"Service type\") +\n    labs(x = \"Jobs served\",\n         y = \"Residents served\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThis graph compares how many residents/jobs a transit line serves to how long the line is. The 28X and P10 are the least efficient in both cases. However, the 28X serves the Pittsburgh International Airport, and that utility is not captured in this analysis.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_route_stats %>% \n  filter(!is.na(route_id)) %>% \n  select(route_id, service_type, route_length_miles, residents, jobs) %>% \n  pivot_longer(cols = c(residents, jobs), names_to = \"variable\", values_to = \"value\") %>% \n  ggplot(aes(route_length_miles, value, fill = service_type)) +\n    geom_label(aes(label = route_id), alpha = .5) +\n    facet_wrap(~str_to_title(str_c(variable, \"served\", sep = \" \")),\n               scales = \"free_y\",\n               ncol = 1,\n               strip.position = \"left\") +\n    scale_y_comma() +\n    scale_fill_discrete(\"Service Type\") +\n    labs(x = \"Route length (miles)\",\n         y = NULL) +\n    theme(strip.text = element_text(hjust = .5),\n          strip.background = element_rect(color = \"grey\"),\n          strip.placement = \"outside\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis performs a similar comparison, but uses the number of stops per line instead of line distance. The 71/61 lines are very efficient in terms of jobs/stops, and the 59 appears to be the most inefficient.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_route_stats %>% \n  filter(!is.na(route_id)) %>% \n  select(route_id, service_type, stop_count, residents, jobs) %>% \n  pivot_longer(cols = c(residents, jobs), names_to = \"variable\", values_to = \"value\") %>% \n  ggplot(aes(stop_count, value, fill = service_type)) +\n    geom_label(aes(label = route_id), alpha = .5) +\n    facet_wrap(~str_to_title(str_c(variable, \"served\", sep = \" \")),\n               scales = \"free_y\",\n               ncol = 1,\n               strip.position = \"left\") +\n    scale_y_comma() +\n    scale_fill_discrete(\"Service type\") +\n    labs(x = \"Number of stops\",\n         y = NULL) +\n    theme(strip.text = element_text(hjust = .5),\n          strip.background = element_rect(color = \"grey\"),\n          strip.placement = \"outside\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nIn terms of stops per mile, the Express lines are most efficient. The incline lines are least efficient, but that is an artifact of their unique geography.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_route_stats %>% \n  filter(!is.na(route_id)) %>% \n  select(route_id, service_type, stops_per_mile, residents, jobs) %>% \n  pivot_longer(cols = c(residents, jobs), names_to = \"variable\", values_to = \"value\") %>% \n  ggplot(aes(stops_per_mile, value, fill = service_type)) +\n    geom_label(aes(label = route_id), alpha = .5) +\n    facet_wrap(~str_to_title(str_c(variable, \"served\", sep = \" \")), \n               scales = \"free_y\",\n               ncol = 1,\n               strip.position = \"left\") +\n    scale_y_comma() +\n    scale_fill_discrete(\"Service type\") +\n    labs(x = \"Stops per mile\",\n         y = NULL) +\n    theme(strip.text = element_text(hjust = .5),\n          strip.background = element_rect(color = \"grey\"),\n          strip.placement = \"outside\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThis graph attempts to summarize everything by adding residents + jobs and comparing that to stops per mile. The \"Express\" and \"Key Corridor\" lines do the best here.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- df_route_stats %>% \n  filter(!is.na(route_id)) %>% \n  select(route_id, service_type, stops_per_mile, residents, jobs) %>% \n  mutate(residents_plus_jobs = residents + jobs) %>% \n  ggplot(aes(stops_per_mile, residents_plus_jobs, fill = service_type, label = route_id)) +\n    geom_label(alpha = .5) +\n    labs(x = \"Stops per mile\",\n         y = \"Residents plus jobs served\",\n         caption = \"'Served' means the line came within 200 meters of the center of a census tract\") +\n    scale_x_continuous(expand = c(.1, .1)) +\n    scale_y_comma(expand = c(.1, .1)) +\n    scale_fill_discrete(\"Service type\") +\n    facet_wrap(vars(service_type), ncol = 1) +\n  theme(legend.position = \"bottom\")\n\nplot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}