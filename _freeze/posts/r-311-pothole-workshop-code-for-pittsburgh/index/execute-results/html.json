{
  "hash": "04ea1875e4afbff2225dca235529e32e",
  "result": {
    "engine": "knitr",
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\n\ntitle: \"R 311 Pothole Workshop Code for Pittsburgh\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [WPRDC, Pittsburgh, Potholes, Code for Pittsburgh]\ncategories: [WPRDC, Pittsburgh, Potholes, Code for Pittsburgh]\ndate: 2018-04-18\nlastmod: 2020-09-27T13:29:17-04:00\nfeatured: false\ndraft: false\nexecute: \n  echo: true\n  warning: false\n  message: false\n---\n\n\n\nThis material was presented at Code & Supply in 2018.\n\n# Goals\n\n-   Learn how R works\n-   Gain basic skills for exploratory analysis with R\n-   Learn something about local data and potholes!\n\nIf we are successful, you should be able to hit the ground running on your own project with R\n\n# Setup\n\nInstall R from [CRAN](https://cran.r-project.org/)\n\n-   Use the default options in the installation process\n\nInstall RStudio from [RStudio](https://www.rstudio.com/products/rstudio/#Desktop)\n\n-   RStudio Desktop\n\n# What is R\n\nR is an interpreted programming language for statistics\n\n### RStudio\n\nIntegrated Development Environment for R\n\n1.  Code editor\n2.  Console\n3.  Workspace (Environment, History, Connections, Git)\n4.  Plots and Files (Packages, Help, Viewer)\n\nWe will enter our code in the Code Editor panel. When you execute code in the code editor, the output is shown in the Console (or the Plots or Viewer) panel.\n\n![](rstudio_image.png) [Image from the STHDA](http://www.sthda.com/english/wiki/running-rstudio-and-setting-up-your-working-directory-easy-r-programming)\n\nInstall the tidyverse, lubridate, and ggmap packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"lubridate\", \"ggmap\"))\n#you will see activity in the console as the packages are installed\n```\n:::\n\n\n\nCreate a folder called \"R workshop\"\n\nDownload the 311 data from the [WPRDC](https://data.wprdc.org/dataset/311-data)\n\nMove that CSV into the \"R workshop\" folder\n\n# How Does R Work?\n\n## Basic Functions\n\n-   add\n-   subtract\n-   strings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n5 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n\"this is a string. strings in R are surrounded by quotation marks.\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"this is a string. strings in R are surrounded by quotation marks.\"\n```\n\n\n:::\n:::\n\n\n\nType matters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"1\" + 1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in \"1\" + 1: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n\nstr() checks the type of the object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num 1\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(\"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr \"1\"\n```\n\n\n:::\n:::\n\n\n\n## Objects, Functions, and Assignment\n\nReminder that objects are shown in the Environment panel (top right panel)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'x' not found\n```\n\n\n:::\n:::\n\n\n\nYou assign values to objects using \"\\<-\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\nx \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\nType out the object's name and execute it to print it in the console\n\nYou can overwrite (or update) an object's value\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\nYou can manipulate objects with operators\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\ny <- 5\n\nx + y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\nc() means \"concatenate\". It creates vectors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(x, y)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 5\n```\n\n\n:::\n:::\n\n\n\n: creates a sequence of numbers\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n\nYou can perform functions on objects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- sum(a)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n## Dataframes\n\nDataframes are rectangular objects that consist of rows and columns, similar to what you see in an Excel spreadsheet\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- data.frame(a = 1:5,\n                b = 6:10,\n                c = c(\"a\", \"b\", \"c\", \"d\", \"e\"))\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a  b c\n1 1  6 a\n2 2  7 b\n3 3  8 c\n4 4  9 d\n5 5 10 e\n```\n\n\n:::\n:::\n\n\n\nSelect individual columns in a dataframe with the \\$ operator\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df$a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\"\\<-\" and \"=\" do the same thing. To minimize confusion, many people use \"\\<-\" for objects and \"=\" for assigning variables within functions or dataframes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\n\nz <- data.frame(a = 1:5,\n                b = 6:10)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a  b\n1 1  6\n2 2  7\n3 3  8\n4 4  9\n5 5 10\n```\n\n\n:::\n:::\n\n\n\n## Logic\n\n\"x == y\" means \"is x equal to y?\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\"!\" means \"not\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n!FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nTRUE = 1, FALSE = 0\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE + FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE + TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\nR is case-sensitive\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"a\" == \"A\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n## Loading packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(package_name)\n```\n:::\n\n\n\nYou have to load your packages each time you start R. Do not use quotation marks in the library() function\n\n## Commenting\n\nAny code that follows a \"\\#\" is treated as a comment, and is not executed\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n#1 + 1\n#code that is \"commented out\" will not be executed\n```\n:::\n\n\n\nComment your code to make sure you understand it. It is aso useful to other people who use your code, including Future You.\n\nBe kind to Future You. Comment your code.\n\n## Getting help with R\n\nUse the built-in documentation. Put a \"?\" before the name of a function to access the documentation in the Help panel\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n\n[StackOverflow](https://stackoverflow.com/questions/tagged/r?sort=frequent&pageSize=15)\n\n## Working Directory\n\nThe working directory is where your R scripts and your data are stored\n\n### How to set up the working directory\n\nThis command prints the current working directory\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\nUse the menu to set up your working directory\n\nSession menu -\\> Set working directory -\\> choose your folder\n\nThis command does the same thing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd()\n```\n:::\n\n\n\n## Compare to Excel\n\nR separates the data from the analysis. The data is stored in files (CSV, JSON, etc). The analysis is stored in scripts. This makes it easier to share analysis performed in R. No need to take screenshots of your workflow in Excel. You have a record of everything that was done to the data. R also allows you to scale your analysis up to larger datasets and more complex workflows, where Excel would require lots of risky repetition of the same task.\n\n# What is the Tidyverse?\n\nA group of R packages that use a common grammar for wrangling, analyzing, modeling, and graphing data\n\n-   Focus on dataframes\n-   Columns and rows\n\n## Key Tidyverse functions and operators\n\n-   **select** columns\n-   **filter** rows\n-   **mutate** new columns\n-   **group_by** and **summarize** rows\n-   **ggplot2** your data\n-   The pipe %\\>%\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\n```\n:::\n\n\n\nread_csv() reads CSV files from your working directory\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\"your_file_name_here.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df) <- tolower(colnames(df)) #make all the column names lowercase\n\n#initial data munging to get the dates in shape\ndf %>%\n  mutate(date = ymd(str_sub(created_on, 1, 10)),\n         time = hms(str_sub(created_on, 11, 18)),\n         month = month(date, label = TRUE), \n         year = year(date),\n         yday = yday(date)) %>% \n  select(-c(created_on, time)) -> df\n```\n:::\n\n\n\nExplore the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf #type the name of the object to preview it\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 225,189 × 21\n    `_id` request_id request_type  request_origin status department neighborhood\n    <dbl>      <dbl> <chr>         <chr>           <dbl> <chr>      <chr>       \n 1 154245      54111 Rodent contr… Call Center         1 Animal Ca… Middle Hill \n 2 154246      53833 Rodent contr… Call Center         1 Animal Ca… Squirrel Hi…\n 3 154247      52574 Potholes      Call Center         1 DPW - Str… Larimer     \n 4 154248      54293 Building Wit… Control Panel       1 Permits, … <NA>        \n 5 154249      53560 Potholes      Call Center         1 DPW - Str… Homewood No…\n 6 154250      49519 Potholes      Call Center         1 DPW - Str… Homewood No…\n 7 154251      49484 Potholes      Call Center         1 DPW - Str… Homewood No…\n 8 154252      53787 Rodent contr… Call Center         1 Animal Ca… South Side …\n 9 154253      52887 Potholes      Call Center         1 DPW - Str… East Hills  \n10 154254      53599 Rodent contr… Call Center         1 Animal Ca… East Allegh…\n# ℹ 225,179 more rows\n# ℹ 14 more variables: council_district <dbl>, ward <dbl>, tract <dbl>,\n#   public_works_division <dbl>, pli_division <dbl>, police_zone <dbl>,\n#   fire_zone <chr>, x <dbl>, y <dbl>, geo_accuracy <chr>, date <date>,\n#   month <ord>, year <dbl>, yday <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df) #get a summary of the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 225,189\nColumns: 21\n$ `_id`                 <dbl> 154245, 154246, 154247, 154248, 154249, 154250, …\n$ request_id            <dbl> 54111, 53833, 52574, 54293, 53560, 49519, 49484,…\n$ request_type          <chr> \"Rodent control\", \"Rodent control\", \"Potholes\", …\n$ request_origin        <chr> \"Call Center\", \"Call Center\", \"Call Center\", \"Co…\n$ status                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ department            <chr> \"Animal Care & Control\", \"Animal Care & Control\"…\n$ neighborhood          <chr> \"Middle Hill\", \"Squirrel Hill North\", \"Larimer\",…\n$ council_district      <dbl> 6, 8, 9, NA, 9, 9, 9, 3, 9, 1, 4, 4, 9, 9, 9, 7,…\n$ ward                  <dbl> 5, 14, 12, NA, 13, 13, 13, 16, 13, 23, 19, 32, 1…\n$ tract                 <dbl> 42003050100, 42003140300, 42003120800, NA, 42003…\n$ public_works_division <dbl> 3, 3, 2, NA, 2, 2, 2, 4, 2, 1, 4, 4, 2, 2, 2, 2,…\n$ pli_division          <dbl> 5, 14, 12, NA, 13, 13, 13, 16, 13, 23, 19, 32, 1…\n$ police_zone           <dbl> 2, 4, 5, NA, 5, 5, 5, 3, 5, 1, 6, 3, 5, 5, 4, 5,…\n$ fire_zone             <chr> \"2-1\", \"2-18\", \"3-12\", NA, \"3-17\", \"3-17\", \"3-17…\n$ x                     <dbl> -79.97765, -79.92450, -79.91455, NA, -79.89539, …\n$ y                     <dbl> 40.44579, 40.43986, 40.46527, NA, 40.45929, 40.4…\n$ geo_accuracy          <chr> \"APPROXIMATE\", \"APPROXIMATE\", \"EXACT\", \"OUT_OF_B…\n$ date                  <date> 2016-03-10, 2016-03-09, 2016-03-03, 2016-03-11,…\n$ month                 <ord> Mar, Mar, Mar, Mar, Mar, Feb, Feb, Mar, Mar, Mar…\n$ year                  <dbl> 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, …\n$ yday                  <dbl> 70, 69, 63, 71, 68, 53, 53, 69, 64, 68, 69, 71, …\n```\n\n\n:::\n:::\n\n\n\n### The pipe\n\n%\\>% means \"and then\"\n\n%\\>% passes the dataframe to the next function\n\n### select\n\nselect() selects the columns you want to work with. You can also exclude columns using \"-\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% #select the dataframe\n  select(date, request_type) #select the date and request_type columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 225,189 × 2\n   date       request_type             \n   <date>     <chr>                    \n 1 2016-03-10 Rodent control           \n 2 2016-03-09 Rodent control           \n 3 2016-03-03 Potholes                 \n 4 2016-03-11 Building Without a Permit\n 5 2016-03-08 Potholes                 \n 6 2016-02-22 Potholes                 \n 7 2016-02-22 Potholes                 \n 8 2016-03-09 Rodent control           \n 9 2016-03-04 Potholes                 \n10 2016-03-08 Rodent control           \n# ℹ 225,179 more rows\n```\n\n\n:::\n:::\n\n\n\n### filter\n\nfilter() uses logic to include or exclude rows based on the criteria you set\n\nYou can translate the following code into this English sentence: Take our dataframe \"df\", and then **select** the date and request_type columns, and then **filter** only the rows where the request_type is \"Potholes\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  select(date, request_type) %>% \n  filter(request_type == \"Potholes\") #use the string \"Potholes\" to filter the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31,735 × 2\n   date       request_type\n   <date>     <chr>       \n 1 2016-03-03 Potholes    \n 2 2016-03-08 Potholes    \n 3 2016-02-22 Potholes    \n 4 2016-02-22 Potholes    \n 5 2016-03-04 Potholes    \n 6 2016-03-11 Potholes    \n 7 2016-03-08 Potholes    \n 8 2016-03-08 Potholes    \n 9 2016-03-08 Potholes    \n10 2016-03-08 Potholes    \n# ℹ 31,725 more rows\n```\n\n\n:::\n:::\n\n\n\n### mutate\n\nmutate() adds new columns, or modifies existing columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  select(date, request_type) %>% \n  filter(request_type == \"Potholes\") %>% \n  mutate(weekday = wday(date, label = TRUE)) #add the wday column for day of the week\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31,735 × 3\n   date       request_type weekday\n   <date>     <chr>        <ord>  \n 1 2016-03-03 Potholes     Thu    \n 2 2016-03-08 Potholes     Tue    \n 3 2016-02-22 Potholes     Mon    \n 4 2016-02-22 Potholes     Mon    \n 5 2016-03-04 Potholes     Fri    \n 6 2016-03-11 Potholes     Fri    \n 7 2016-03-08 Potholes     Tue    \n 8 2016-03-08 Potholes     Tue    \n 9 2016-03-08 Potholes     Tue    \n10 2016-03-08 Potholes     Tue    \n# ℹ 31,725 more rows\n```\n\n\n:::\n:::\n\n\n\n### group_by and summarize\n\ngroup_by() and summarize() allow you to gather groups of rows and perform functions on them\n\nTypical functions\n\n-   sum()\n-   mean()\n-   sd() standard deviation\n-   n() the number of rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df %>% \n  select(date, request_type) %>% #select columns\n  filter(request_type == \"Potholes\") %>% #filter by \"Potholes\"\n  mutate(month = month(date, label = TRUE)) %>% #add month column\n  group_by(request_type, month) %>% #group by the unqiue request_type values and month values\n  summarize(count = n()) %>% #summarize to count the number of rows in each combination of request_type and month\n  arrange(desc(count)) -> df_potholes_month) #arrange the rows by the number of requests\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n# Groups:   request_type [1]\n   request_type month count\n   <chr>        <ord> <int>\n 1 Potholes     Feb    5569\n 2 Potholes     Mar    3961\n 3 Potholes     Apr    3873\n 4 Potholes     May    3388\n 5 Potholes     Jan    3089\n 6 Potholes     Jun    2896\n 7 Potholes     Jul    2688\n 8 Potholes     Aug    1913\n 9 Potholes     Nov    1344\n10 Potholes     Sep    1260\n11 Potholes     Oct    1113\n12 Potholes     Dec     641\n```\n\n\n:::\n:::\n\n\n\nPut your code in parentheses to execute it AND print the output in the console\n\n# Making graphs with 311 data\n\n## ggplot2\n\n-   aesthetics (the columns you want to graph with)\n-   geoms (the shapes you want to use to graph the data)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = _ , aes(x = _, y = _)) +\n  geom_()\n```\n:::\n\n\n\nGraph the number of pothole requests per month\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df_potholes_month, aes(x = month, y = count)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\nPipe your data directly into ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_potholes_month %>% \n  ggplot(aes(x = month, y = count)) + #put the month column on the x axis, count on the y axis\n  geom_col() #graph the data with columns\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\nMake it pretty. Add a title, subtitle, axes labels, captions, and themes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_potholes_month %>% \n  ggplot(aes(month, count)) +\n  geom_col() + \n  labs(title = \"Pothole requests to Pittsburgh 311\",\n       x = \"\",\n       y = \"Number of requests\",\n       caption = \"Source: Western Pennsylvania Regional Datacenter\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\nOne problems with this graph is that the data is not complete for the years 2015 and 2018\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  distinct(year, date) %>% #get the unique combinations of year and date\n  count(year) #shortcut for group_by + summarize for counting. returns column \"n\". calculate how many days of data each year has\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n   year     n\n  <dbl> <int>\n1  2015   231\n2  2016   366\n3  2017   365\n4  2018   100\n```\n\n\n:::\n:::\n\n\n\nInstead of plotting the raw sum, we can calculate and plot the mean number of requests per month\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df %>% \n  filter(date >= \"2016-01-01\", #only select the rows where the date is after 2016-01-01 and before 2018-01-1\n         date <= \"2018-01-01\",\n         request_type == \"Potholes\") %>% \n  count(request_type, year, month) -> df_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 4\n   request_type  year month     n\n   <chr>        <dbl> <ord> <int>\n 1 Potholes      2016 Jan     222\n 2 Potholes      2016 Feb     594\n 3 Potholes      2016 Mar     973\n 4 Potholes      2016 Apr     759\n 5 Potholes      2016 May     822\n 6 Potholes      2016 Jun     784\n 7 Potholes      2016 Jul     604\n 8 Potholes      2016 Aug     556\n 9 Potholes      2016 Sep     364\n10 Potholes      2016 Oct     318\n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filtered %>% \n  group_by(month) %>% \n  summarize(mean_requests = mean(n)) -> df_filtered_months\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_filtered_months %>% \n  ggplot(aes(month, mean_requests)) +\n  geom_col() +\n    labs(title = \"Pothole requests to Pittsburgh 311\",\n       x = \"\",\n       y = \"Mean number of requests\",\n       caption = \"Source: Western Pennsylvania Regional Datacenter\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\nMake a line graph of the number of pothole requests in the dataset by date\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(request_type == \"Potholes\") %>% \n  count(date) #group_by and summarize the number of rows per date\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 983 × 2\n   date           n\n   <date>     <int>\n 1 2015-04-20   119\n 2 2015-04-21   101\n 3 2015-04-22   109\n 4 2015-04-23   102\n 5 2015-04-24    84\n 6 2015-04-27    85\n 7 2015-04-28   101\n 8 2015-04-29   107\n 9 2015-04-30    83\n10 2015-05-01    66\n# ℹ 973 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign labels to objects to save some typing\nmy_title <- \"Pothole requests to Pittsburgh 311\"\nmy_caption <- \"Source: Western Pennsylvania Regional Datacenter\"\n\ndf %>% \n  filter(request_type == \"Potholes\") %>% \n  count(date) %>% \n  ggplot(aes(date, n)) +\n  geom_line() + #use a line to graph the data\n  labs(title = my_title, #use the object you created earlier\n       x = \"\",\n       y = \"Number of requests\",\n       caption = my_caption) + #use the object you created earlier\n  theme_bw(base_size = 18) #base_family modifies the size of the font\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\nNote that ggplot2 automatically formats the axis labels for dates\n\nGraph the data by number of requests per day of the year\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df %>% \n  select(request_type, date) %>% \n  filter(request_type == \"Potholes\") %>% \n  mutate(year = year(date), #create a year column\n         yday = yday(date)) %>% #create a day of the year column\n  count(year, yday) -> df_day_of_year)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 983 × 3\n    year  yday     n\n   <dbl> <dbl> <int>\n 1  2015   110   119\n 2  2015   111   101\n 3  2015   112   109\n 4  2015   113   102\n 5  2015   114    84\n 6  2015   117    85\n 7  2015   118   101\n 8  2015   119   107\n 9  2015   120    83\n10  2015   121    66\n# ℹ 973 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_day_of_year %>% \n  ggplot(aes(yday, n, group = year)) + #color the lines by year. as.factor() turns the year column from integer to factor, which has an inherent order\n  geom_line() + \n  labs(title = my_title,\n       x = \"Day of the year\",\n       y = \"Number of requests\",\n       caption = my_caption) +\n  theme_bw(base_size = 18)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n\nThat plotted a line for each year, but there is no way to tell which line corresponds with which year\n\nColor the lines by the year\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_day_of_year %>% \n  ggplot(aes(yday, n, color = as.factor(year))) + #color the lines by year. #as.factor() turns the year column from integer to factor (ordinal string)\n  geom_line() + \n  labs(title = my_title,\n       x = \"Day of the year\",\n       y = \"Number of requests\",\n       caption = my_caption) +\n  theme_bw(base_size = 18)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n\nGraph the cumulative sum of pothole requests per year\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df %>% \n  select(request_type, date) %>% \n  filter(request_type == \"Potholes\") %>% \n  mutate(year = year(date),\n         yday = yday(date)) %>% \n  arrange(date) %>% #always arrange your data for cumulative sums\n  group_by(year, yday) %>%\n  summarize(n = n()) %>% \n  ungroup() %>% #ungroup () resets whatever grouping you had before\n  group_by(year) %>% \n  mutate(cumsum = cumsum(n)) -> df_cumulative_sum) #calculate the cumulative sum per year\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 983 × 4\n# Groups:   year [4]\n    year  yday     n cumsum\n   <dbl> <dbl> <int>  <int>\n 1  2015   110   119    119\n 2  2015   111   101    220\n 3  2015   112   109    329\n 4  2015   113   102    431\n 5  2015   114    84    515\n 6  2015   117    85    600\n 7  2015   118   101    701\n 8  2015   119   107    808\n 9  2015   120    83    891\n10  2015   121    66    957\n# ℹ 973 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_cumulative_sum %>% \n  ggplot(aes(yday, cumsum, color = as.factor(year))) +\n  geom_line(size = 2) +\n  labs(title = my_title,\n       x = \"Day of the year\",\n       y = \"Cumulative sum of requests\",\n       caption = my_caption) +\n  scale_color_discrete(\"Year\") +\n  theme_bw(base_size = 18)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n\n## Making an area chart\n\nSince 2015 and 2018 have incomplete data, filter them out\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  count(request_type, sort = TRUE) %>% \n  top_n(5) %>% #select the top 5 request types\n  ungroup() -> df_top_requests\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(date >= \"2016-01-01\", #only select the rows where the date is after 2016-01-01 and before 2018-01-1\n         date <= \"2018-01-01\") %>% \n  semi_join(df_top_requests) %>% #joins are ways to combine two dataframes\n  count(request_type, month) %>% \n  ggplot(aes(month, n, group = request_type, fill = request_type)) +\n  geom_area() +\n  scale_fill_discrete(\"Request type\") + #change the name of the color legend\n  scale_y_continuous(expand = c(0, 0)) + #remove the padding around the edges\n  scale_x_discrete(expand = c(0, 0)) +\n  labs(title = \"Top 5 types of 311 requests in Pittsburgh\",\n       subtitle = \"2016 to 2017\",\n       x = \"\",\n       y = \"Number of requests\",\n       caption = my_caption) +\n  theme_bw(base_size = 18) +\n  theme(panel.grid = element_blank()) #remove the gridlines fom the plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/area_chart-1.png){width=672}\n:::\n:::\n\n\n\n## Faceting\n\nFacets allow you to split a chart by a variable\n\nWhere do pothole requests come from?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  count(request_origin, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   request_origin          n\n   <chr>               <int>\n 1 Call Center        143716\n 2 Website             41106\n 3 Control Panel       26144\n 4 Report2Gov iOS       6272\n 5 Twitter              4425\n 6 Report2Gov Android   2371\n 7 Text Message         1086\n 8 Report2Gov Website     42\n 9 Email                  22\n10 QAlert Mobile iOS       5\n```\n\n\n:::\n:::\n\n\n\nMake a line chart for the number of requests per day\n\nUse facets to distinguish where the request came from\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  select(date, request_type, request_origin) %>% \n  filter(request_type == \"Potholes\") %>% \n  count(date, request_type, request_origin) %>% \n  ggplot(aes(x = date, y = n)) +\n    geom_line() +\n    facet_wrap(~request_origin) + #facet by request_origin\n    labs(title = my_title,\n         subtitle = \"By Request Origin\",\n         x = \"\",\n         y = \"Number of requests\",\n         caption = my_caption) +\n    theme_bw(base_size = 18)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n\n## Mapping\n\nLoad the ggmap package, which works with ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggmap)\n```\n:::\n\n\n\nSelect the request_type, x, and y columns. x and y are longitude and latitude\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df %>% \n  select(request_type, x, y) %>% \n  filter(!is.na(x), !is.na(y),\n         request_type == \"Potholes\") -> df_map) #remove missing x and y values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31,735 × 3\n   request_type     x     y\n   <chr>        <dbl> <dbl>\n 1 Potholes     -79.9  40.5\n 2 Potholes     -79.9  40.5\n 3 Potholes     -79.9  40.5\n 4 Potholes     -79.9  40.5\n 5 Potholes     -79.9  40.5\n 6 Potholes     -80.0  40.4\n 7 Potholes     -79.9  40.5\n 8 Potholes     -79.9  40.5\n 9 Potholes     -79.9  40.5\n10 Potholes     -79.9  40.5\n# ℹ 31,725 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npgh_coords <- c(lon = -79.9, lat = 40.4)\n\ncity_map <- get_googlemap(pgh_coords, zoom = 11)\n\n(city_map <- ggmap(city_map))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n\nPut the data on the map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_map +\n  geom_point(data = df_map, aes(x, y, color = request_type)) #graph the data with dots\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n\nThere is too much data on the graph. Make the dots more transparent to show density\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncity_map +\n  geom_point(data = df_map, aes(x, y, color = request_type), alpha = .1) #graph the data with dots\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n\nStill not great\n\nDensity plots are better for showing overplotted data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Put the data on the map\ncity_map +\n  stat_density_2d(data = df_map, #Using a 2d density contour\n                  aes(x, #longitude\n                      y, #latitude,\n                      fill = request_type,\n                      alpha = ..level..), #Use alpha so you can see the map under the data\n                  geom = \"polygon\") + #We want the contour in a polygon\n  scale_alpha_continuous(range = c(.1, 1)) + #manually set the range for the alpha\n  guides(alpha = guide_legend(\"Number of requests\"),\n         fill = FALSE) +\n  labs(title = \"Pothole requests in Pittsburgh\",\n       subtitle = \"311 data\",\n       x = \"\",\n       y = \"\",\n       caption = my_caption) +\n  theme_bw(base_size = 18) +\n  theme(axis.text = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}