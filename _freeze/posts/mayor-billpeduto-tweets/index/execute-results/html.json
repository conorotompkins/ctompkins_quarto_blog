{
  "hash": "c6f1ed7b14994844e80ace2c906ae0b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\n\ntitle: \"Mayor Bill Peduto Tweets\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [Twitter, Pittsburgh, Politics]\ncategories: [Twitter, Pittsburgh]\ndate: 2018-03-08\nlastmod: 2020-09-27T17:56:18-04:00\nfeatured: false\ndraft: false\nexecute: \n  echo: true\n  warning: false\n  message: false\n---\n\n\n[Pittsburgh Mayor Bill Peduto uses Twitter](https://twitter.com/billpeduto) to communicate with his constituents, express his political opinions, and comment about Pittsburgh sports. I will use various R packages (mainly the [Tidyverse](https://www.tidyverse.org/), [Tidytext](https://www.tidytextmining.com/), and [rtweet](http://rtweet.info/)) to analyze how the Mayor uses Twitter.\n\nBefore getting started, we need to load the packages required for this analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(widyr)\nlibrary(SnowballC)\nlibrary(lubridate)\nlibrary(viridis)\nlibrary(scales)\nlibrary(knitr)\nlibrary(kableExtra)\n```\n:::\n\n\n\n\n\nFirst, we will download @billpeduto's recent tweets using rtweet\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrtweet::tweets_bill <- get_timelines(\"BillPeduto\", n = 3200)\n```\n:::\n\n\n\nI have already downloaded the data, so I will load it from my GitHub repo. I will also do some data munging to make the data easier to work with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://raw.githubusercontent.com/conorotompkins/pittsburgh_twitter/master/data/df_billpeduto.csv\"\n\nread_csv(url) %>% \n  mutate(created_at = with_tz(created_at, \"US/Eastern\"),\n         date = ymd(str_sub(created_at, 1, 10)),\n         year = year(date),\n         month = month(date, label = TRUE),\n         week = week(date),\n         wday = wday(date, label = TRUE),\n         hour = hour(created_at),\n         month_year = str_c(month, year, sep = \"-\"),\n         month_year = factor(month_year, levels = unique(month_year)),\n         wday = factor(wday, levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"))) -> df_bill\n\ndf_bill[1:5, 1:5] %>% \n  kable(\"html\") %>% \n  kable_styling()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> status_id </th>\n   <th style=\"text-align:left;\"> created_at </th>\n   <th style=\"text-align:left;\"> source </th>\n   <th style=\"text-align:left;\"> is_quote </th>\n   <th style=\"text-align:left;\"> is_retweet </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x892785891055468548 </td>\n   <td style=\"text-align:left;\"> 2017-08-02 12:35:18 </td>\n   <td style=\"text-align:left;\"> Twitter for iPhone </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x892804872390795264 </td>\n   <td style=\"text-align:left;\"> 2017-08-02 13:50:43 </td>\n   <td style=\"text-align:left;\"> Twitter for iPhone </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x892820785823404032 </td>\n   <td style=\"text-align:left;\"> 2017-08-02 14:53:57 </td>\n   <td style=\"text-align:left;\"> Twitter for iPhone </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x892926762933506048 </td>\n   <td style=\"text-align:left;\"> 2017-08-02 21:55:04 </td>\n   <td style=\"text-align:left;\"> Twitter for iPhone </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> TRUE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x892953788679692288 </td>\n   <td style=\"text-align:left;\"> 2017-08-02 23:42:28 </td>\n   <td style=\"text-align:left;\"> Twitter for iPhone </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Exploratory Analysis\nThis plot shows that the Mayor tweets about 15 times a day, though there is considerable daily variation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_bill %>% \n  count(date) %>%\n  ggplot(aes(date, n)) +\n  geom_jitter(alpha = .5) +\n  geom_smooth(size = 2) +\n  scale_x_date(date_breaks = \"month\",\n               date_labels = \"%b-%Y\") +\n  labs(title = title, \n       x = \"\",\n       y = \"Number of tweets\",\n       caption = caption)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/date_smoothed-1.png){width=672}\n:::\n:::\n\n\n\nThe Mayor tweets the most on weekdays; Tuesday has the highest median number of tweets. The weekends see fewer tweets, and Saturday and Sunday are very similar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_bill %>% \n  count(wday, date) %>% \n  group_by(wday) %>% \n  mutate(median = median(n)) %>% \n  ggplot(aes(wday, n, color = wday)) +\n  geom_jitter(alpha = .3, width = .2) +\n  geom_point(aes(wday, median), size = 5) +\n  scale_color_viridis(name = \"Day of the week\", discrete = TRUE) +\n  labs(title = title,\n       subtitle = \"One small dot = one day, large dot = median for weekday\",\n       x = \"\",\n       y = \"Number of tweets in a given day\",\n       caption = caption)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Day of the week-1.png){width=672}\n:::\n:::\n\n\n\nThe Mayor does most of his tweeting around lunchtime and in the late evening.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_bill %>% \n  count(hour) %>% \n  ggplot(aes(hour, y = 1, fill = n)) +\n  geom_tile() +\n  coord_equal() +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_x_continuous(expand = c(0,0),\n                     breaks = seq(0, 23, by = 3)) +\n  scale_fill_viridis(name = \"Number of tweets\",\n                     option = 3) +\n  guides(fill = guide_colorbar(title.position = \"top\")) +\n  labs(title = title,\n       x = \"Hour\",\n       y = \"\",\n       caption = caption) +\n  theme(axis.text.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.position = \"bottom\",\n        legend.text = element_text(size = 7))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/hour-1.png){width=672}\n:::\n:::\n\n\nThis view combines the day of the week and hour variables, and confirms what we observed when looking at the variables independently.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_bill %>% \n  mutate(wday = factor(wday, levels = rev(levels(df_bill$wday)))) %>% \n  count(wday, hour) %>% \n  complete(wday, hour = 0:23) %>% \n  replace_na(list(n = 0)) %>% \n  ggplot(aes(hour, wday, fill = n)) +\n  geom_tile() +\n  coord_equal() +\n  scale_x_continuous(expand = c(0,0),\n                  breaks = seq(0, 24, by = 3)) +\n  scale_y_discrete(expand = c(0,0)) +\n  scale_fill_viridis(option = 3) +\n  labs(title = title,\n       x = \"Hour\",\n       y = \"\",\n       caption = caption) +\n  guides(fill = guide_colorbar(\"Number of tweets\")) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/heatmap-1.png){width=672}\n:::\n:::\n\n\n\nThis plot shows the percentage of the Mayor's tweets that are regular tweets, retweets, quotes, and replies.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_bill %>% \n  select(date, month_year, month, week, is_retweet, is_quote, reply_to_screen_name) %>% \n  mutate(tweet_type = case_when(is.na(reply_to_screen_name) == FALSE ~ \"Reply\",\n                                is_retweet == FALSE & is_quote == FALSE ~ \"Regular tweet\",\n                                is_retweet == TRUE ~ \"Retweet\",\n                                is_quote == TRUE ~ \"Quote\")) -> df_bill_tweet_types\n\ndf_bill_tweet_types %>% \n  count(month_year, tweet_type) %>% \n  mutate(tweet_type = factor(tweet_type, levels = rev(c(\"Retweet\", \"Regular tweet\", \"Quote\", \"Reply\")))) -> df_bill_tweet_types_month_year\n\ndf_bill_tweet_types_month_year %>%  \n  ggplot(aes(month_year, n, fill = tweet_type, group = tweet_type)) +\n  geom_area(position = \"fill\") +\n  scale_fill_viridis(name = \"Tweet type\", discrete = TRUE) +\n  scale_x_discrete(expand = c(0,0)) +\n  scale_y_continuous(expand = c(0,0), labels = scales::percent) +\n  labs(title = \"Types of @billpeduto tweets\",\n       x = \"\",\n       y = \"Percentage of tweets\",\n       caption = caption) +\n  theme(axis.text.x = element_text(size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tweet_types-1.png){width=672}\n:::\n:::\n\n\nThis heatmap shows that the Mayor replies to tweets most often in the late evening.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_bill %>% \n  filter(!is.na(reply_to_screen_name), is_quote == FALSE, is_retweet == FALSE) %>% \n  count(wday, hour) %>% \n  complete(wday, hour = 0:23) %>% \n  replace_na(list(n = 0)) %>% \n  ggplot(aes(hour, wday, fill = n)) +\n  geom_tile() +\n  coord_equal() +\n  scale_x_continuous(expand = c(0,0),\n                  breaks = seq(0, 24, by = 3)) +\n  scale_y_discrete(expand = c(0,0)) +\n  scale_fill_viridis(option = 3) +\n  labs(x = \"Hour\",\n       y = \"Day of the week\") +\n  guides(fill = guide_colorbar(\"Number of tweets\")) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/replies_heatmap-1.png){width=672}\n:::\n:::\n\n\n\n## Text Analysis\nThe R package Tidytext makes it very easy to parse text data and pull insights from it. It interfaces very easily with ggraph, which creates network graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndf_bill <- read_csv(\"https://raw.githubusercontent.com/conorotompkins/pittsburgh_twitter/master/data/bill_peduto_tweets.tweets.csv\")\n```\n:::\n\n\n\nBy separating the Mayor's tweets into bigrams (two-word chunks), we can identify which words are used together. This code cuts the tweets into bigrams and counts their occurences. I exclude retweets and quotes from this analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_twitter_bigrams <- function(dataset, custom_stopwords) {\n  replace_reg <- \"https://t.co/[A-Za-z\\\\d]+|http://[A-Za-z\\\\d]+|&amp;|&lt;|&gt;|RT|https|'s\"\n  \n  dataset %>%\n    filter(is_quote == FALSE, is_retweet == FALSE) %>% \n    mutate(text = str_replace_all(text, replace_reg, \"\")) %>%\n    unnest_tokens(bigram, text, token = \"ngrams\", n = 2) %>%\n    separate(bigram, c(\"word1\", \"word2\"), sep = \" \") %>%\n    filter(!word1 %in% stop_words$word,\n           !word2 %in% stop_words$word,\n           !word1 %in% custom_stopwords,\n           !word2 %in% custom_stopwords) %>%\n    count(word1, word2, sort = TRUE)\n}\n\nbill_stop_words <- c(\"t.co\", \"https\", \"amp\")\n\ntweets_bill <- count_twitter_bigrams(df_bill, bill_stop_words)\n\ntweets_bill %>% \n  rename(count = n) %>% \n  head() %>% \n  kable(\"html\") %>% \n  kable_styling()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> word1 </th>\n   <th style=\"text-align:left;\"> word2 </th>\n   <th style=\"text-align:right;\"> count </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> public </td>\n   <td style=\"text-align:left;\"> safety </td>\n   <td style=\"text-align:right;\"> 12 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> affordable </td>\n   <td style=\"text-align:left;\"> housing </td>\n   <td style=\"text-align:right;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> amazon </td>\n   <td style=\"text-align:left;\"> hq2 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> climate </td>\n   <td style=\"text-align:left;\"> change </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> common </td>\n   <td style=\"text-align:left;\"> sense </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> u.s </td>\n   <td style=\"text-align:left;\"> cities </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nThis network graph shows which words the Mayor uses together frequently. \"public\" + \"safety\", and \"affordable\" + \"housing\" are the main standouts. I think this plot pretty accurately captures the topics the Mayor tweets about.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_bigrams <- function(bigrams, minimum, text_size = 3, title = NULL, subtitle = NULL, caption = NULL) {\n  set.seed(2016)\n  a <- grid::arrow(type = \"closed\", \n                   length = unit(.1, \"inches\"))\n  \n  bigrams %>%\n    filter(n >= minimum) %>% \n    graph_from_data_frame() %>%\n    ggraph(layout = \"fr\") +\n    geom_node_point(color = \"lightblue\", size = 3) +\n    geom_node_text(aes(label = name), size = text_size, vjust = 1, hjust = 1) +\n    geom_edge_link(aes(edge_alpha = n, edge_width = n), show.legend = TRUE, arrow = a, end_cap = circle(.25, 'inches')) +\n    scale_edge_width_continuous(\"Count\", range = c(.5, 1.5)) +\n    scale_edge_alpha_continuous(\"Count\", range = c(.3, .7)) +\n    labs(title = title,\n         subtitle = subtitle,\n         caption = caption) +\n    theme_void(base_size = 18)\n}\n\nvisualize_bigrams(tweets_bill, \n                  minimum = 4,\n                  text_size = 5,\n                  title = \"@billpeduto tweets\",\n                  subtitle = \"Bigram network\",\n                  caption = caption)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/visualize_bigrams-1.png){width=1152}\n:::\n:::\n\n\n\nThis code determines which words are correlated with each other:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_correlations <- function(dataframe, minimum, custom_stopwords){\n  replace_reg <- \"https://t.co/[A-Za-z\\\\d]+|http://[A-Za-z\\\\d]+|&amp;|&lt;|&gt;|RT|https\"\n  unnest_reg <- \"([^A-Za-z_\\\\d#@']|'(?![A-Za-z_\\\\d#@]))\"\n  dataframe %>% \n  filter(is_quote == FALSE, is_retweet == FALSE) %>% \n  select(status_id, text) %>% \n  mutate(section = row_number() %/% 10) %>%\n  filter(section > 0) %>%\n  mutate(text = str_replace_all(text, replace_reg, \"\")) %>%\n  unnest_tokens(word, text, token = \"regex\", pattern = unnest_reg) %>%\n  filter(!word %in% stop_words$word,\n         !word %in% custom_stopwords,\n         str_detect(word, \"[a-z]\")) %>% \n  mutate(word = str_replace(word, \"'\", \"\"),\n         word = str_replace(word, \"'\", \"\"),\n         word = SnowballC::wordStem(word)) %>% \n  group_by(word) %>% \n  filter(n() >= minimum) %>%\n  pairwise_cor(word, section, sort = TRUE)\n}\n\nbill_stopwords <- c(\"t.co\", \"https\", \"amp\")\n\nbill_words <- word_correlations(df_bill, minimum = 10, custom_stopwords = bill_stopwords)\n```\n:::\n\n\n\nThis plot shows which words are correlated highly with each other. Some words are \"stemmed\" (shortened and/or modified), to capture very similar words. For example, \"business\" and \"businesses\" could be stemmed to \"busine\".\n\n\"amazon\" and \"hq2\" are used together overwhelmingly. The \"pwsa\" + \"water\" + \"decad\" combination indicate the [ongoing water quality problems](http://wesa.fm/post/struggling-provide-safe-clean-drinking-water-pennsylvania#stream/0), and the plans to reinvest in the infrastructure. This plot shows how some of the policy issues the Mayor focuses on are connected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize_word_correlations <- function(dataframe, title, subtitle, caption){\n  dataframe %>% \n  filter(correlation > .3) %>%\n  graph_from_data_frame() %>%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(edge_alpha = correlation, edge_width = correlation), show.legend = FALSE) +\n  geom_node_point(color = \"lightblue\", size = 5) +\n  geom_node_label(aes(label = name), size = 5, repel = TRUE) +\n  scale_edge_alpha_continuous(range = c(.1, .5)) +\n  theme_void(base_size = 18) +\n  labs(title = title,\n       subtitle = subtitle,\n       caption = caption)\n}\n\nvisualize_word_correlations(bill_words, \n                            title = \"@billpeduto tweets\",\n                            subtitle = \"Word correlation network\",\n                            caption = \"@conor_tompkins\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/visualize_word_correlations-1.png){width=1152}\n:::\n:::\n\n\n\n## References\n+ https://github.com/mkearney/rtweet\n+ http://rtweet.info/\n+ http://rtweet.info/articles/intro.html\n+ https://stackoverflow.com/questions/47681690/no-twitter-authorization-prompt-when-using-rtweet-package/48275078#48275078\n+ https://stackoverflow.com/questions/47910979/setting-up-rtweet-for-r-in-aws-ubuntu-server\n+ https://github.com/r-lib/httr/issues/156\n+ https://github.com/mkearney/rtweet/issues/75\n+ https://github.com/geoffjentry/twitteR/issues/65\n+ https://github.com/r-lib/httr/blob/master/demo/oauth1-twitter.r",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}