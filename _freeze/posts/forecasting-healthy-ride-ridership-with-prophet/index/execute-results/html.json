{
  "hash": "79f09f3e1811319ad05be06a87e6506b",
  "result": {
    "markdown": "---\n# Documentation: https://sourcethemes.com/academic/docs/managing-content/\n\ntitle: \"Forecasting Healthy Ride Ridership With Prophet\"\nsubtitle: \"\"\nsummary: \"\"\nauthors: [Conor Tompkins]\ntags: [R, Pittsburgh, Healthy Ride]\ncategories: [R, Pittsburgh, Healthy Ride]\ndate: 2019-08-03\nlastmod: 2020-08-24T13:20:16-04:00\nfeatured: false\ndraft: false\n\n# Featured image\n# To use, add an image named `featured.jpg/png` to your page's folder.\n# Focal points: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight.\nimage: featured.png\nprojects: []\nexecute:\n  warning: false\n  message: false\neditor_options: \n  chunk_output_type: console\n---\n\n\nThis post is about predicting demand for the Healthy Ride bike system in Pittsburgh. I wanted to try out Facebook's `prophet` package and try to do some time series forecasting.\n\nAs usual, load the required packages and set up the environment:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(prophet)\nlibrary(janitor)\nlibrary(hrbrthemes)\n\noptions(scipen = 999)\n\ntheme_set(theme_bw())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_csv(\"post_data/combined_ride_data.csv\") %>%\n  filter(date < \"2019-08-01\") %>% \n  count(date)\n```\n:::\n\n\nThis code loads the data and formats the date column so the `prophet` package can interface with it. I use `dir()` to find all the CSV files in  the folder and then `set_names()` and `map_df(read_csv())` to read each of the CSV files into memory.\n\n::: {.cell}\n\n```{.r .cell-code}\nfiles <- dir(\"data\", \".csv\")\n\ndata <- str_c(\"data/\", files) %>% \n  set_names() %>% \n  map_df(read_csv) %>% \n  clean_names()\n\ndf <- data %>% \n  filter(date < \"2019-08-01\") %>% \n  count(date)\n\n# df %>% \n#   ggplot(aes(date, n)) +\n#   geom_point()\n# \n# last(df$date)\n```\n:::\n\n\nThe data I will use contains the number of rides per day and also includes the month and year. `prophet` will identify the time series patterns (\"seasonality\") in the data and identify the \"true\" pattern\n\n`prophet` has a plug-and-play workflow that is easy to use, but it has more stringent requirements for how the data has to be shaped. The date data has to be named `ds` and the target variable has to be named `y`. I set the floor to zero because there cannot be fewer than 0 rides in a day. `prophet` requires a cap\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_rides <- df %>% \n  summarize(max_rides = max(n) * 3) %>% \n  pull()\n\ndf <- df %>% \n  mutate(n = log(n),\n         cap = log(max_rides)) %>% \n  filter(!is.na(date)) %>% \n  rename(ds = date,\n         y = n) %>% \n  mutate(floor = 0)\n\n\n\ndf %>% \n  filter(is.na(ds))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 4\n# ℹ 4 variables: ds <date>, y <dbl>, cap <dbl>, floor <dbl>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,518\nColumns: 4\n$ ds    <date> 2015-05-31, 2015-06-01, 2015-06-02, 2015-06-03, 2015-06-04, 201…\n$ y     <dbl> 6.173786, 4.836282, 4.934474, 4.875197, 5.361292, 5.613128, 5.94…\n$ cap   <dbl> 8.013343, 8.013343, 8.013343, 8.013343, 8.013343, 8.013343, 8.01…\n$ floor <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n\nThis creates the set of holidays I use in the model.\n\n::: {.cell}\n\n```{.r .cell-code}\nus_holidays <- prophet::generated_holidays %>% \n  as_tibble() %>% \n  filter(country == \"US\") %>% \n  mutate(ds = as.Date(ds))\n```\n:::\n\n\nThis code fits a model to the dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- prophet(df, growth = 'logistic', holidays = us_holidays)\n```\n:::\n\n\n`make_future_dataframe()` creates the dataframe that `prophet` uses to make its forecast. In this case, I have it create a dataframe with 365 days of additional rows to predict onto.\n\n::: {.cell}\n\n```{.r .cell-code}\nfuture <- make_future_dataframe(m, periods = 365, freq = \"day\") %>% \n  mutate(floor = 0,\n         cap = unique(df$cap))\n```\n:::\n\n\nThis code performs the forecast on the future dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast <- predict(m, future) %>% \n  as_tibble()\n```\n:::\n\n\nThe output is a dataframe with the date, the predicted ridership, and the upper and lower bounds of the prediction.\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,883 × 66\n   ds                  trend   cap floor additive_terms additive_terms_lower\n   <dttm>              <dbl> <dbl> <dbl>          <dbl>                <dbl>\n 1 2015-05-31 00:00:00  5.13  8.01     0          0.720                0.720\n 2 2015-06-01 00:00:00  5.13  8.01     0          0.658                0.658\n 3 2015-06-02 00:00:00  5.13  8.01     0          0.724                0.724\n 4 2015-06-03 00:00:00  5.13  8.01     0          0.766                0.766\n 5 2015-06-04 00:00:00  5.13  8.01     0          0.733                0.733\n 6 2015-06-05 00:00:00  5.13  8.01     0          0.784                0.784\n 7 2015-06-06 00:00:00  5.13  8.01     0          0.844                0.844\n 8 2015-06-07 00:00:00  5.13  8.01     0          0.754                0.754\n 9 2015-06-08 00:00:00  5.13  8.01     0          0.691                0.691\n10 2015-06-09 00:00:00  5.13  8.01     0          0.755                0.755\n# ℹ 1,873 more rows\n# ℹ 60 more variables: additive_terms_upper <dbl>, `Christmas Day` <dbl>,\n#   `Christmas Day_lower` <dbl>, `Christmas Day_upper` <dbl>,\n#   `Christmas Day (Observed)` <dbl>, `Christmas Day (Observed)_lower` <dbl>,\n#   `Christmas Day (Observed)_upper` <dbl>, `Columbus Day` <dbl>,\n#   `Columbus Day_lower` <dbl>, `Columbus Day_upper` <dbl>, holidays <dbl>,\n#   holidays_lower <dbl>, holidays_upper <dbl>, `Independence Day` <dbl>, …\n```\n:::\n:::\n\n\n`plot` automatically plots the `forecast` data:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(m, forecast)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n`prophet` also decomposes the various seasonal effects.\n\n::: {.cell}\n\n```{.r .cell-code}\nprophet_plot_components(m, forecast)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nWe can of course use `ggplot` to manually plot the data.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_aug <- forecast %>% \n  mutate(ds = ymd(ds)) %>% \n  left_join(df) %>% \n  mutate(yhat = exp(yhat),\n         yhat_lower = exp(yhat_lower),\n         yhat_upper = exp(yhat_upper),\n         y = exp(y))\n\ndf_aug %>% \n  ggplot(aes(x = ds)) +\n    geom_ribbon(data = df_aug %>% filter(ds > last(df$ds)), \n                aes(ymin = yhat_lower, ymax = yhat_upper), alpha = .2, fill = \"blue\") +\n    geom_line(data = df_aug %>% filter(ds > last(df$ds)), \n              aes(y = yhat), color = \"blue\") +\n    geom_point(aes(y = y), alpha = .5) +\n    geom_hline(aes(yintercept = unique(floor)), linetype = 2) +\n    labs(x = NULL,\n         y = \"Number of rides\") +\n    scale_y_comma() +\n  theme_bw(base_size = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=1152}\n:::\n:::\n\n\n`prophet` also provides functions for cross-validation.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_cv <- cross_validation(m, horizon = 30, units = 'days')\n\nperformance_metrics(df_cv) %>% \n  as_tibble() %>% \n  gather(metric, measure, -horizon) %>% \n  ggplot(aes(horizon, measure)) +\n  geom_line() +\n  facet_wrap(~metric, scales = \"free_y\",\n             ncol = 1) +\n  labs(x = \"Horizon\",\n       y = \"Measure\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nWe can also inspect the impact of holidays on the prediction.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_holiday_impact <- forecast %>% \n  clean_names() %>% \n  select(ds, christmas_day:washingtons_birthday) %>% \n  select(-contains(\"upper\"), -contains(\"lower\")) %>% \n  pivot_longer(-ds, names_to = \"holiday\", values_to = \"value\") %>% \n  mutate(year = as.factor(year(ds))) %>% \n  filter(holiday != \"holidays\",\n         value != 0)\n\ndf_holiday_impact %>% \n  arrange(ds) %>% \n  mutate(holiday = as.factor(holiday)) %>% \n  ggplot(aes(holiday, value, color = year)) +\n  geom_hline(yintercept = 0, linetype = 2) +\n  geom_jitter() +\n  coord_flip() +\n  labs(x = \"Holiday\",\n       y = \"Impact\") +\n  scale_color_discrete(\"Year\") +\n  theme_ipsum()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Documentation and references\n\n* https://facebook.github.io/prophet/\n* https://data.wprdc.org/dataset/healthyride-trip-data",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}