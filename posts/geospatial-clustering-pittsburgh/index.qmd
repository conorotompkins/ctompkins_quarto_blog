---
title: "Geospatially clustering Pittsburgh"
author: "Conor Tompkins"
editor_options: 
  chunk_output_type: console
---

```{r}
#https://walker-data.com/posts/census-regions/
#https://geodacenter.github.io/rgeoda/articles/rgeoda_tutorial.html#spatial-clustering
#try adding us highways as overlay https://catalog.data.gov/dataset/tiger-line-shapefile-2019-nation-u-s-primary-roads-national-shapefile

#devtools::install_github("geodacenter/rgeoda")

library(tidyverse)
library(sf)
library(tidycensus)
library(rgeoda)
library(rmapshaper)
library(leaflet)
library(janitor)
library(tictoc)
library(patchwork)
library(mapview)
library(leafpop)
library(broom)
```

```{r}
#| cache: true
options(tigris_use_cache = TRUE,
        scipen = 999,
        digits = 4)

set.seed(1234)

acs_vars <- load_variables(2022, "acs5", cache = TRUE)

# acs_vars |> 
#   view()

states_vec <- c("PA", "OH", "WV", "MD", "NY", "NJ", "VA", "KY", "DC", "DE", "CT", "RI", "MA", "VT", "NH", "ME", "MS", "IL", "IN", "WI", "TN", "AL", "GA", "NC", "SC", "FL")

vars_acs <- c(income = "B19013_001",
              total_population = "B01003_001",
              dem_white = "B03002_003",
              dem_black = "B03002_004",
              dem_native = "B03002_005",
              dem_asian = "B03002_006",
              dem_hipi = "B03002_007",
              dem_hispanic = "B03002_012",
              dem_other_race = "B03002_008")

acs_vars |> 
  filter(name %in% vars_acs)

census_data_acs <- get_acs(year = 2022, 
                           state = states_vec,
                           variables = vars_acs, 
                           geography = "county", 
                           geometry = TRUE) |> 
  filter(!str_detect(NAME, "Hawaii|Alaska|Puerto Rico"))

census_data_acs |> 
  filter(variable == "total_population") |> 
  ggplot(aes(fill = estimate)) +
  geom_sf(lwd = 0) +
  scale_fill_viridis_c() +
  facet_wrap(vars(variable))

census_data_acs |> 
  filter(variable == "income") |> 
  ggplot(aes(fill = estimate)) +
  geom_sf(lwd = 0) +
  scale_fill_viridis_c() +
  facet_wrap(vars(variable))

census_data_acs |> 
  select(-c(GEOID, moe)) |> 
  pivot_wider(names_from = variable, values_from = estimate) |> 
  select(NAME, starts_with("dem"), total_population) |> 
  mutate(across(-c(NAME, geometry, total_population), ~.x / total_population, .names = "pct_{.col}")) |> 
  rowwise() |> 
  mutate(pct_total = sum(c_across(contains("pct")))) |> 
  ungroup() |> 
  select(starts_with("pct_dem")) |> 
  pivot_longer(starts_with("pct_dem")) |> 
  ggplot(aes(fill = value)) +
  geom_sf(lwd = 0) +
  scale_fill_viridis_c() +
  facet_wrap(vars(name)) +
  theme_bw()

census_data <- census_data_acs |> 
  rename(value = estimate)
```

```{r}
census_tracts <- census_data |> 
  # mutate(NAME = case_when(NAME == "Newport County, Rhode Island" ~ "Washington + Newport County, Rhode Island",
  #                         NAME == "Washington County, Rhode Island" ~ "Washington + Newport County, Rhode Island",
  #                         TRUE ~ NAME)) |> 
  mutate(NAME = case_when(str_detect(NAME, "Barnstable|Dukes|Nantucket") ~ "Barnstable + Dukes + Nantucket Counties, Massachusetts",
                           TRUE ~ NAME)) |> 
  mutate(NAME = case_when(str_detect(NAME, "Richmond County, New York|Kings County, New York") ~ "Richmond + Kings Counties, New York",
         TRUE ~ NAME)) |> 
  group_by(NAME, variable) |> 
  summarize(value = sum(value)) |> 
  ungroup() |> 
  ms_simplify(keep = .01, keep_shapes = TRUE)

census_tracts |> 
  rook_weights() |> 
  has_isolates() == FALSE

test_tracts <- census_tracts |> 
  distinct(NAME, geometry) |>
  filter(str_detect(NAME, "New York|New Jersey"))

test_tracts |> 
  rook_weights()

test_tracts |> 
  mapview::mapview(popup = popupTable(test_tracts,
                                      zcol = c("NAME")))

census_tracts |> 
  write_sf("posts/geospatial-clustering-pittsburgh/post_data/census_tracts/census_tracts.shp")
```

```{r}
census_tracts <- read_sf("posts/geospatial-clustering-pittsburgh/post_data/census_tracts/census_tracts.shp")

census_tracts |> 
  filter(variable == "dem_black") |> 
  ggplot() +
  geom_sf(aes(fill = value), lwd = 0) +
  scale_fill_viridis_c()

census_tracts |> 
  filter(variable == "total_population") |> 
  leaflet() |> 
  addPolygons(weight = 0.1)
```

```{r}
#| eval: false
#test aggregating counties
target_state <- census_tracts |> 
  #filter(str_detect(NAME, "Mich|Wis")) |> 
  mutate(NAME = case_when(str_detect(NAME, "Barnstable|Dukes|Nantucket") ~ "Barnstable + Dukes + Nantucket Counties, Massachusetts",
                           TRUE ~ NAME)) |> 
  group_by(NAME) |> 
  summarize()

target_state |> 
  mapview::mapview(popup = popupTable(target_state,
                                      zcol = c("NAME")))
```

```{r}
census_tracts_wide <- census_tracts |> 
  pivot_wider(names_from = variable, values_from = value) |> 
  rename_with(str_to_lower, -c(NAME, geometry)) |> 
  mutate(across(-c(NAME, geometry, total_population, income), ~.x / total_population, .names = "pct_{.col}")) |> 
  rowwise() |> 
  mutate(pct_total = sum(c_across(contains("pct")))) |> 
  ungroup()

glimpse(census_tracts_wide)

census_tracts_wide |> 
  ggplot(aes(pct_total)) +
  geom_histogram()
```

```{r}
census_tracts_wide |> 
  select(contains("pct"), -pct_total) |> 
  pivot_longer(cols = contains("pct"), names_to = "variable", values_to = "value") |> 
  ggplot() +
  geom_sf(aes(fill = value), lwd = 0) +
  scale_fill_viridis_c() +
  facet_wrap(vars(variable))
```

```{r}
#census_tracts_wide |> 
#  write_sf("posts/geospatial-clustering-pittsburgh/post_data/census_tracts/census_tracts_wide.shp")
```

```{r}
#census_tracts_wide_geo <- geoda_open("posts/geospatial-clustering-pittsburgh/post_data/census_tracts/census_tracts_wide.shp")

#this crashes sometimes. investigate cause. could be caused by tracts that have no neighbors?
w_rook <- rook_weights(census_tracts_wide)

w_rook

w_queen <- queen_weights(census_tracts_wide)

w_queen

dist_thres <- min_distthreshold(census_tracts_wide)

w_dist <- distance_weights(census_tracts_wide, dist_thres, power=1.0,  is_inverse=FALSE, is_arc=FALSE, is_mile=TRUE)

w_dist
```

```{r}
census_tracts_wide |> 
  ggplot(aes(total_population)) +
  geom_histogram()

cluster_df <- census_tracts_wide |> 
  select(geometry, total_population, contains("pct"), -pct_total) |> 
  st_drop_geometry()

bound_vals <- census_tracts_wide['total_population']

#minimum group population is 8% of total population
min_bound <- census_tracts_wide |> 
  st_drop_geometry() |> 
  summarize(total_population = sum(total_population)) |> 
  mutate(min_bound = total_population * .1) |> 
  pull(min_bound)

scales::comma(min_bound)

tic()
maxp_clusters_greedy <- maxp_greedy(w_rook, cluster_df, bound_vals, min_bound, scale_method = "standardize")
maxp_clusters_greedy
toc()

#tic()
#maxp_clusters_tabu <- maxp_tabu(w_rook, cluster_df, bound_vals, min_bound, tabu_length=10, #conv_tabu=10)

#maxp_clusters_tabu
#toc()

# tic()
# maxp_clusters_sa <- maxp_sa(w_rook, cluster_df, bound_vals, min_bound, cooling_rate=0.85, sa_maxit=1)
# toc()
```

```{r}
#| eval: false
cluster_performance <- list(greedy = maxp_clusters_greedy,
                            tabu = maxp_clusters_tabu)

cluster_performance |> 
  map_dbl(5) |> 
  enframe()
```

```{r}
tract_clusters <- census_tracts_wide |> 
  mutate(cluster_greedy = as.character(maxp_clusters_greedy$Clusters))#,
         #cluster_tabu = as.character(maxp_clusters_tabu$Clusters))

tract_clusters |> 
  st_drop_geometry() |> 
  summarize(counties = n(),
            total_population = sum(total_population),
            .by = cluster_greedy) |> 
  ggplot(aes(counties, total_population, label = cluster_greedy)) +
  geom_label() +
  theme_bw()

cluster_compare <- tract_clusters |> 
  pivot_longer(cols = contains("cluster"), names_to = "cluster_type", values_to = "cluster")
```

```{r}
map_greedy <- cluster_compare |> 
  filter(cluster_type == "cluster_greedy") |> 
  group_by(cluster, cluster_type) |> 
  summarize() |> 
  ggplot() +
  geom_sf(data = summarize(census_tracts), fill = NA) +
  geom_sf(aes(fill = cluster), color = NA) +
  guides(fill = "none") +
  facet_wrap(vars(cluster_type))

map_greedy
```

```{r}
map_tabu <- cluster_compare |> 
  filter(cluster_type == "cluster_tabu") |> 
  group_by(cluster, cluster_type) |> 
  summarize() |> 
  ggplot() +
  geom_sf(data = summarize(census_tracts), fill = NA) +
  geom_sf(aes(fill = cluster), color = NA) +
  guides(fill = "none") +
  facet_wrap(vars(cluster_type))

map_tabu

map_tabu +
  facet_wrap(vars(cluster)) +
  theme_void()
```

```{r}
map_greedy

map_greedy +
  facet_wrap(vars(cluster)) +
  theme_void()
```

```{r}
fill_pal <- colorFactor(palette = "Paired", domain = tract_clusters$cluster_greedy)

labels <- sprintf(
  "<strong>%s</strong><br/>Cluster: %s<br/>White: %#.2f%%<br/>Black: %#.2f%%<br/>Asian: %#.2f%%<br/>Hispanic: %#.2f%%<br/>Total: %f",
  tract_clusters$NAME, tract_clusters$cluster_greedy, tract_clusters$pct_dem_white, tract_clusters$pct_dem_black, tract_clusters$pct_dem_asian, tract_clusters$pct_dem_hispanic, tract_clusters$total_population
) %>% lapply(htmltools::HTML)

tract_clusters |> 
  leaflet() |> 
  addProviderTiles(providers$CartoDB.Positron) |> 
  addPolygons(fillColor = ~fill_pal(cluster_greedy),
              fillOpacity = .5,
              weight = .1,
              #stroke = FALSE,
              label = labels,
              labelOptions = labelOptions(
                style = list("font-weight" = "normal", padding = "3px 8px"),
                textsize = "15px",
                direction = "auto"))
```

```{r}
ac_geo <- census_tracts |> 
  filter(NAME == "Allegheny County, Pennsylvania") |> 
  distinct(NAME, geometry)

map_greedy +
  geom_sf(data = ac_geo, lwd = .5, color = "black", fill = NA)
```

```{r}
cluster_pca <- tract_clusters |> 
  select(-pct_total) |> 
  st_drop_geometry() |> 
  summarize(across(c(contains("pct"), total_population, income), mean),
            .by = cluster_greedy)

cluster_pca |> 
  pivot_longer(-c(cluster_greedy, total_population)) |> 
  ggplot(aes(total_population, value, label = cluster_greedy)) +
  geom_label() +
  facet_wrap(vars(name), scales = "free") +
  scale_x_continuous(expand = expansion(mult = c(.1, .1))) +
  scale_y_continuous(expand = expansion(mult = c(.1, .1))) +
  theme_bw()
```

```{r}
pca_fit <- cluster_pca |> 
  select(where(is.numeric)) |> 
  prcomp(scale = TRUE)

# define arrow style for plotting
arrow_style <- arrow(
  angle = 20, ends = "first", type = "closed", length = grid::unit(8, "pt")
)

# plot rotation matrix
pca_fit %>%
  tidy(matrix = "rotation") %>%
  pivot_wider(names_from = "PC", names_prefix = "PC", values_from = "value") %>%
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0, yend = 0, arrow = arrow_style) +
  geom_text(
    aes(label = column),
    hjust = 1, nudge_x = -0.02, 
    color = "#904C2F"
  ) +
  coord_fixed() + # fix aspect ratio to 1:1
  scale_x_continuous(expand = expansion(mult = .4)) +
  scale_y_continuous(expand = expansion(mult = .2)) +
  theme_bw()
```

```{r}
pca_fit %>%
  tidy(matrix = "eigenvalues") %>%
  ggplot(aes(PC, percent)) +
  geom_col(fill = "#56B4E9", alpha = 0.8) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_bw()
```

```{r}
pca_fit |> 
  augment(cluster_pca) |> 
  ggplot(aes(x = .fittedPC1, y = .fittedPC2, label = cluster_greedy)) +
  geom_label() +
  theme_bw()

pca_fit |> 
  augment(cluster_pca) |> 
  ggplot(aes(x = .fittedPC1, y = .fittedPC3, label = cluster_greedy)) +
  geom_label() +
  theme_bw()

pca_fit |> 
  augment(cluster_pca) |> 
  ggplot(aes(x = .fittedPC2, y = .fittedPC3, label = cluster_greedy)) +
  geom_label() +
  theme_bw()
```