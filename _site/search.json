[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a data scientist in the Pittsburgh area with an interest in data visualization, statistical programming, birdwatching, and civic data."
  },
  {
    "objectID": "posts/suburbanization-of-allegheny-county/index.html",
    "href": "posts/suburbanization-of-allegheny-county/index.html",
    "title": "Suburbanization of Allegheny County",
    "section": "",
    "text": "This March, researchers at the University of Georgia and Florida State University released the HHUUD10 dataset, which contains estimates of the number of housing units for decennial census years 1940-2010 and 2019. A “housing unit” could be a studio apartment or 5 bedroom single-family home. The data uses 2010 census tracts, which allows for historical comparison of housing trends across constant geometry. The full paper explains the approach.\nThis paper and the dataset can be used for a wide variety of socioeconomic issues. I will focus on suburbanization trends in the Pittsburgh area."
  },
  {
    "objectID": "posts/suburbanization-of-allegheny-county/index.html#overall-trend",
    "href": "posts/suburbanization-of-allegheny-county/index.html#overall-trend",
    "title": "Suburbanization of Allegheny County",
    "section": "Overall trend",
    "text": "Overall trend\n\nFix date formatting\nSince the data comes in a wide format, I pivot it long and fix up the year column to make it easy to graph with.\n\nac_housing_hu &lt;- ac_housing |&gt; \n  select(GEOID10, starts_with(\"hu\")) |&gt; \n  pivot_longer(cols = starts_with(\"hu\"), names_to = \"year\", values_to = \"housing_units\")\n\nyear_lookup &lt;- ac_housing_hu |&gt; \n  st_drop_geometry() |&gt; \n  distinct(year) |&gt; \n  mutate(year_fixed = c(1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2019))\n\nac_housing_hu &lt;- ac_housing_hu |&gt; \n  left_join(year_lookup) |&gt; \n  select(-year) |&gt; \n  rename(year = year_fixed)\n\nglimpse(ac_housing_hu)\n\nRows: 3,618\nColumns: 4\n$ GEOID10       &lt;chr&gt; \"42003560500\", \"42003560500\", \"42003560500\", \"4200356050…\n$ geometry      &lt;POLYGON [US_survey_foot]&gt; POLYGON ((1373906 410182, 1..., POL…\n$ housing_units &lt;dbl&gt; 1349, 1509, 1515, 1441, 1424, 1433, 1381, 1349, 1487, 13…\n$ year          &lt;dbl&gt; 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2019, 19…\n\n\nThe number of housing units in the county stagnated after 1960, which is expected given the collapse of the steel industry.\n\nac_housing_hu |&gt; \n  st_drop_geometry() |&gt; \n  mutate(year = as.character(year) |&gt; fct_inorder()) |&gt; \n  group_by(year) |&gt; \n  summarize(housing_units = sum(housing_units)) |&gt; \n  ungroup() |&gt; \n  ggplot(aes(year, housing_units, group = 1)) +\n  geom_line() +\n  geom_point() +\n  scale_y_comma() +\n  labs(x = \"Year\",\n       y  = \"Housing units\")\n\n\n\n\nThe decennial difference in “gross” housing units also shows that growth stagnated after 1960.\n\nac_housing_hu |&gt; \n  st_drop_geometry() |&gt; \n  mutate(year = as.character(year) |&gt; fct_inorder()) |&gt; \n  group_by(year) |&gt; \n  summarize(housing_units = sum(housing_units)) |&gt; \n  ungroup() |&gt; \n  mutate(diff = housing_units - lag(housing_units)) |&gt; \n  ggplot(aes(year, diff, group = 1)) +\n  geom_line() +\n  geom_point() +\n  scale_y_comma(prefix = \"+ \") +\n  coord_cartesian(ylim = c(0, 90000)) +\n  labs(title = \"Growth stagnated after 1960\",\n       x = \"Year\",\n       y  = \"Change in housing units\")"
  },
  {
    "objectID": "posts/suburbanization-of-allegheny-county/index.html#change-from-1940-to-2019",
    "href": "posts/suburbanization-of-allegheny-county/index.html#change-from-1940-to-2019",
    "title": "Suburbanization of Allegheny County",
    "section": "Change from 1940 to 2019",
    "text": "Change from 1940 to 2019\nThis interactive map shows the areas that gained or lost the most housing units from 1940-2019. Dense housing around industrial areas along the Allegheny and Monongahela Rivers was erased. Homestead and Braddock stand out.\n\nhu_diff &lt;- ac_housing_hu |&gt; \n  group_by(GEOID10) |&gt; \n  filter(year == min(year) | year == max(year)) |&gt; \n  ungroup() |&gt; \n  select(GEOID10, year, housing_units) |&gt; \n  as_tibble() |&gt; \n  pivot_wider(names_from = year, names_prefix = \"units_\", values_from = housing_units) |&gt; \n  mutate(diff = units_2019 - units_1940) |&gt; \n  st_as_sf()\n\npal &lt;- colorNumeric(\n  palette = \"viridis\",\n  domain = hu_diff$diff)\n\nleaflet_map &lt;- hu_diff |&gt; \n  mutate(diff_formatted = comma(diff, accuracy = 1),\n         diff_label = str_c(\"Census tract: \", GEOID10, \"&lt;br/&gt;\", \"Difference: \", diff_formatted)) |&gt; \n  st_transform(crs = 4326) |&gt; \n  leaflet() |&gt; \n  setView(lat = 40.441606, lng = -80.010957, zoom = 10) |&gt; \n  addProviderTiles(providers$Stamen.TonerLite,\n                   options = providerTileOptions(noWrap = TRUE,\n                                                 minZoom = 9),\n                   group = \"Base map\") |&gt; \n  addPolygons(popup = ~ diff_label,\n              fillColor = ~pal(diff),\n              fillOpacity = .7,\n              color = \"black\",\n              weight = 1,\n              group = \"Housing\") |&gt; \n  addLegend(\"bottomright\", pal = pal, values = ~diff,\n            title = \"Difference\",\n            opacity = 1) |&gt; \n  addLayersControl(overlayGroups = c(\"Base map\", \"Housing\"),\n                   options = layersControlOptions(collapsed = FALSE)) |&gt; \n  addFullscreenControl()\n\nleaflet_map\n\n\n\n\n#frameWidget(leaflet_map, options=frameOptions(allowfullscreen = TRUE))\n\nThe North Side and the Hill were targets of “urban renewal” in the middle of the century. Dense housing in heavily African-American communities were demolished to make way for an opera house, the 279 and 579 highways, and parking lots. The highways are directly related to the white flight exodus to the suburbs, especially in the west and north. Those highways made it easy for the new suburbanites to commute longer distances in single passenger vehicles.\nThese graphs shows that the areas with the most housing in 1940 lost thousands of units, while outlying areas gained thousands of units.\n\nslope_graph_anim &lt;- hu_diff |&gt; \n  as_tibble() |&gt; \n  select(-geometry) |&gt;\n  arrange(desc(units_1940)) |&gt; \n  pivot_longer(cols = c(units_1940, units_2019), names_to = \"year\", values_to = \"housing_units\") |&gt; \n  mutate(year = str_remove(year, \"^units_\")) |&gt; \n  mutate(order = row_number()) |&gt; \n  ggplot(aes(year, housing_units)) +\n  geom_line(aes(group = GEOID10), alpha = .1) +\n  geom_point(aes(group = str_c(year, GEOID10)), alpha = .05) +\n  scale_y_comma() +\n  transition_reveal(order) +\n  labs(title = \"Housing unit change from 1940-2019\",\n       subtitle = \"From areas with the most units in 1940 to the least\",\n       x = \"Year\",\n       y = \"Housing units\") +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.border = element_blank(),\n        axis.title.x = element_blank())\n\nslope_graph_anim &lt;- animate(slope_graph_anim, duration = 10, fps = 40, end_pause = 60)\n\nslope_graph_anim\n\n\n\n\n\nhu_diff |&gt; \n  ggplot(aes(units_1940, units_2019)) +\n  geom_abline(lty = 2) +\n  geom_point(alpha = .2) +\n  annotate(\"text\", x = 3500, y = 3800, label = \"No change\", angle = 45) +\n  annotate(\"text\", x = 300, y = 4500, label = \"Gain\") +\n  annotate(\"text\", x = 4300, y = 100, label = \"Loss\") +\n  tune::coord_obs_pred() +\n  scale_x_comma() +\n  scale_y_comma() +\n  labs(title = \"Change in housing units\",\n       x = \"Units in 1940\",\n       y = \"Units in 2019\")\n\n\n\n\n\nMoving north and west\nThese maps show the estimates of housing units for each decennial period. Outlying areas in the north and west, directly served by the new highway system, gained thousands of housing units.\n\nac_housing_hu |&gt; \n  ggplot() +\n  geom_sf(aes(fill = housing_units), color = NA) +\n  scale_fill_viridis_c(\"Housing units\", labels = comma) +\n  facet_wrap(~year) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank())\n\n\n\n\nGeographically larger Census tracts gained more of the % of total housing over time.\n\nac_sqmi &lt;- ac_housing |&gt; \n  select(GEOID10, starts_with(\"sqmi\")) |&gt; \n  st_drop_geometry() |&gt; \n  as_tibble() |&gt; \n  pivot_longer(starts_with(\"sqmi\"), names_to = \"year\", values_to = \"sqmi\")\n\nac_sqmi_year &lt;- ac_sqmi |&gt; \n  distinct(year) |&gt; \n  mutate(year_fixed = c(1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2019))\n\nac_sqmi &lt;- ac_sqmi |&gt; \n  left_join(ac_sqmi_year) |&gt; \n  select(-year) |&gt; \n  rename(year = year_fixed)\n\nac_density &lt;- ac_housing_hu |&gt; \n  select(GEOID10, year, housing_units) |&gt; \n  left_join(ac_sqmi) |&gt; \n  mutate(density = housing_units / sqmi)\n\ncurve_anim &lt;- ac_density |&gt; \n  st_drop_geometry() |&gt; \n  select(GEOID10, year, housing_units, sqmi) |&gt; \n  mutate(year = as.character(year) |&gt; fct_inorder()) |&gt; \n  arrange(year, sqmi) |&gt; \n  group_by(year) |&gt; \n  mutate(housing_units_cumsum = cumsum(housing_units),\n         pct_units = housing_units_cumsum / sum(housing_units)) |&gt; \n  ungroup() |&gt; \n  ggplot(aes(sqmi, pct_units, color = year)) +\n  geom_line() +\n  scale_y_percent() +\n  labs(title = \"Housing moves to outlying areas over time\",\n       subtitle = \"Year: {closest_state}\",\n       x = \"Square miles\",\n       y = \"Cumulative percent of units\",\n       color = \"Year\") +\n  transition_states(year) +\n  shadow_mark()\n\ncurve_anim &lt;- animate(curve_anim, duration = 10, fps = 20)\n\ncurve_anim\n\n\n\n\n\n\nHousing peaks\nThis shows the year that each census tract peaked in terms of housing units. The areas that attracted heavy industry in the late 19th/early 20th century (and built housing nearby to support it) were crushed by the collapse of that industry. The single census tract that makes up “Downtown” has clawed back some housing recently.\n\nac_housing_hu |&gt; \n  group_by(GEOID10) |&gt; \n  filter(housing_units == max(housing_units)) |&gt; \n  ungroup() |&gt; \n  rename(max_year = year) |&gt; \n  ggplot() +\n  geom_sf(aes(fill = max_year), color = NA) +\n  scale_fill_viridis_c(direction = -1) +\n  labs(title = \"Year of peak housing\",\n       fill = \"Peak\") +\n  theme(panel.grid.major = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank(),\n        panel.border = element_blank())"
  },
  {
    "objectID": "posts/suburbanization-of-allegheny-county/index.html#housing-moves-away-from-the-center",
    "href": "posts/suburbanization-of-allegheny-county/index.html#housing-moves-away-from-the-center",
    "title": "Suburbanization of Allegheny County",
    "section": "Housing moves away from the center",
    "text": "Housing moves away from the center\nA major trend from 1940-2019 is the significant shift in housing from around the core to outlying suburbs. This code calculates the distance between each tract and the “Downtown” tract (42003020100), and plots the number of units compared to that distance.\n\ndowntown_tract &lt;- ac_housing_hu |&gt; \n  filter(GEOID10 == \"42003020100\") |&gt; \n  distinct(GEOID10, geometry) |&gt; \n  mutate(centroid = st_point_on_surface(geometry)) |&gt; \n  st_set_geometry(\"centroid\") |&gt; \n  select(-geometry)\n\ndistance_anim &lt;- ac_housing_hu |&gt; \n  select(GEOID10, year, housing_units) |&gt; \n  mutate(centroid = st_point_on_surface(geometry),\n         geoid = str_c(GEOID10, year, sep = \"_\"),\n         year = as.integer(year)) |&gt; \n  mutate(distance_to_downtown = st_distance(centroid, downtown_tract) |&gt; as.numeric() / 5280) |&gt; \n  ggplot(aes(distance_to_downtown, housing_units)) +\n  geom_point(aes(group = GEOID10), alpha = .3) +\n  geom_smooth(aes(group = year)) +\n  scale_x_continuous() +\n  scale_y_comma() +\n  transition_states(year, \n                    state_length = 10) +\n  labs(title = \"Housing has moved farther away from downtown\",\n       subtitle = \"{closest_state}\",\n       x = \"Miles from downtown\",\n       y = \"Housing units\") +\n  theme(panel.grid.minor = element_blank())\n\ndistance_anim &lt;- animate(distance_anim)\n\ndistance_anim"
  },
  {
    "objectID": "posts/suburbanization-of-allegheny-county/index.html#land-use",
    "href": "posts/suburbanization-of-allegheny-county/index.html#land-use",
    "title": "Suburbanization of Allegheny County",
    "section": "Land use",
    "text": "Land use\nThe HHUUD10 data also contains estimates for the percentage of land in a tract that is “developed” for the years 1992, 2001, and 2011. “Developed” in this context means “covered by an urban land use”.\n\nac_dev &lt;- ac_housing |&gt; \n  select(GEOID10, starts_with(\"pdev\")) |&gt; \n  pivot_longer(cols = starts_with(\"pdev\"), names_to = \"year\", values_to = \"pct_dev\") \n\ndev_years &lt;- ac_dev |&gt; \n  st_drop_geometry() |&gt; \n  distinct(year) |&gt; \n  mutate(year_fixed = c(1992, 2001, 2011))\n\nac_dev &lt;- ac_dev |&gt; \n  left_join(dev_years) |&gt; \n  select(-year) |&gt; \n  rename(year = year_fixed)\n\nac_dev |&gt; \n  ggplot() +\n  geom_sf(aes(fill = pct_dev), color = NA) +\n  facet_wrap(~year) +\n  scale_fill_viridis_c(labels = percent) +\n  labs(title = \"Percent of land that is developed\",\n       fill = NULL) +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks = element_blank())\n\n\n\n\nI find it interesting that more of the South Hills is developed than the North Hills. I would have expected more development in the North Hills due to the McKnight Road area and Wexford. My guess is that the tracts in the North Hills cover more land area, which decreases the % that is developed. Conversely, the tracts in the South Hills cover less land area, and less of the South Hills is useful for development because of steep hills and creeks. This concentrates development in a smaller area."
  },
  {
    "objectID": "posts/suburbanization-of-allegheny-county/index.html#conclusion",
    "href": "posts/suburbanization-of-allegheny-county/index.html#conclusion",
    "title": "Suburbanization of Allegheny County",
    "section": "Conclusion",
    "text": "Conclusion\nOver the past 80 years, Allegheny County has lost a significant amount of housing in its core urban area. Much of this is directly related to the collapse of the steel industry and “urban renewal”. At the same time, new housing development has been pushed out to the suburbs. This is a loss in terms of housing density, which has become a major discussion point in urban planning over the past 20 years.\nHigher density areas have a lower per capita carbon footprint due to non-car commute modes and agglomeration effects. Higher density also does not expand the wildland-urban interface. This leaves more land for the natural environment, moves humans away from dangers such as wildfires, and lowers the frequency of interaction between wild animals and humans, which can transfer disease (coronavirus, ebola). It will be interesting to see whether the suburbanization trend continues after the initial shocks of COVID-19 pandemic subside."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/riverhounds_lilley/index.html",
    "href": "posts/riverhounds_lilley/index.html",
    "title": "Pittsburgh Riverhounds under Coach Lilley",
    "section": "",
    "text": "I have been a season-ticket holder with the Pittsburgh Riverhounds for a couple seasons now. The stadium has a great fan experience, and the team has gotten a lot better over the past few years. A major part of that is the head coach, Bob Lilley. I will use some data from American Soccer Analysis to show how the Riverhounds have improved. Their website has an explainer on expected goals and other metrics they calculate.\nLoad libraries and configure settings:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(hrbrthemes)\n\nNOTE: Either Arial Narrow or Roboto Condensed fonts are required to use these themes.\n      Please use hrbrthemes::import_roboto_condensed() to install Roboto Condensed and\n      if Arial Narrow is not on your system, please see https://bit.ly/arialnarrow\n\nlibrary(ggrepel)\n\ntheme_set(theme_ipsum(base_size = 18))\n\n#source https://app.americansocceranalysis.com/#!/\n\nI pulled a CSV of team-level goal metrics for the last 4 USL seasons from the ASA website. This shows the available data:\n\nusl &lt;- read_csv(\"post_data/american_soccer_analysis_uslc_xgoals_teams_2023-10-15.csv\") %&gt;% \n  clean_names() %&gt;% \n  select(-x1) %&gt;% \n  mutate(coach = case_when(team == \"PIT\" & season &gt;= 2018 ~ \"Lilley\",\n                           team == \"PIT\" & season &lt; 2018 ~ \"Brandt\",\n                           TRUE ~ NA_character_)) |&gt; \n  filter(season &lt; 2021)\n\nNew names:\nRows: 216 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(1): Team dbl (13): Season, Games, ShtF, ShtA, GF, GA, GD, xGF, xGA, xGD,\nGD-xGD, Pts,... lgl (1): ...1\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\nglimpse(usl)\n\nRows: 134\nColumns: 15\n$ team    &lt;chr&gt; \"PHX\", \"CIN\", \"RNO\", \"LOU\", \"HFD\", \"PIT\", \"SLC\", \"SA\", \"TBR\", …\n$ season  &lt;dbl&gt; 2019, 2018, 2020, 2020, 2020, 2020, 2017, 2020, 2020, 2020, 20…\n$ games   &lt;dbl&gt; 34, 34, 16, 16, 16, 16, 32, 16, 16, 16, 34, 15, 16, 34, 34, 34…\n$ sht_f   &lt;dbl&gt; 16.79, 12.68, 16.06, 15.06, 10.31, 10.81, 11.88, 14.81, 12.63,…\n$ sht_a   &lt;dbl&gt; 13.32, 15.15, 14.94, 9.56, 12.19, 7.81, 11.41, 12.44, 9.38, 13…\n$ gf      &lt;dbl&gt; 2.53, 2.06, 2.69, 1.75, 1.88, 2.38, 1.84, 1.88, 1.56, 2.75, 1.…\n$ ga      &lt;dbl&gt; 1.00, 0.97, 1.31, 0.75, 1.44, 0.63, 0.91, 0.75, 0.63, 1.19, 0.…\n$ gd      &lt;dbl&gt; 1.53, 1.09, 1.38, 1.00, 0.44, 1.75, 0.94, 1.13, 0.94, 1.56, 0.…\n$ x_gf    &lt;dbl&gt; 2.08, 1.43, 2.25, 1.48, 1.32, 1.69, 1.46, 1.58, 1.63, 2.39, 1.…\n$ x_ga    &lt;dbl&gt; 1.37, 1.26, 1.53, 1.01, 1.35, 0.94, 1.34, 1.17, 0.84, 1.30, 0.…\n$ x_gd    &lt;dbl&gt; 0.71, 0.17, 0.72, 0.47, -0.03, 0.75, 0.12, 0.42, 0.79, 1.10, 0…\n$ gd_x_gd &lt;dbl&gt; 0.82, 0.92, 0.65, 0.53, 0.46, 1.00, 0.81, 0.71, 0.15, 0.47, 0.…\n$ pts     &lt;dbl&gt; 2.29, 2.26, 2.25, 2.19, 2.19, 2.13, 2.09, 2.06, 2.06, 2.00, 2.…\n$ x_pts   &lt;dbl&gt; 1.80, 1.49, 1.83, 1.70, 1.39, 1.86, 1.44, 1.64, 1.85, 1.98, 1.…\n$ coach   &lt;chr&gt; NA, NA, NA, NA, NA, \"Lilley\", NA, NA, NA, NA, \"Lilley\", NA, NA…\n\n\nThe Riverhound’s statistics show clear improvement in 2018 when Lilley took over from Brandt. The team immediately began scoring more than they allowed. The team’s expected goals for and against also improved, which shows that the improvement wasn’t a matter of luck.\n\ngoal_data &lt;- usl %&gt;% \n  filter(team == \"PIT\") %&gt;% \n  select(team, season, gf, x_gf, ga, x_ga) %&gt;% \n  pivot_longer(cols = c(gf, x_gf, ga, x_ga), names_to = \"g_type\", values_to = \"g_value\") %&gt;%\n  mutate(goal_type = case_when(str_detect(g_type, \"gf$\") ~ \"For\",\n                               TRUE ~ \"Against\")) %&gt;% \n  mutate(metric_type = case_when(str_detect(g_type, \"^x_\") ~ \"Expected\",\n                                 TRUE ~ \"Actual\"))\n\ngoal_data %&gt;% \n  ggplot(aes(season, g_value, color = goal_type, lty = metric_type)) +\n  geom_line(size = 1.5) +\n  geom_point(data = filter(goal_data, metric_type == \"Actual\"), size = 2) +\n  labs(title = \"Pittsburgh Riverhounds\",\n       subtitle = \"Expected and Actual Goals per game\",\n       x = \"Season\",\n       y = \"Goals\",\n       color = \"Goal Type\",\n       lty = \"Metric Type\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nThis shows that in terms of expected goal difference, the Riverhounds became one of the top teams in the USL once Lilley took over.\n\nusl %&gt;% \n  ggplot(aes(season, x_gd, group = team)) +\n  geom_hline(yintercept = 0, size = 1, lty = 2) +\n  geom_line(color = \"black\", alpha = .2) +\n  geom_line(data = filter(usl, team == \"PIT\"), \n            color = \"gold\", size = 2) +\n  geom_point(data = filter(usl, team == \"PIT\"),\n             aes(fill = coach),\n             shape = 21, size = 4) +\n  scale_fill_manual(values = c(\"grey\", \"gold\")) +\n  #coord_fixed(ratio = .5) +\n  labs(title = \"xG difference per game\",\n       x = \"Season\",\n       y = \"xG Difference\",\n       fill = \"Riverhounds Coach\",\n       caption = \"Grey lines show other USL teams\")\n\n\n\n\nLilley’s Riverhounds are consistently better than league average in terms of expected goals.\n\nusl %&gt;% \n  ggplot(aes(x_gd)) +\n  #geom_histogram(binwidth = .2) +\n  geom_vline(data = filter(usl, team == \"PIT\"), aes(xintercept = x_gd), size = 3) +\n  geom_vline(data = filter(usl, team == \"PIT\"), aes(xintercept = x_gd, color = coach),\n             size = 2.5, key_glyph = \"rect\") +\n  geom_density(aes(y = ..count.. * .2), fill = \"white\", alpha = 1) +\n  geom_vline(xintercept = 0, lty = 2) +\n  geom_hline(yintercept = 0) +\n  scale_color_manual(values = c(\"grey\", \"gold\")) +\n  scale_x_continuous(expand = c(0,0)) +\n  scale_y_continuous(expand = c(0,0)) +\n  coord_cartesian(ylim = c(0, 25)) +\n  #coord_fixed(ratio = .1) +\n  labs(title = \"xG Difference Per Game\",\n       subtitle = \"Distribution of all USL teams 2017-2020\",\n       x = \"xG\",\n       y = \"Number of teams\",\n       color = \"Riverhounds Coach\") +\n  theme(legend.key = element_rect(color = \"black\"))\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\nWhile the 2020 Riverhounds were a very good team, they were not quite as good as their plain goals for/against would show. This graph shows that they were fortunate to do as well as they did (which, again, was very well).\n\nusl %&gt;% \n  mutate(logo = case_when(team == \"PIT\" ~ \"post_data/pit_logo.png\",\n                          TRUE ~ NA_character_)) %&gt;% \n  ggplot(aes(x_gd, gd)) +\n  geom_abline(lty = 2) +\n  geom_point(alpha = .3) +\n  ggimage::geom_image(aes(image = logo)) +\n  geom_label_repel(data = filter(usl, team == \"PIT\"),\n                   aes(label = season, fill = coach),\n                   force = 5,\n                   key_glyph = \"rect\") +\n  annotate(\"text\", label = \"Under-performing\",\n           x = .75, y = -1.5) +\n  annotate(\"text\", label = \"Over-performing\",\n           x = -1, y = 1.5) +\n  tune::coord_obs_pred() +\n  scale_fill_manual(values = c(\"grey\", \"gold\")) +\n  labs(title = \"Goal and xG difference per game\",\n       x = \"xG Difference\",\n       y = \"Goal Difference\",\n       fill = \"Riverhounds Coach\") +\n  theme(legend.key = element_rect(color = \"black\"))\n\nWarning: Removed 130 rows containing missing values (`geom_image()`).\n\n\n\n\n\nThis shows that the 2020 Riverhounds were probably one of the most fortunate teams in the league, in addition to being very good.\n\nusl %&gt;% \n  ggplot(aes(season, gd_x_gd, group = team)) +\n  geom_hline(yintercept = 0, lty = 2) +\n  geom_line(color = \"black\", alpha = .2) +\n  geom_line(data = filter(usl, team == \"PIT\"),\n            color = \"gold\", size = 2) +\n  geom_point(data = filter(usl, team == \"PIT\"),\n             aes(fill = coach, group = team),\n             shape = 21, size = 4, color = \"black\") +\n  scale_fill_manual(values = c(\"grey\", \"gold\")) +\n  coord_cartesian(ylim = c(-1.5, 1.5)) +\n  #coord_fixed(ratio = .5) +\n  labs(title = \"Goal difference - xG difference\",\n       subtitle = \"Per game\",\n       x = \"Season\",\n       y = substitute(paste(\"\" %&lt;-% \"\", \"Under-performing\", \"  |  \", \"Over-performing\", \"\" %-&gt;% \"\")),\n       fill = \"Riverhounds Coach\",\n       caption = \"Grey lines show other USL teams\")\n\n\n\n\nIn FiveThirtyEights’ Global Soccer Power Index, the Riverhounds will begin the 2021 season ranked around #460 out of 639 teams."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/effect-of-geographic-resolution-on-ebirdst-abundance/index.html",
    "href": "posts/effect-of-geographic-resolution-on-ebirdst-abundance/index.html",
    "title": "Effect of Geographic Resolution on ebirdst Abundance",
    "section": "",
    "text": "While exploring some of the citizen science bird observation data available through ebirdst, I was confused by how to understand the calculation of ebirdst’s abundance metric.\nThe ebirdst documentation (?ebirdst::load_raster) defines abundance as:\nI had seen some weird results when trying to manually calculate abundance as occurrence * count. My initial attempt had aggregated the results by month.\nThe underlying problem is that abundance and count are the results of models, and are subject to model error. I also believe that the data outputted from load_raster lacks the necessary significant digits to accurately recreate abundance. Lowering the resolution or aggregating the data will exacerbate this issue.\nThis code loads my convenience function to retrieve a metric for a species at a given geographic resolution. This gets occurrence, count, and abundance for the Northern Cardinal at high (3 km), medium (9 km), and low resolutions (27 km). The function also crops the underlying raster data to Pennsylvania.\nlibrary(here)\nlibrary(hrbrthemes)\nlibrary(patchwork)\n\nsource(\"https://raw.githubusercontent.com/conorotompkins/ebird_shiny_app/main/scripts/functions/get_species_metric.R\")\n\ntheme_set(theme_ipsum())\n\nspecies_table &lt;- crossing(location = \"Pennsylvania\",\n                          species = c(\"Northern Cardinal\"),\n                          metric = c(\"occurrence\", \"count\", \"abundance\"),\n                          resolution = c(\"hr\", \"mr\", \"lr\"))\nspecies_table\n\n# A tibble: 9 × 4\n  location     species           metric     resolution\n  &lt;chr&gt;        &lt;chr&gt;             &lt;chr&gt;      &lt;chr&gt;     \n1 Pennsylvania Northern Cardinal abundance  hr        \n2 Pennsylvania Northern Cardinal abundance  lr        \n3 Pennsylvania Northern Cardinal abundance  mr        \n4 Pennsylvania Northern Cardinal count      hr        \n5 Pennsylvania Northern Cardinal count      lr        \n6 Pennsylvania Northern Cardinal count      mr        \n7 Pennsylvania Northern Cardinal occurrence hr        \n8 Pennsylvania Northern Cardinal occurrence lr        \n9 Pennsylvania Northern Cardinal occurrence mr\nspecies_metrics &lt;- species_table %&gt;% \n  mutate(data = pmap(list(location, species, metric, resolution), ~get_species_metric(..1, ..2, ..2, ..3, ..4))) %&gt;% \n  mutate(resolution = fct_relevel(resolution, c(\"hr\", \"mr\", \"lr\"))) %&gt;% \n  arrange(species, metric, resolution) |&gt; \n  unnest(data) %&gt;% \n  unnest(data)\nspecies_metrics\n\n# A tibble: 1,243,320 × 13\n   location species metric resolution family_common_name common_name metric_desc\n   &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;              &lt;chr&gt;       &lt;chr&gt;      \n 1 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 2 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 3 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 4 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 5 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 6 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 7 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 8 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n 9 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n10 Pennsyl… Northe… abund… hr         Northern Cardinal  Northern C… abundance  \n# ℹ 1,243,310 more rows\n# ℹ 6 more variables: date &lt;date&gt;, value &lt;dbl&gt;, month &lt;chr&gt;, region &lt;chr&gt;,\n#   x &lt;dbl&gt;, y &lt;dbl&gt;\nThis unnests the data and recalculates abundance (abundance_test) and the difference between actual abundance and abundance_test.\nspecies_table_unnested &lt;- species_metrics %&gt;%\n  select(species, resolution, date, month, x, y, metric_desc, value) %&gt;% \n  pivot_wider(id_cols = c(species, resolution, date, month, x, y),\n              names_from = metric_desc,\n              values_from = value) %&gt;% \n  select(species, resolution, date, month, x, y, count, occurrence, abundance) %&gt;% \n  mutate(abundance_test = count * occurrence,\n         diff = abundance - abundance_test)\nGrouping by month to get to the county level changes the grain of the data so much that abundance_test undershoots abundance by 20%. This occurs at all resolutions.\nspecies_metrics %&gt;%\n  select(species, resolution, date, month, x, y, metric_desc, value) %&gt;% \n  pivot_wider(id_cols = c(species, resolution, date, month, x, y),\n              names_from = metric_desc,\n              values_from = value) %&gt;% \n  select(species, resolution, date, month, x, y, count, occurrence, abundance) %&gt;% \n  group_by(species, month, resolution) %&gt;% \n  summarize(occurrence = mean(occurrence, na.rm = T),\n            count = mean(count, na.rm = T),\n            abundance = mean(abundance, na.rm = T)) %&gt;% \n  ungroup() %&gt;% \n  mutate(abundance_test = count * occurrence,\n         diff = abundance - abundance_test) %&gt;% \n  ggplot(aes(abundance, abundance_test)) +\n  geom_abline() +\n  geom_point() +\n  facet_wrap(~resolution) +\n  tune::coord_obs_pred()\n\n`summarise()` has grouped output by 'species', 'month'. You can override using\nthe `.groups` argument.\nTotally un-aggregated, abundance_test closely resembles abundance, but degrades as resolution decreases.\nspecies_table_unnested %&gt;% \n  select(abundance, abundance_test, resolution) %&gt;% \n  drop_na() %&gt;% \n  ggplot(aes(abundance, abundance_test)) +\n  geom_density_2d_filled(contour_var = \"ndensity\") +\n  geom_abline(color = \"white\") +\n  facet_wrap(~resolution) +\n  tune::coord_obs_pred() +\n  coord_cartesian(xlim = c(0, 4),\n                  ylim = c(0, 4)) +\n  guides(fill = guide_colorsteps())\n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\nAt lower resolutions, the difference is positively skewed, which means that abundance is higher than abundance_test.\nspecies_table_unnested %&gt;% \n  drop_na(diff) %&gt;% \n  ggplot(aes(diff)) +\n  geom_histogram() +\n  facet_wrap(~resolution, scale = \"free_y\", ncol = 1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\nAt the highest resolution, diff is heteroskedastic. At lower resolutions, there are patterns to the error.\nspecies_table_unnested %&gt;% \n  drop_na(occurrence, diff) %&gt;% \n  ggplot(aes(occurrence, diff)) +\n  geom_density_2d_filled(contour_var = \"ndensity\") +\n  facet_wrap(~resolution) + \n  scale_x_percent() +\n  guides(fill = guide_colorsteps())\nThis was a useful exercise for me to understand how the geographic resolution and other aggregation of the data can affect estimated metrics, specifically in the citizen science context."
  },
  {
    "objectID": "posts/effect-of-geographic-resolution-on-ebirdst-abundance/index.html#update",
    "href": "posts/effect-of-geographic-resolution-on-ebirdst-abundance/index.html#update",
    "title": "Effect of Geographic Resolution on ebirdst Abundance",
    "section": "Update",
    "text": "Update\nI made an issue on the ebirdst Github page and talked to one of the maintainers about their definitions of count and abundance. I now have a much stronger understanding of these variables.\nThe following code reproduces the graph I attached to the issue:\n\nlibrary(hrbrthemes)\ntheme_set(theme_ipsum())\n\nnorcar_table &lt;- crossing(location = \"Pennsylvania\",\n                         species = c(\"Northern Cardinal\"),\n                         metric = c(\"occurrence\", \"count\", \"abundance\"),\n                         resolution = c(\"hr\"))\n\n\nnorcar_metrics &lt;- norcar_table %&gt;% \n  mutate(data = pmap(list(location, species, metric, resolution), ~get_species_metric(..1, ..2, ..2, ..3, ..4))) %&gt;% \n  mutate(resolution = fct_relevel(resolution, c(\"hr\", \"mr\", \"lr\"))) %&gt;% \n  arrange(species, metric, resolution) %&gt;%\n  unnest(data) |&gt; \n  unnest(data)\n\n\nnorcar_metrics_wide &lt;- norcar_metrics %&gt;% \n  select(species, date, x, y, metric_desc, value) %&gt;% \n  pivot_wider(names_from = metric_desc,\n              values_from = value)\n\nplot_1 &lt;- norcar_metrics_wide %&gt;% \n  drop_na(occurrence, count) %&gt;% \n  ggplot(aes(occurrence, count)) +\n  geom_density_2d_filled(contour_var = \"ndensity\") +\n  scale_x_percent() +\n  guides(fill = \"none\") +\n  theme_bw()\n\nplot_2 &lt;- norcar_metrics_wide %&gt;% \n  drop_na() %&gt;% \n  ggplot(aes(occurrence, abundance)) +\n  geom_density_2d_filled(contour_var = \"ndensity\") +\n  scale_x_percent() +\n  guides(fill = \"none\") +\n  theme_bw()\n\nplot_3 &lt;- norcar_metrics_wide %&gt;%\n  drop_na() %&gt;% \n  ggplot(aes(count, abundance)) +\n  geom_density_2d_filled(contour_var = \"ndensity\") +\n  geom_abline() +\n  guides(fill = \"none\") +\n  theme_bw()\n\nlayout &lt;- \"\nAACC\nBBCC\n\"\n\nplot_1 + plot_2 + plot_3 + \n  plot_layout(guides = 'collect', design = layout) +\n  plot_annotation(title = \"Northern Cardinal in Pennsylvania\")"
  },
  {
    "objectID": "posts/effect-of-geographic-resolution-on-ebirdst-abundance/index.html#citations",
    "href": "posts/effect-of-geographic-resolution-on-ebirdst-abundance/index.html#citations",
    "title": "Effect of Geographic Resolution on ebirdst Abundance",
    "section": "Citations",
    "text": "Citations\nFink, D., T. Auer, A. Johnston, M. Strimas-Mackey, O. Robinson, S. Ligocki, W. Hochachka, C. Wood, I. Davies, M. Iliff, L. Seitz. 2020. eBird Status and Trends, Data Version: 2019; Released: 2020 Cornell Lab of Ornithology, Ithaca, New York. https://doi.org/10.2173/ebirdst.2019"
  },
  {
    "objectID": "posts/shiny-venn-diagram/index.html",
    "href": "posts/shiny-venn-diagram/index.html",
    "title": "Making a Venn diagram in Shiny",
    "section": "",
    "text": "Introduction\nThis blog post is about making Venn diagrams work in Shiny, and the issues I ran into with shiny::nearPoints(). I show how this impacted my initial approach, and discuss the underlying issue.\nTLDR; shiny::nearPoints() doesn’t work with dataframes containing list-columns the way I expected\n\n\nBackground\nI have been working on a Shiny app that I will use to plan birdwatching trips. It uses the {ebirdst} package to pull abundance data for hundreds of species of birds in 27x27km tiles in North America. A major feature of the app will be the ability to compare how similar two areas (tiles) are. This compares the abundance for a species in a given tile in a given month. I wanted to include a Venn diagram that shows which species are exclusive to each tile. The user can click on the Venn diagram to see the species associated with each segment of the Venn diagram.\nThis involves making a venn diagram in ggplot2 and extracting the segment that the user clicks on with nearPoints(). This was more challenging than I had anticipated.\n\n\nVenn diagram data\nnearPoints() requires:\n\ndf: a data frame with x and y coordinates it can interpret\ncoordinfo: the user click coordinates as captured from the ui\n\nI use the ggVennDiagram package to make the venn diagram plot. This package uses ggplot2, but does a lot of pre-processing of the data beforehand. This made it difficult to get access to the df for nearPoints().\nThis is an example of a ggVennDiagram plot. It takes a list object, turns that into a dataframe, and then uses sf to draw the circles.\n\nlibrary(tidyverse)\nlibrary(ggVennDiagram)\n\ngenes &lt;- paste(\"gene\",1:100,sep=\"\")\nset.seed(20210419)\nx &lt;- list(A=sample(genes,30),\n          B=sample(genes,50))\n\nggVennDiagram(x)\n\n\n\n\nLooking under the hood of ggVennDiagram() shows the pre-processing steps:\n\nvenn &lt;- Venn(x)\ndata &lt;- process_data(venn)\n\nVenn() creates an object with slots representing the two sets A and B\n\nVenn(x)\n\nAn object of class \"Venn\"\nSlot \"sets\":\n$A\n [1] \"gene27\" \"gene76\" \"gene57\" \"gene33\" \"gene78\" \"gene39\" \"gene63\" \"gene41\"\n [9] \"gene66\" \"gene17\" \"gene16\" \"gene69\" \"gene75\" \"gene9\"  \"gene68\" \"gene3\" \n[17] \"gene34\" \"gene54\" \"gene19\" \"gene83\" \"gene2\"  \"gene40\" \"gene87\" \"gene60\"\n[25] \"gene61\" \"gene24\" \"gene44\" \"gene93\" \"gene53\" \"gene7\" \n\n$B\n [1] \"gene84\"  \"gene36\"  \"gene37\"  \"gene47\"  \"gene91\"  \"gene46\"  \"gene92\" \n [8] \"gene33\"  \"gene67\"  \"gene73\"  \"gene25\"  \"gene5\"   \"gene63\"  \"gene2\"  \n[15] \"gene83\"  \"gene56\"  \"gene77\"  \"gene10\"  \"gene12\"  \"gene95\"  \"gene76\" \n[22] \"gene53\"  \"gene99\"  \"gene19\"  \"gene31\"  \"gene86\"  \"gene80\"  \"gene65\" \n[29] \"gene48\"  \"gene100\" \"gene89\"  \"gene58\"  \"gene35\"  \"gene30\"  \"gene21\" \n[36] \"gene44\"  \"gene72\"  \"gene18\"  \"gene45\"  \"gene42\"  \"gene1\"   \"gene27\" \n[43] \"gene90\"  \"gene14\"  \"gene43\"  \"gene26\"  \"gene96\"  \"gene17\"  \"gene16\" \n[50] \"gene29\" \n\n\nSlot \"names\":\n[1] \"A\" \"B\"\n\n\nprocess_data() turns those slots into dataframes with sf columns representing the segment polygons.\n\nvenn &lt;- Venn(x)\nprocess_data(venn)\n\nAn object of class \"VennPlotData\"\nSlot \"setEdge\":\nSimple feature collection with 2 features and 5 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 125 ymin: 250 xmax: 875 ymax: 750\nCRS:           NA\n# A tibble: 2 × 6\n  id                                        geometry component item  count name \n  &lt;chr&gt;                                 &lt;LINESTRING&gt; &lt;chr&gt;     &lt;nam&gt; &lt;int&gt; &lt;chr&gt;\n1 1     (500 716, 493.065 720.007, 485.954 723.777,… setEdge   &lt;chr&gt;    30 A    \n2 2     (500 284, 506.935 279.998, 514.046 276.243,… setEdge   &lt;chr&gt;    50 B    \n\nSlot \"setLabel\":\nSimple feature collection with 2 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 250 ymin: 780 xmax: 750 ymax: 780\nCRS:           NA\n# A tibble: 2 × 4\n  id     geometry component name \n  &lt;chr&gt;   &lt;POINT&gt; &lt;chr&gt;     &lt;chr&gt;\n1 1     (250 780) setLabel  A    \n2 2     (750 780) setLabel  B    \n\nSlot \"region\":\nSimple feature collection with 3 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 125 ymin: 250 xmax: 875 ymax: 750\nCRS:           NA\n# A tibble: 3 × 6\n  id                                        geometry component item  count name \n  &lt;chr&gt;                                    &lt;POLYGON&gt; &lt;chr&gt;     &lt;lis&gt; &lt;int&gt; &lt;chr&gt;\n1 1     ((500 716, 492.317 711.329, 484.878 706.459… region    &lt;chr&gt;    19 A    \n2 2     ((500 284, 507.683 288.649, 515.122 293.497… region    &lt;chr&gt;    39 B    \n3 12    ((507.683 711.328, 515.122 706.458, 522.317… region    &lt;chr&gt;    11 A..B \n\n\nThe region slot is most important for my purposes. It contains the sf polygons for the segments and the distinct counts exclusive to each segment.\n\nprocess_data(venn) %&gt;% \n  .@region\n\nSimple feature collection with 3 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 125 ymin: 250 xmax: 875 ymax: 750\nCRS:           NA\n# A tibble: 3 × 6\n  id                                        geometry component item  count name \n  &lt;chr&gt;                                    &lt;POLYGON&gt; &lt;chr&gt;     &lt;lis&gt; &lt;int&gt; &lt;chr&gt;\n1 1     ((500 716, 492.317 711.329, 484.878 706.459… region    &lt;chr&gt;    19 A    \n2 2     ((500 284, 507.683 288.649, 515.122 293.497… region    &lt;chr&gt;    39 B    \n3 12    ((507.683 711.328, 515.122 706.458, 522.317… region    &lt;chr&gt;    11 A..B \n\nprocess_data(venn) %&gt;% \n  .@region %&gt;% \n  ggplot(aes(fill = name)) +\n  geom_sf()\n\n\n\n\nI thought using nearPoints() would be pretty easy once I intercepted the region object from the preprocessing steps. I was wrong.\n\n\nShiny app error\nThis basic Shiny app will reproduce the error that nearPoints() generates:\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggVennDiagram)\nlibrary(sf)\n\n#ui\nui &lt;- fluidPage(\n  \n  titlePanel(\"Shiny Venn Diagram\"),\n  \n  mainPanel(\n    plotOutput(\"venn_diagram\", click = \"plot_click\"),\n    tableOutput(\"venn_table\")\n  )\n)\n\ngenes &lt;- paste(\"gene\",1:1000,sep=\"\")\nset.seed(20210419)\nx &lt;- list(A=sample(genes,300),\n          B=sample(genes,525))\n\nvenn &lt;- Venn(x)\nvenn_data &lt;- process_data(venn)@region %&gt;% \n  mutate(centroid = st_point_on_surface(geometry),\n         x = map_dbl(centroid, 1),\n         y = map_dbl(centroid, 2)) %&gt;% \n  select(x, y, name, geometry)\n\n#server\nserver &lt;- function(input, output){\n  \n  output$venn_diagram &lt;- renderPlot({\n    \n    venn_data %&gt;% \n      ggplot(aes(x, y, fill = name, label = name)) +\n      geom_sf() +\n      geom_label()\n    \n  })\n  \n  output$venn_table &lt;- renderTable({\n    \n    req(input$plot_click)\n    \n    nearPoints(venn_data, #this is the issue\n               input$plot_click,\n               threshold = 100)\n    \n  })\n  \n}\n\nThis is the error:\n\nWarning: Error in &lt;-: number of items to replace is not a multiple of replacement length\n104: print.xtable\n98: transform\n97: func\n95: f\n94: Reduce\n85: do\n84: hybrid_chain\n83: renderFunc\n82: output$venn_table\n1: shiny::runApp\n\n\n\nThe fix\nWrapping the venn_data object in st_drop_geometry() drops the sf list-column and turns it back into a regular dataframe.\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggVennDiagram)\nlibrary(sf)\n\n#ui\nui &lt;- fluidPage(\n  \n  titlePanel(\"Shiny Venn Diagram\"),\n  \n  mainPanel(\n    plotOutput(\"venn_diagram\", click = \"plot_click\"),\n    tableOutput(\"venn_table\")\n  )\n)\n\ngenes &lt;- paste(\"gene\",1:1000,sep=\"\")\nset.seed(20210419)\nx &lt;- list(A=sample(genes,300),\n          B=sample(genes,525))\n\nvenn &lt;- Venn(x)\nvenn_data &lt;- process_data(venn)@region %&gt;% \n  mutate(centroid = st_point_on_surface(geometry),\n         x = map_dbl(centroid, 1),\n         y = map_dbl(centroid, 2)) %&gt;% \n  select(x, y, name, geometry)\n\n#server\nserver &lt;- function(input, output){\n  \n  output$venn_diagram &lt;- renderPlot({\n    \n    venn_data %&gt;% \n      ggplot(aes(x, y, fill = name, label = name)) +\n      geom_sf() +\n      geom_label()\n    \n  })\n  \n  output$venn_table &lt;- renderTable({\n    \n    req(input$plot_click)\n    \n    nearPoints(st_drop_geometry(venn_data), #the fix\n               input$plot_click,\n               threshold = 100)\n    \n  })\n  \n}\n\n\n\nWorking Shiny App\nThis is a working example of a Venn diagram in Shiny. input$plot_click captures the coordinates of the click and nearPoints() returns a dataframe of the information about the segment the user clicked on. The ID of the segment is in the name column."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ctompkins_quarto_blog",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\n  \n\n\n\n\nSuburbanization of Allegheny County\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApr 18, 2022\n\n\nR package build\n\n\n\n\n\n\n  \n\n\n\n\nMaking a Venn diagram in Shiny\n\n\n\n\n\n\n\nshiny\n\n\n\n\n\n\n\n\n\n\n\nMar 12, 2022\n\n\nConor Tompkins\n\n\n\n\n\n\n  \n\n\n\n\nEffect of Geographic Resolution on ebirdst Abundance\n\n\n\n\n\n\n\nR\n\n\neBird\n\n\n\n\n\n\n\n\n\n\n\nNov 23, 2021\n\n\nConor Tompkins\n\n\n\n\n\n\n  \n\n\n\n\nPittsburgh Riverhounds under Coach Lilley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2021\n\n\n\n\n\n\nNo matching items"
  }
]